/* global app */
'use strict';
Repository = {
    rocheBPSPMain: {
        getPage: (widgetId) => {
            let dict = {
                rocheBPSPMainUserPanelPopupGridTable: 'MainPage',
                rocheBPSPProductsUserPanelPopupGridTable: 'ProductsPage',
                rocheBPSPProductsCheckoutUserPanelPopupGridTable: 'ProductsPage',
                rocheBPSPIPPlanningUserPanelPopupGridTable: 'IPPlanningPage',
                rocheBPSPIPPlanningCheckoutUserPanelPopupGridTable: 'IPPlanningPage',
                rocheBPSPSettingsUserPanelPopupGridTable: 'SettingsPage',
                rocheBPSPMaterialUserPanelPopupGridTable: 'SettingsPage',
                rocheBPSPAddMaterialUserPanelPopupGridTable: 'SettingsPage',
                rocheBPSPCustomersUserPanelGridTable: 'CustomersPage',
                rocheBPSPCustomersPlanningUserPanelGridTable: 'CustomersPage',
                rocheBPSPCompanySettingsUserPanelGridTable: 'SettingsPage',
                rocheBPSPSecuritySetupUserPanelGridTable: 'SettingsPage',
                rocheBPSPTerritoriesUserPanelGridTable: 'SettingsPage',
                rocheBPSPTerritoriesUsersUserPanelGridTable: 'SettingsPage',
                rocheBPSPAccountsUserPanelGridTable: 'SettingsPage',
                rocheBPSPAccountsOverviewUserPanelGridTable: 'SettingsPage',
                rocheBPSPAccountsTerritoriesUserPanelGridTable: 'SettingsPage',
                rocheBPSPTerritoriesProductsUserPanelGridTable: 'SettingsPage',
                rocheBPSPCompanySettingsMonthlySplitDaysUserPanelGridTable: 'SettingsPage',
                rocheBPSPCompanySettingsCheckedOutUserPanelGridTable: 'SettingsPage',
                rocheBPSPCompanySettingsGrowthUserPanelGridTable: 'SettingsPage',
                rocheBPSPCompanySettingsVersionsUserPanelGridTable: 'SettingsPage',
                rocheBPSPCompanySettingsSimulationsUserPanelGridTable: 'SettingsPage',
                rocheBPSPProductReportUserPanelGridTable: 'ReportsPage',
                rocheBPSPReportKPIUserPanelGridTable: 'ReportsPage',
                rocheBPSPCustomerReportUserPanelGridTable: 'ReportsPage',
                rocheBPSPCustomerStatusReportUserPanelGridTable: 'ReportsPage',
                rocheBPSPIpPlanningReportUserPanelGridTable: 'ReportsPage',

            };
            return dict[widgetId];
        }
    },
    rocheBPSPMainApplicationInit: {
        init: [
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Axes($expand=Tuples($expand=Members($select=Name))),Cells($select=Ordinal,Value)`,
                type: 'POST',
                body: (db) => `{"MDX":"SELECT ({[}Clients].[${db.activeUser}]}*{[zSYS Analogic User Parameter Measure].[FullName]})ON COLUMNS FROM [zSYS Analogic User Parameter]"}`,
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            label: (r, x) => {
                                Utils.setWidgetValue('activeUserName', r.Cells[0].Value);
                                return r.Cells[0].Value;
                            }
                        }
                }
            },
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => `
                   {
                    "MDX" : "SELECT 
                                {[Value Type].[Value Type].[String]} 
                            ON COLUMNS , 
                                {[Measures Control].[Measures Control].[Current Year]} 
                            ON ROWS 
                            FROM [Control] 
                    "}`,
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            value: (r, x) => {
                                Utils.setWidgetValue('systemValueGlobalStartingPlanYear', r.Cells[0].FormattedValue);
                                Utils.setWidgetValueIfNotExist('systemValueIpPlanningSegmentedControlRelativeYear', 'Y0');
                                Utils.setWidgetValueIfNotExistByOther('systemValueIpPlanningSegmentedControlRelativeYearValue', 'systemValueGlobalStartingPlanYear');
                                Utils.setWidgetValue('systemValueGlobalCompanyVersion', 'Live');
                                Utils.setWidgetValue('systemValueFocusedProductDefault', 'PL1');
                                Utils.setWidgetValueByOther('systemValueFocusedProduct', 'systemValueFocusedProductDefault');
                                Utils.setWidgetValue('systemValueIpPlanningFocusedProductDefault', 'PL1');
                                Utils.setWidgetValueByOther('systemValueIpPlanningFocusedProduct', 'systemValueIpPlanningFocusedProductDefault');
                                Utils.setWidgetValueIfNotExist('systemValueGlobalSelectedCompany', false);
                                Utils.setWidgetValue('systemValueCustomerReportFocusedProductDefault', 'PL1');
                                Utils.setWidgetValue('systemValueCustomerReportFocusedProductNameDefault', 'DIVISION DIAGNOSTICS');
                                Utils.setWidgetValueByOther('systemValueCustomerReportFocusedProduct', 'systemValueCustomerReportFocusedProductDefault');
                                Utils.setWidgetValueByOther('systemValueCustomerReportFocusedProductName', 'systemValueCustomerReportFocusedProductNameDefault');
                                Utils.setWidgetValueIfNotExist('systemValueCustomerPlanningSegmentedControlPeriodUnit', 'Yearly');
                                Utils.setWidgetValueIfNotExist('systemValueCustomersPlanningMonthlyType', 'Base Plan');
                                Utils.setWidgetValueIfNotExist('systemValueCustomersPlanningMonthlyTypeValue', 'Base Plan');
                                Utils.setWidgetValue('systemValueDefaultCustomersPlanningFocused', 'PL1');
                                Utils.setWidgetValueIfNotExist('systemValueCustomersPlanningFocused', v('systemValueDefaultCustomersPlanningFocused'));
                                Utils.setWidgetValueIfNotExist('systemValueGlobalVersion', v('systemValueGlobalCompanyVersion'));
                                Utils.setWidgetValueIfNotExist('systemValueGlobalVersionKey', v('systemValueGlobalCompanyVersion'));
                                Utils.setWidgetValue('systemValueCustomerCompareBy', 'None');
                                Utils.setWidgetValue('systemValueIpPlanningCompareBy', 'None');
                                Utils.setWidgetValue('systemValueSimulationFocusedProductDefault', 'PL1');
                                Utils.setWidgetValueByOther('systemValueSimulationFocusedProduct', 'systemValueSimulationFocusedProductDefault');
                                Utils.setWidgetValue('systemValueProductPlanYearsCountDefault', '4');
                                Utils.setWidgetValueByOther('systemValueProductPlanYearsCount', 'systemValueProductPlanYearsCountDefault');
                                Utils.setWidgetValue('systemValueIpPlanYearsCountDefault', '2');
                                Utils.setWidgetValueByOther('systemValueIpPlanYearsCount', 'systemValueIpPlanYearsCountDefault');
                                Utils.setWidgetValue('systemValueCustomerPlanYearsCountDefault', '4');
                                Utils.setWidgetValueByOther('systemValueCustomerPlanYearsCount', 'systemValueCustomerPlanYearsCountDefault');
                                return true;
                            }
                        }
                }
            }
        ]
    },
    rocheBPSPMainUserPanelPopupGridTable: {
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db, widgetId) => {
                let page = Repository.rocheBPSPMain.getPage(widgetId);
                return `{"MDX":"
                      SELECT
                       {
                       [Measures UI Menu Content].[Measures UI Menu Content].[Label],
                       [Measures UI Menu Content].[Measures UI Menu Content].[Link],
                       [Measures UI Menu Content].[Measures UI Menu Content].[Icon],
                       [Measures UI Menu Content].[Measures UI Menu Content].[Color]
                       }
                       ON COLUMNS,
                       NON EMPTY ( {[UI Menu Items].[UI Menu Items].Members} )
                       ON ROWS
                    FROM [UI Menu Content]
                       WHERE
                       (
                       [Companies].[Companies].[0000],
                       [UI Pages].[UI Pages].[${page}]
                       )
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 4,
                query: [
                    (r, x) => {
                        return {
                            label: r.Cells[x].FormattedValue,
                            url: r.Cells[x + 1].FormattedValue,
                            icon: r.Cells[x + 2].FormattedValue,
                            fontColor: r.Cells[x + 3].FormattedValue,
                            iconColor: r.Cells[x + 3].FormattedValue,

                        }
                    }]
            }
        }
    },
    rocheBPSPProductsUserPanelPopupGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPProductsCheckoutUserPanelPopupGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPIPPlanningUserPanelPopupGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPIPPlanningCheckoutUserPanelPopupGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPSettingsUserPanelPopupGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPMaterialUserPanelPopupGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPAddMaterialUserPanelPopupGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPCustomersUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPCustomersPlanningUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPCompanySettingsUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPSecuritySetupUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPTerritoriesUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPTerritoriesUsersUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPAccountsUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPAccountsOverviewUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPAccountsTerritoriesUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPTerritoriesProductsUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPCompanySettingsMonthlySplitDaysUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPCompanySettingsCheckedOutUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPCompanySettingsGrowthUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPCompanySettingsVersionsUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPCompanySettingsSimulationsUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPProductReportUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPReportKPIUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPCustomerReportUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPCustomerStatusReportUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPIpPlanningReportUserPanelGridTable: {
        reference: 'rocheBPSPMainUserPanelPopupGridTable'
    },
    rocheBPSPMainGridRow5Cell1aSubmitToBPXP: {
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => `
                   {
                    "MDX" : "SELECT 
                            {[zSYS Analogic UI User Data Measure].[zSYS Analogic UI User Data Measure].[sValue]} 
                              ON COLUMNS , 
                               {[zSYS Analogic UI Widget].[zSYS Analogic UI Widget].[rocheBPSPMainGridRow5Cell1aSubmitToBPXP]} 
                              ON ROWS 
                            FROM [zSYS Analogic UI User Data] 
                            WHERE 
                              (
                               [}Clients].[}Clients].[${db.activeUser}]
                              ) 
                    "}`,
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            enabled: (r, x) => {
                                return r.Cells[0].FormattedValue == 'TRUE';
                            },

                            skin: (r, x) => {
                                return r.Cells[0].FormattedValue == 'TRUE' ? 'rochemain' : 'rochemain_disabled';
                            }
                        }
                }
            }
    },

    rocheBPSPMainGridRow5Cell1Button: {
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => `
                   {
                    "MDX" : "SELECT 
                            {[zSYS Analogic UI User Data Measure].[zSYS Analogic UI User Data Measure].[sValue]} 
                              ON COLUMNS , 
                               {[zSYS Analogic UI Widget].[zSYS Analogic UI Widget].[rocheBPSPMainGridRow5Cell1Button]} 
                              ON ROWS 
                            FROM [zSYS Analogic UI User Data] 
                            WHERE 
                              (
                               [}Clients].[}Clients].[${db.activeUser}]
                              ) 
                    "}`,
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            enabled: (r, x) => {
                                return r.Cells[0].FormattedValue == 'TRUE';
                            },

                            skin: (r, x) => {
                                return r.Cells[0].FormattedValue == 'TRUE' ? 'rochemain' : 'rochemain_disabled';
                            }
                        }
                }
            }
    },

    rocheBPSPMainApplicationInit2: {
        initCondition: (db) => {
            return db.systemValueGlobalStartingPlanYear ? true : false;
        },
        initDefault: (db) => {
            return '';
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => `
                   {
                    "MDX" : "SELECT 
                            {[zSYS Analogic UI User Data Measure].[zSYS Analogic UI User Data Measure].[sValue]} 
                              ON COLUMNS , 
                               {[zSYS Analogic UI Widget].[zSYS Analogic UI Widget].[rocheBPSPProductsYearSegmentedControl]} 
                              ON ROWS 
                            FROM [zSYS Analogic UI User Data] 
                            WHERE 
                              (
                               [}Clients].[}Clients].[${db.activeUser}]
                              ) 
                    "}`,
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            value: (r, x) => {
                                Widgets['systemValueGlobalSegmentedControlCellsetId'] = r.ID;
                                Widgets['systemValueGlobalSegmentedControlRelativeYear'] = r.Cells[0].FormattedValue;//Y0, Y1, Y2, Y3
                                if (Widgets['systemValueGlobalSegmentedControlRelativeYear'] === null || Widgets['systemValueGlobalSegmentedControlRelativeYear'] === '') {
                                    Widgets['systemValueGlobalSegmentedControlRelativeYear'] = 'Y0';
                                }
                                let l = parseInt(Widgets['systemValueGlobalSegmentedControlRelativeYear'].replace('Y', ''));
                                Widgets['systemValueGlobalSegmentedControlRelativeYearValue'] = parseInt(Widgets['systemValueGlobalStartingPlanYear']) + l;
                                return true;
                            }
                        }
                }
            }

    },

    rocheBPSPMainSubmissionToBPXPPopupYes: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },

        init: {
            execute: (db) => {
                return {
                    enabled: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'flag') === 1 ? true : false,
                    skin: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'flag') === 1 ? 'blue_bg_bpsp' : 'grey_bg_bpsp'
                };
            }
        },

        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - BPSP - Submission')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')}"}
                        ]
                    }`
        }
    },

    rocheBPSPMainGreyGridTable: {
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => `{"MDX":"
			SELECT 
			{[Value Type].[Value Type].[String]} 
			ON COLUMNS , 
			{[Measures Control].[Measures Control].[BPSP NextGen system message Title],
			[Measures Control].[Measures Control].[BPSP NextGen system message User],
			[Measures Control].[Measures Control].[BPSP NextGen system message DateTime],
			[Measures Control].[Measures Control].[BPSP NextGen system message]}
			ON ROWS  FROM [Control] 
            "}`,
            parsingControl: {
                type: 'matrix',
                length: 4,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue + '<br/><div style=\"font-size:10px; float: left;margin-right: 1%;margin-top: 0.5%;";  >' + r.Cells[x + 1].FormattedValue + '</div>' + '<div style=\"font-size:10px;color:#B1B3B3;margin-top: 0.5%;\" >' + r.Cells[x + 2].FormattedValue + '</div>',
                            body: r.Cells[x + 3].FormattedValue
                        }
                    }]
            }
        }
    },

    rocheBPSPMainBlueGridTable: {
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption,Attributes/Memberdescription))`,
            type: 'POST',
            body: (db) => `{"MDX":"
                        SELECT 
                           {[Measures Company Information].[Measures Company Information].[Start page message Title],
                            [Measures Company Information].[Measures Company Information].[Start page message],
                            [Measures Company Information].[Measures Company Information].[Start page message DateTime],
                            [Measures Company Information].[Measures Company Information].[Start page message User]} 
                          PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON COLUMNS , 
                          NON EMPTY 
                        {TM1SubsetToSet([Companies].[Companies], 'All Active')} 
                          PROPERTIES [Companies].[Companies].[Member description]  ON ROWS 
                        FROM [Company Information] 
                        WHERE 
                          (
                           [Versions].[Versions].[Live]
                          )

            "}`,
            parsingControl: {
                type: 'matrix',
                length: 4,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue + '<br/><div style=\"font-size:10px; float: left;margin-right: 1%;margin-top:0.5%;";  >' + r.Cells[x + 2].FormattedValue + '</div>' + '<div style=\"font-size:10px;color:#408CD9;;margin-top:0.5%;\" >' + r.Cells[x + 3].FormattedValue + '</div>',
                            body: r.Cells[x + 1].FormattedValue
                        }
                    }]
            }
        }
    },

    rocheBPSPMainGridRow3Cell2Button: {
        launch:
            {
                execute: (db) => {
                    Utils.setWidgetValue('systemValueLineitem', 'Final Sales Plan');
                }
            }
    },

    rocheBPSPProductsCheckoutPopupFocusButton: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueFocusedProduct'] = Utils.getGridTableCell(Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly', 1).title;
                }
            },
    },

    rocheBPSPProductsLockedPlanningPopupFocusButton: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueFocusedProduct'] = Utils.getGridTableCell(Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly', 1).title;
                }
            },
    },

    rocheBPSPProductsNoCheckoutPopupFocusButton: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueFocusedProduct'] = Utils.getGridTableCell(Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly', 1).title;
                }
            }
    },

    rocheBPSPProductsCheckoutPopupCheckoutButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Products GridTable Checkout by User')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pUserID", "Value": "${db.activeUserName}"},
                                {"Name": "pProduct", "Value": "${Utils.setAndGetGridTableSystemValueByCurrentRow(Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly', 1, 'systemValueCheckoutProduct', 'title')}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${v('rocheBPSPProductsReceiverSelector.value')}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"}
                        ]
                    }`
            },
    },

    rocheBPSPProductsCompanySelector: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key'));
                Utils.setWidgetValue('systemValueProductPlanYearsCount', Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'planYears'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                WITH 
                    MEMBER [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Planning Locked] AS
                        [Company Information].([Versions].[Versions].[Live],[Measures Company Information].[Measures Company Information].[Lock Planning])
                    MEMBER [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Plan Years] AS
                        [Company Information].([Versions].[Versions].[Live],[Measures Company Information].[Measures Company Information].[Plan Years Product])
                SELECT
                {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name]
                ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]
                ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Planning Locked]
                ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Plan Years]}
            ON COLUMNS ,
                {TM1SubsetToSet([Companies].[Companies], 'All Active')}
            ON ROWS
            FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = '';
                            if (!v('systemValueGlobalSelectedCompany')) {
                                Utils.setWidgetValue('systemValueGlobalSelectedCompany', r.Cells[1].FormattedValue);
                            }
                            ;
                            selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 4) {
                                if (selected === r.Cells[i + 1].FormattedValue) {
                                    Utils.setWidgetValue('systemValueProductPlanYearsCount', r.Cells[i + 3].FormattedValue);
                                }
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    locked: r.Cells[i + 2].FormattedValue,
                                    planYears: r.Cells[i + 3].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }

        }
    },

    rocheBPSPProductsReceiverSelector: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPProductsCompanySelector');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT 
                        {[}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Member description],
                        [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Receiver - Key]} 
                     ON COLUMNS , 
                        {Tm1SubsetToset([Receivers].[Receivers],'zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')} Plan Receivers')}
                     ON ROWS
                    FROM [}ElementAttributes_Receivers] 

            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('rocheBPSPProductsReceiverSelector.value');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },

    rocheBPSPProductsPageInit: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPProductsCompanySelector');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT 
                        {[Versions].[Versions].[Live]} 
                    PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                    NON EMPTY 
                        {[Measures Company Information].[Measures Company Information].[Products Hierarchy]} 
                        PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON ROWS 
                    FROM [Company Information] 
                WHERE 
                (
                    [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}]
                )
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            Utils.setWidgetValue('systemValueGlobalCompanyProductPlanVersion', r.Cells[0].FormattedValue);
                            Utils.setWidgetValueIfNotExist('systemValueSegmentedControlPeriodUnit', 'Yearly');
                            Utils.setWidgetValueIfNotExist('systemValueCompareBy', 'None');
                            Utils.setWidgetValueIfNotExist('systemValueProductsCheckotSplitIcons', {
                                M: 'icon-distribution-manual',
                                P: 'icon-distribution-variable',
                                E: 'icon-distribution-equal',
                                MP: 'icon-distribution-date'
                            });
//                            Utils.setWidgetValue('systemValueProductPlanYearsCount', Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'planYears'));
                            return true;
                        }
                    }
            }
        }
    },

    rocheBPSPProductsYearSegmentedControl: {
        init: {
            execute: (db) => {
                let s = parseInt(Widgets['systemValueGlobalStartingPlanYear']),
                    sr = Widgets['systemValueGlobalSegmentedControlRelativeYear'],
                    sc = parseInt(Widgets['systemValueProductPlanYearsCount']),
                    sm = s + sc;
                return [
                    {label: s, selected: 'Y0' === sr, visible: sm > s},
                    {label: ++s, selected: 'Y1' === sr, visible: sm > s},
                    {label: ++s, selected: 'Y2' === sr, visible: sm > s},
                    {label: ++s, selected: 'Y3' === sr, visible: sm > s},
                ];
            }
        },
        switch: {
            url: (db) => `/api/v1/Cellsets('${Widgets.systemValueGlobalSegmentedControlCellsetId}')/Cells`,
            type: 'PATCH',
            body: (db) => {
                Widgets['systemValueGlobalSegmentedControlRelativeYear'] = v('rocheBPSPProductsYearSegmentedControl.value');
                Widgets['systemValueGlobalSegmentedControlRelativeYearValue'] = v('rocheBPSPProductsYearSegmentedControl.selected');
                return `{"Ordinal": 0,"Value": \"${db.systemValueGlobalSegmentedControlRelativeYear}\"}`
            }
        }
    },

    rocheBPSPProductsPeriodUnitSegmentedControl: {
        init: {
            execute: (db) => {
                let e = db.systemValueSegmentedControlPeriodUnit;
                return e ? [{label: 'Yearly', selected: e === 'Yearly'}, {
                    label: 'Monthly',
                    selected: e === 'Monthly'
                }] : false;
            }
        },
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueSegmentedControlPeriodUnit', v('rocheBPSPProductsPeriodUnitSegmentedControl.selected'));
            }
        }
    },

    rocheBPSPProductsGridTableYearlyHeaderFocusButton: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueFocusedProduct === db.systemValueFocusedProductDefault && !Repository.rocheBPSPProductsGridTableYearly.isCompareByRowMode()};
            }
        }
    },

    rocheBPSPProductsGridTableYearlyHeaderReturnFromFocus: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueFocusedProduct !== db.systemValueFocusedProductDefault && !Repository.rocheBPSPProductsGridTableYearly.isCompareByRowMode()};
            }
        },
        launch: {
            execute: (db) => {
                Widgets['systemValueFocusedProduct'] = db.systemValueFocusedProductDefault;
            }
        }
    },

    rocheBPSPProductsGridTableMonthlyHeaderFocusButton: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueFocusedProduct === db.systemValueFocusedProductDefault};
            }
        }
    },

    rocheBPSPProductsGridTableMonthlyHeaderReturnFromFocus: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueFocusedProduct !== db.systemValueFocusedProductDefault};
            }
        }, launch: {
            execute: (db) => {
                Widgets['systemValueFocusedProduct'] = db.systemValueFocusedProductDefault;
            }
        }
    },

    rocheBPSPProductsProductSelectorShortcutPopupGridTable: {
        initCondition: (db) => {
            return Repository.rocheBPSPProducts.initConditionDependingOnYearlyMonthly(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly';
                return v(g + '.cellData').filter(e => ['01C', '02C', '03C', '01N', '02N', '03C'].includes(e[0].uiLevel)).map(e => {
                    return [{
                        label: e[0].label,
                        skin: 'gridtable_hierarchy_shortcut_bpsp_' + e[0].uiLevel,
                        productCode: e[1].title
                    }];
                });
            }
        }
    },

    rocheBPSPProductsProductSelectorShortcutPopupGridTableButton01: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueFocusedProduct'] = Utils.getGridTableCell('rocheBPSPProductsProductSelectorShortcutPopupGridTable', 0).productCode;
                }
            },
    },

    rocheBPSPProductsCheckoutWarningContactEditorButton: {
        initCondition: (db) => {
            return Repository.rocheBPSPProducts.initConditionDependingOnYearlyMonthly(db);
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => {
                let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly',
                    c = Utils.getGridTableCell(g, 0), u = c.checkoutUser;
                u = db.activeUserName.split('/')[0] + '/' + u;
                return `
                      {"MDX":
                        "SELECT
                           {[}ElementAttributes_}Clients].[}ElementAttributes_}Clients].[Email]}
                          ON COLUMNS,
                           {[}Clients].[}Clients].[${u}]}
                          ON ROWS
                        FROM [}ElementAttributes_}Clients]"}
                    `;
            },
            parsingControl: {
                type: 'object',
                query:
                    {
                        url: (r, x) => {
                            return 'mailto:' + r.Cells[0].FormattedValue;
                        }
                    }
            }
        }
    },
    rocheBPSPProductsCheckoutWarningByUserText: {
        initCondition: (db) => {
            return Repository.rocheBPSPProducts.initConditionDependingOnYearlyMonthly(db);
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db) => {
                let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly',
                    c = Utils.getGridTableCell(g, 0), u = c.checkoutUser, d = c.checkedOutAt;
                return {title: `by<b>${u}</b>since<b>${d}</b>`};
            }
        }
    },
    'rocheBPSPProductsGridTableYearlyHeaderText-04': {
        initCondition: (db) => {
            return Repository.rocheBPSPProducts.initCondition();
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db) => {
                return Repository.rocheBPSPProducts.executeForTextFirstCol(3);
            }
        }
    },
    'rocheBPSPProductsGridTableYearlyHeaderCell-05': {
        initCondition: () => {
            return Repository.rocheBPSPProducts.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPProducts.executeForCell(index - 1);
            }
        }
    },
    'rocheBPSPProductsGridTableYearlyHeaderText-05': {
        initCondition: () => {
            return Repository.rocheBPSPProducts.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPProducts.executeForText(index - 1);
            }
        }
    },
    'rocheBPSPProductsGridTableYearlyHeaderCell-06': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderCell-05'
    },
    'rocheBPSPProductsGridTableYearlyHeaderText-06': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderText-05'
    },
    'rocheBPSPProductsGridTableYearlyHeaderCell-07': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderCell-05'
    },
    'rocheBPSPProductsGridTableYearlyHeaderText-07': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderText-05'
    },
    'rocheBPSPProductsGridTableYearlyHeaderCell-08': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderCell-05'
    },
    'rocheBPSPProductsGridTableYearlyHeaderText-08': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsGridTableYearlyHeaderCell-09': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderCell-05'
    },

    'rocheBPSPProductsGridTableYearlyHeaderText-09': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsGridTableYearlyHeaderCell-10': {
        initCondition: () => {
            return Repository.rocheBPSPProducts.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPProducts.executeForCellWidth(index - 1);
            }
        }
    },

    'rocheBPSPProductsGridTableYearlyHeaderText-10': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsGridTableYearlyHeaderCell-11': {
        initCondition: () => {
            return Repository.rocheBPSPProducts.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPProducts.executeForCellWidth(index - 1);
            }
        }
    },

    'rocheBPSPProductsGridTableYearlyHeaderText-11': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsGridTableYearlyHeaderCell-12': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderCell-05'
    },

    'rocheBPSPProductsGridTableYearlyHeaderText-12': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsGridTableYearlyHeaderCell-13': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderCell-05'
    },

    'rocheBPSPProductsGridTableYearlyHeaderText-13': {
        reference: 'rocheBPSPProductsGridTableYearlyHeaderText-05'
    },

    rocheBPSPProductsGridTableYearlyHeaderText13: {
        initCondition: (db) => {
            return Repository.rocheBPSPProducts.initCondition();
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db) => {
                return Repository.rocheBPSPProducts.executeForText(12);
            }
        }
    },

    rocheBPSPProductsInfoPopupText2: {
        initCondition: (db) => {
            return v('rocheBPSPProductsCompanySelector.value.length') !== false;
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
              {"MDX":
                "SELECT 
                    {[Versions].[Versions].[Live]} 
                    PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                    {[Measures Company Information].[Measures Company Information].[Current Planning Event]} 
                    PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON ROWS 
                FROM [Company Information] 
                WHERE 
                  (
                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}]
                  )"}
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        title: (r, x) => {
                            return '<li>' + r.Cells[0].FormattedValue + '</li>';
                        }
                    }
            }
        }
    },

    rocheBPSPProductsInfoPopupText1: {
        initCondition: (db) => {
            return v('rocheBPSPProductsCompanySelector.value.length') !== false;
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                    {"MDX":
                    "SELECT 
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Currency - Key]} 
                    ON COLUMNS , 
                        {[Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}]} 
                    ON ROWS 
                    FROM [}ElementAttributes_Companies] "}
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        title: (r, x) => {
                            return '<li>' + r.Cells[0].FormattedValue + '</li>';
                        }
                    }
            }
        }
    },

    rocheBPSPProductsCheckoutInfoPopupText1: {
        reference: 'rocheBPSPProductsInfoPopupText1'
    },
    rocheBPSPProductsCheckoutInfoPopupText2: {
        reference: 'rocheBPSPProductsInfoPopupText2'
    },
    rocheBPSPProductsGridRow3Cell2: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueSegmentedControlPeriodUnit === 'Monthly' ? false : true};
            }
        }
    },
    rocheBPSPProductsTypeSegmentedControlInfoText: {
        initCondition: (db) => {
            return db.systemValueSegmentedControlPeriodUnit === 'Monthly' && v('systemValueCheckoutProduct');
        },
        initDefault: (db) => {
            return {visible: false};
        },
        init: {
            execute: (db) => {
                return {
                    visible: db.systemValueSegmentedControlPeriodUnit === 'Monthly' && v('systemValueProductsTypeSegmentedControlVisibleType') !== false,
                    title: v('systemValueProductsTypeSegmentedControlVisibleType')
                };
            }
        }
    },
    rocheBPSPProductsTypeSegmentedControl: {
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('selectedProductsTypeSegmentedControl', v('rocheBPSPProductsTypeSegmentedControl.selected'));
            }
        },
        initCondition: (db) => {
            return db.systemValueSegmentedControlPeriodUnit === 'Monthly';
        },
        initDefault: (db) => {
            return {visible: false};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key');
                return `{"MDX":"
                  WITH MEMBER [}Groups].[}Groups].[Marketing Flag]
                  AS IIF([}Groups].[}Groups].[${company} SalesMarketing] <> '' OR [}Groups].[}Groups].[ADMIN] <> '' OR [}Groups].[}Groups].[Support 1L] <> '' ,'Write','')
                    MEMBER [}Groups].[}Groups].[Finance Flag]
                    AS IIF([}Groups].[}Groups].[${company} SalesFinance] <> '' OR [}Groups].[}Groups].[ADMIN] <> '' OR [}Groups].[}Groups].[Support 1L] <> '' ,'Write','')
                  SELECT 
                    {[}Groups].[}Groups].[Marketing Flag],[}Groups].[}Groups].[Finance Flag]} 
                  ON COLUMNS , 
                    {[}Clients].[}Clients].[${db.activeUser}]} 
                    PROPERTIES [}Clients].[}Clients].[}TM1_DefaultDisplayValue]  ON ROWS 
                    FROM [}ClientGroups] 
                  "}`;
            },
            parsingControl: {
                type: 'object',
                query:
                    {
                        visible: (r, x) => {
                            let checkoutProduct = v('systemValueCheckoutProduct'),
                                marketingAdjustmentVisible = r.Cells[0].FormattedValue !== '' || !checkoutProduct,
                                finalSalesPlanVisible = r.Cells[1].FormattedValue !== '' || !checkoutProduct,
                                visible = (finalSalesPlanVisible && marketingAdjustmentVisible) || !checkoutProduct,
                                visibleType = '';

                            if (marketingAdjustmentVisible && !finalSalesPlanVisible) {
                                visibleType = 'Marketing Adjustment';
                            }

                            if (!marketingAdjustmentVisible && finalSalesPlanVisible) {
                                visibleType = 'Final Sales Plan';
                            }

                            if (!marketingAdjustmentVisible && !finalSalesPlanVisible) {
                                visibleType = 'Access denied';
                            }
                            Utils.setWidgetValue('systemValueProductsTypeSegmentedControlVisibleType', visibleType);
                            Utils.setWidgetValue('systemValueProductsTypeIsOk', visibleType !== 'Access denied');
                            return v('systemValueSegmentedControlPeriodUnit') === 'Monthly' && visible;
                        },
                        data: (r, x) => {
                            let vv = v('systemValueProductsTypeSegmentedControlVisibleType'),
                                selected = vv === false ? v('selectedProductsTypeSegmentedControl') !== false ? v('selectedProductsTypeSegmentedControl') : 'Final Sales Plan' : vv;
                            return [
                                {
                                    selected: 'Final Sales Plan' === selected,
                                    label: 'Final Sales Plan',
                                    value: 'Final Sales Plan'
                                },
                                {
                                    selected: 'Marketing Adjustment' === selected,
                                    label: 'Marketing Adjustment',
                                    value: 'Marketing Adjustment'
                                }
                            ];
                        }
                    }
            }
        }
    },
    rocheBPSPProducts: {
        getProductsTypeSegmentedControlValue: (db) => {
            let vv = v('systemValueProductsTypeSegmentedControlVisibleType');
            if (vv !== false) {
                return vv;
            }
            return v('rocheBPSPProductsTypeSegmentedControl.selected');
        },
        initConditionDependingOnYearlyMonthly: (db) => {
            let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly',
                l = v(g + '.cellData.length');
            return l !== false && l !== 0;
        },
        initConditionDependingOnCheckoutYearlyMonthly: (db) => {
            let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsCheckoutGridTableYearly' : 'rocheBPSPProductsCheckoutGridTableMonthly',
                l = v(g + '.cellData.length');
            return l !== false && l !== 0;
        },
        initCondition: () => {
            let l = v('rocheBPSPProductsGridTableYearly.cellData.length');
            return l !== false && l !== 0;
        },
        executeForTextFirstCol: (columnIndex, gridTableId = 'rocheBPSPProductsGridTableYearly') => {
            let cell = v(gridTableId + '.cellData')[0][columnIndex];
            if (Repository[gridTableId].isCompareByRowMode()) {
                return {title: cell.members[6].Name, body: 'Actual'};
            }
            if (Repository[gridTableId].isCompareByColumnMode()) {
                return {title: cell.members[5].Name, body: v('rocheBPSPProductsGridVersionSelector.value')};
            }
            return {title: cell.members[5].Name, body: cell.members[6].Attributes.Caption};
        },
        executeForText: (columnIndex,
                         gridTableId = 'rocheBPSPProductsGridTableYearly',
                         versionSelectorId = 'rocheBPSPProductsGridVersionSelector',
                         versionSelectorId2 = 'rocheBPSPProductsGridVersionSelectorTwo') => {
            let cells = v(gridTableId + '.cellData'), cell = cells[0][columnIndex],
                previousCell = cells[0][columnIndex - 1];
            if (!cell.members) {
                return {
                    title: '',
                    body: ''
                };
            }
            if (Repository[gridTableId].isCompareByRowMode()) {
                return {
                    title: !previousCell.members || cell.members[6].Name === previousCell.members[6].Name ? '' : cell.members[6].Name,
                    body: cell.members[5].Attributes.Caption,
                    skin: 'products_gd_header_compareByRow_bpsp'
                };
            }
            if (Repository[gridTableId].isCompareByColumnMode()) {
                return {
                    title: !previousCell.members || cell.members[5].Name === previousCell.members[5].Name ? '' : cell.members[5].Name,
                    body: columnIndex % 2 === 0 ? v(versionSelectorId2 + '.value') : v(versionSelectorId + '.value')
                };
            }
            return {
                title: !previousCell.members || cell.members[5].Name === previousCell.members[5].Name ? '' : cell.members[5].Name,
                body: cell.members[6].Attributes.Caption
            };
        },
        executeForCell: (columnIndex, gridTableId = 'rocheBPSPProductsGridTableYearly') => {
            let cells = v(gridTableId + '.cellData'), cell = cells[0][columnIndex],
                previousCell = cells[0][columnIndex - 1],
                membersIndex = Repository[gridTableId].isCompareByRowMode() ? 6 : 5;
            if (!cell.members || !previousCell.members) {
                return '';
            }
            return {
                cellHeaderSkin: cell.members[membersIndex].Name === previousCell.members[membersIndex].Name ? '' : 'long_border_bpsp'
            };
        },
        executeForCellWidth: (columnIndex, gridTableId = 'rocheBPSPProductsGridTableYearly') => {
            let cells = v(gridTableId + '.cellData'), cell = cells[0][columnIndex],
                previousCell = cells[0][columnIndex - 1],
                membersIndex = Repository[gridTableId].isCompareByRowMode() ? 6 : 5;
            if (!cell.members || !previousCell.members) {
                return '';
            }
            return {
                cellHeaderSkin: cell.members[membersIndex].Name === previousCell.members[membersIndex].Name ? '' : 'long_border_bpsp',
                width: Repository[gridTableId].isCompareByRowMode() ? '5%' : '7.5%'
            };
        },

    },
    rocheBPSPProductsGridRow3Cell6: {
        init: {
            execute: (db) => {
                return {width: Repository.rocheBPSPProductsGridTableYearly.isCompareByRowMode() ? '26%' : '14%'};
            }
        }
    },
    rocheBPSPProductsGridTableYearly: {
        initCondition: (db) => {
            let l = v('rocheBPSPProductsReceiverSelector.value.length') !== false
                && v('rocheBPSPProductsGridVersionSelector.value.length') !== false
                && v('systemValueSegmentedControlPeriodUnit') === 'Yearly'
                && v('systemValueBackFromCheckin') === false;
            Utils.setWidgetValue('systemValueBackFromCheckin', false);
            return l;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Updateable,RuleDerived,Consolidated;$expand=Members($select=Name, Attributes/Caption, Attributes/CalendarWeeks, Attributes/SalesChannel, Attributes/ClientName, Attributes/Location, Attributes/Editable, Attributes/Dummy))`,
            type: 'POST',
            body: (db, widgetId, object) => {
                if (object.isCompareByColumnMode()) {
                    return object.getCompareByColumnMDX(object, db);
                }
                if (object.isCompareByRowMode()) {
                    return object.getCompareByRowMDX(object, db)
                }
                return object.getNormalMDX(object, db);
            },
            parsingControl: (db, widgetId, object) => {
                if (object.isCompareByColumnMode()) {
                    return object.getParsingControlCompareByColumn(object);
                }
                if (object.isCompareByRowMode()) {
                    return object.getParsingControlCompareByRow(object);
                }
                return object.parsingControlNormalMode;
            }
        },
        parsingControlNormalMode: {
            type: 'matrix',
            length: 18,
            query: [
                (r, x) => {
                    let result, pl, checkoutUser = r.Cells[x + 4].FormattedValue,
                        uiLevel = r.Cells[x + 6].FormattedValue;
                    Widgets['systemValueRocheBPSPProductsGridTableYearlyIsMainLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 1;
                    Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 2 || Widgets['systemValueRocheBPSPProductsGridTableYearlyIsMainLocked'];
                    Widgets['systemValueRocheBPSPProductsGridTableYearIsChildrenLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 3;
                    Widgets['systemValueProductsYearlyRelativeIndex'] = x;
                    pl = r.Cells[x + 2].FormattedValue.replace('a', '');
                    result = {
                        label: r.Cells[x].FormattedValue,
                        skin: 'gridtable_hierarchy_bpsp_' + uiLevel + (Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'] ? '_locked' : ''),
                        cellSkin: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'] ? 'locked' : '',
                        cellVisible: true,
                        icon: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsMainLocked'] ? 'icon-lock' : 'icon-badge',
                        isMainLocked: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsMainLocked'],
                        isLockedByMe: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'] && Widgets.activeUserName.indexOf(checkoutUser) !== -1,
                        isLocked: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'],
                        isChildrenLocked: Widgets['systemValueRocheBPSPProductsGridTableYearIsChildrenLocked'],
                        isPlanningLocked: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'locked') === '1,00',
                        checkoutUser: checkoutUser,
                        checkedOutAt: r.Cells[x + 5].FormattedValue,
                        members: r.Cells[x].Members,
                        productLevel: pl,
                        uiLevel: uiLevel,
                        //   hasComment: r.Cells[x + 17].FormattedValue !== ''
                    };
                    if (Widgets['systemValueRocheBPSPProductsGridTableYearlyIsMainLocked']) {
                        result['iconColor'] = '#D12D4A';
                    }
                    return result;
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                        productCode: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                        cellSkin: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'] ? 'locked' : '',
                        cellVisible: true,
                        members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue.replace('PL', ''),
                        cellSkin: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'] ? 'locked' : '',
                        cellVisible: true,
                        members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    return Repository.rocheBPSPProductsGridTableYearly.getBaseCell(r, 5);
                },
                (r, x) => {
                    return Repository.rocheBPSPProductsGridTableYearly.getBaseCell(r, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPProductsGridTableYearly.getBaseCell(r, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPProductsGridTableYearly.getBaseCell(r, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPProductsGridTableYearly.getBaseCell(r, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPProductsGridTableYearly.getBaseCell(r, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPProductsGridTableYearly.getBaseCellWidth(r, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPProductsGridTableYearly.getBaseCellWidth(r, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPProductsGridTableYearly.getBaseCell(r, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPProductsGridTableYearly.getBaseCell(r, 1);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    let cellValue = r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue;
                    return {
                        cellSkin: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'] ? 'locked' : '',
                        icon: cellValue === '' ? 'icon-comment-off' : 'icon-comment-on',
                        iconColor: cellValue === '' ? '#C5C6C6' : '#0066cc',
                        members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members,
                        hasComment: cellValue !== ''
                    };
                },
                (r, x) => {
                    return {
                        cellSkin: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'] ? 'locked' : '',
                    };
                }
            ]
        },
        getParsingControlCompareByColumn(object) {
            let query = object.parsingControlNormalMode.query.slice(0, 9);
            query[3] = (r, x) => {
                return object.getBaseCell(r, 5, 'locked', 'readonly_blue_bpsp');
            };
            query[5] = (r, x) => {
                return object.getBaseCell(r, 1, 'locked', 'readonly_blue_bpsp');
            };
            query[7] = (r, x) => {
                return object.getBaseCell(r, 1, 'locked', 'readonly_blue_bpsp');
            };
            query[9] = (r, x) => {
                return object.getBaseCellWidth(r, 1, 'locked', 'readonly_blue_bpsp');
            };
            query[10] = (r, x) => {
                return object.getBaseCellWidth(r, 1, 'locked', 'readonly_bpsp');
            };

            let l = 4, i;
            for (i = 0; i < l; ++i) {
                query.push((r, x) => {
                    return {cellVisible: false};
                });
            }
            return {
                type: 'matrix',
                length: 15,
                query: query
            };
        },
        getParsingControlCompareByRow(object) {
            let query = object.parsingControlNormalMode.query.slice(0, 10);
            query[0] = (r, x) => {
                let result, pl, checkoutUser = r.Cells[x + 5].FormattedValue,
                    uiLevel = r.Cells[x + 7].FormattedValue,
                    colOffset = r.Cells[x + 8].FormattedValue;
                Widgets['systemValueRocheBPSPProductsGridTableYearlyIsMainLocked'] = Utils.parseNumber(r.Cells[x + 4].FormattedValue) === 1;
                Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'] = Utils.parseNumber(r.Cells[x + 4].FormattedValue) === 2 || Widgets['systemValueRocheBPSPProductsGridTableYearlyIsMainLocked'];
                Widgets['systemValueRocheBPSPProductsGridTableYearIsChildrenLocked'] = Utils.parseNumber(r.Cells[x + 4].FormattedValue) === 3;
                Widgets['systemValueRocheBPSPProductsGridTableYearlySelected'] = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsGridVersionSelector', 'key') === r.Cells[x].FormattedValue;
                Widgets['systemValueProductsYearlyRelativeIndex'] = x;
                Widgets['systemValueProductsCompareColumnOffset'] = colOffset;
                pl = r.Cells[x + 3].FormattedValue.replace('a', '');
                result = {
                    label: r.Cells[x + 1].FormattedValue,
                    skin: 'gridtable_hierarchy_bpsp_' + uiLevel,
                    cellSkin: Widgets['systemValueRocheBPSPProductsGridTableYearlySelected'] ? 'selected' : '',
                    cellVisible: true,
                    icon: x > 0 ? 'icon-rectangle-stack' : 'icon-badge',
                    isMainLocked: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsMainLocked'],
                    isLockedByMe: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'] && Widgets.activeUserName.indexOf(checkoutUser) !== -1,
                    isLocked: Widgets['systemValueRocheBPSPProductsGridTableYearlyIsLocked'],
                    isChildrenLocked: Widgets['systemValueRocheBPSPProductsGridTableYearIsChildrenLocked'],
                    isPlanningLocked: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'locked') === '1,00',
                    noPopup: true,
                    checkoutUser: checkoutUser,
                    checkedOutAt: r.Cells[x + 6].FormattedValue,
                    members: r.Cells[x].Members,
                    productLevel: pl,
                    uiLevel: uiLevel
                };
                return result;
            };
            query[1] = (r, x) => {
                Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 2;
                return {
                    title: x > 2 ? '' : r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                    cellSkin: Widgets['systemValueRocheBPSPProductsGridTableYearlySelected'] ? 'selected' : '',
                    cellVisible: true,
                    members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members
                };
            };
            query[2] = (r, x) => {
                Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                return {
                    title: x > 3 ? '' : r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue.replace('PL', ''),
                    cellSkin: Widgets['systemValueRocheBPSPProductsGridTableYearlySelected'] ? 'selected' : '',
                    cellVisible: true,
                    members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members
                };
            };
            query[3] = (r, x) => {
                return object.getBaseCell(r, 6, 'selected', 'readonly_bpsp', 'systemValueRocheBPSPProductsGridTableYearlySelected');
            };
            query[4] = (r, x) => {
                return object.getBaseCell(r, 1, 'selected', 'readonly_bpsp', 'systemValueRocheBPSPProductsGridTableYearlySelected');
            };
            query[5] = (r, x) => {
                let incCols = 1 + parseInt(Widgets['systemValueProductsCompareColumnOffset']);
                return object.getBaseCell(r, incCols, 'selected', 'readonly_bpsp', 'systemValueRocheBPSPProductsGridTableYearlySelected');
            };
            query[6] = (r, x) => {
                return object.getBaseCell(r, 1, 'selected', 'readonly_bpsp', 'systemValueRocheBPSPProductsGridTableYearlySelected');
            };
            query[7] = (r, x) => {
                return object.getBaseCell(r, 1, 'selected', 'readonly_bpsp', 'systemValueRocheBPSPProductsGridTableYearlySelected');
            };
            query[8] = (r, x) => {
                return object.getBaseCell(r, 1, 'selected', 'readonly_bpsp', 'systemValueRocheBPSPProductsGridTableYearlySelected');
            };
            query[9] = (r, x) => {
                let incCols = 5 - parseInt(Widgets['systemValueProductsCompareColumnOffset']);
                return object.getBaseCellShorter(r, incCols, 'selected', 'readonly_bpsp', 'systemValueRocheBPSPProductsGridTableYearlySelected');
            };
            query.push((r, x) => {
                return object.getBaseCellShorter(r, 1, 'selected', 'readonly_bpsp', 'systemValueRocheBPSPProductsGridTableYearlySelected');
            });
            query.push((r, x) => {
                return object.getBaseCell(r, 1, 'selected', 'readonly_bpsp', 'systemValueRocheBPSPProductsGridTableYearlySelected');
            });
            query.push((r, x) => {
                return object.getBaseCell(r, 1, 'selected', 'readonly_bpsp', 'systemValueRocheBPSPProductsGridTableYearlySelected');
            });
            query.push((r, x) => {
                return {cellVisible: false};
            });
            query.push((r, x) => {
                return {cellVisible: false};
            });

            return {
                type: 'matrix',
                length: 23,
                query: query
            };
        },
        getBaseCell(r, inc, lockedSkin = 'locked', readonlySkin = 'readonly_bpsp', cellSkinIndex = 'systemValueRocheBPSPProductsGridTableYearlyIsLocked') {
            Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + inc;
            return {
                title: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                cellSkin: Widgets[cellSkinIndex] ? lockedSkin : readonlySkin,
                cellVisible: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members[6].Name !== 'DUMMY',
                members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members,
                applyMeasuresToSection: true,
                width: '100%'
            };
        },
        getBaseCellShorter(r, inc, lockedSkin = 'locked', readonlySkin = 'readonly_bpsp', cellSkinIndex = 'systemValueRocheBPSPProductsGridTableYearlyIsLocked') {
            Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + inc;
            return {
                title: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                cellSkin: Widgets[cellSkinIndex] ? lockedSkin : readonlySkin,
                cellVisible: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members[6].Name !== 'DUMMY',
                members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members,
                applyMeasuresToSection: true,
                width: '100%',
                cellWidth: '5%'
            };
        },
        getBaseCellWidth(r, inc, lockedSkin = 'locked', readonlySkin = 'readonly_bpsp', cellSkinIndex = 'systemValueRocheBPSPProductsGridTableYearlyIsLocked') {
            Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + inc;
            return {
                title: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                cellSkin: Widgets[cellSkinIndex] ? lockedSkin : readonlySkin,
                cellVisible: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members[6].Name !== 'DUMMY',
                members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members,
                applyMeasuresToSection: true,
                width: '100%',
                cellWidth: '7.5%'
            };
        },
        isCompareByColumnMode() {
            return v('systemValueCompareBy') === 'Column';
        },
        isCompareByRowMode() {
            return v('systemValueCompareBy') === 'Row';
        },
        getNormalMDX(object, db) {
            return `
            {
                "MDX" : 
                    "With 
                                 Set DefaultProductRows AS
                                 {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[PL1]}, ALL, RECURSIVE )}
                                 Set FocusedOnProductRows AS
                                 {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${db.systemValueFocusedProduct}]}, ALL, RECURSIVE )}
                                 MEMBER [Products].[BPSP Budget].[ProductIsFocused] AS 
                                 IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[DUMMY] as 1
                                 Set PaddingColumns AS
                                 {{TM1SubsetToSet([Periods].[Periods],'zUI Padding Years')}*{[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[DUMMY]}}
                                 Set DefaultColumnSelection AS
                                    {HEAD(UNION({StrToSet([Control].([Measures Control].[Measures Control].[UI ProuctsGridTable DefaultColumnsTuple ${db.systemValueGlobalSegmentedControlRelativeYear}],[Value Type].[Value Type].[String]))},{PaddingColumns},All),10)}
                                 Set WidgetSettingByUser AS
                                    {StrToSet('{'+[zSYS Analogic UI User Data].([}Clients].[}Clients].[${db.activeUserName}],[zSYS Analogic UI Widget].[zSYS Analogic UI Widget].[rocheBPSPProductsGridTableYearly],[zSYS Analogic UI User Data Measure].[zSYS Analogic UI User Data Measure].[sColumnSelectorTuple ${db.systemValueGlobalSegmentedControlRelativeYear}])+'}')}
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ColumnSelectionByUser] AS 
                                 IIF(Count(WidgetSettingByUser)>0,'Head(UNION({WidgetSettingByUser},{PaddingColumns},All),10)','{}')
                                 Set ColumnSelectionByUser AS
                                 {StrToSet([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ColumnSelectionByUser])}
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description')
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductCaption] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name')
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} UI Level Format')
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[HasComment] as
                                        [Sales Plan by Product].([Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Comment Flag])
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime] as 
                                        [Sales Plan by Product].([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedDateTime])
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser] as 
                                        [Sales Plan by Product].([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedBy])
                                 Set FixColumns AS
                                 {([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName]),
                                 ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductCaption]),
                                 ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel]),
                                 ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutFlag]),
                                 ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser]),
                                 ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime]),
                                 ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat])}
                                 Set Comment AS
                                 {([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[HasComment])}
                            SELECT 
                              {UNION(HEAD(UNION(UNION({FixColumns},{ColumnSelectionByUser},All),{DefaultColumnSelection},All),17),{Comment},All)}
                              PROPERTIES [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Caption] ,[Periods].[Periods].[Caption]  ON COLUMNS , 
                              {StrToSet([Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused])}
                              PROPERTIES [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption] ON ROWS 
                            FROM [Sales Plan by Product] 
                            WHERE 
                              (
                               [Versions].[Versions].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsGridVersionSelector', 'key')}],
                               [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                               [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                               [Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]
                              )

                        "
            }
       `;

        },
        getCompareByRowMDX(object, db) {
            let baseVersionValue = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsGridVersionSelector', 'key'),
                reportingVersion = v('rocheBPSPProductsValueSegmentedControl.value'),
                calculatedReportingVersion = reportingVersion,
                year = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key');
            if (calculatedReportingVersion === 'PercentVariance') {
                calculatedReportingVersion = 'DELTA PERCENT';
            }
            if (calculatedReportingVersion === 'AbsoluteVariance') {
                calculatedReportingVersion = 'DELTA ABS';
            }
            return `{"MDX":"
                WITH
                -- Comparison query control elements
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ReportType] AS \\"${calculatedReportingVersion}\\"
                -- Standard info columns
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName] AS [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description')
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductNumber] AS [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel] AS [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name')
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionCode] AS [Versions].[Versions].CurrentMember.Name
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionName] AS
                        [Version Information by Company].([Versions].[Versions].CurrentMember,[Companies].[Companies].[${company}],[Measures Version Information by Company].[Measures Version Information by Company].[Name])
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionMonth] AS
                        [Version Information by Company].([Versions].[Versions].CurrentMember,[Companies].[Companies].[${company}],[Measures Version Information by Company].[Measures Version Information by Company].[Actuals Month])
                -- Reuse standard PH based formatting
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat] AS
                        IIF( [Versions].[Versions].CurrentMember.Name = [Versions].[Versions].[${baseVersionValue}].Name, \\"01C\\", \\"02C\\")
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionCaption] AS
                        IIF( [Versions].[Versions].CurrentMember.Name = [Versions].[Versions].[${baseVersionValue}].Name,
                            [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName] + \\" (\\" + [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionName] + \\")\\",
                            [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionName] + \\" (\\" + [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionMonth] + \\")\\")
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[HasComment] AS
                        [Sales Plan by Product].([Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Comment Flag])
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime] AS
                        [Sales Plan by Product].([Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedDateTime])
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser] AS
                        [Sales Plan by Product].([Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],
                        [Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedBy])
                   -- Two new row
                   MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[FirstDataColumn] AS
                    IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${baseVersionValue}], 0, COUNT({CompareColumns}) )
                -- Calcuated measures for variances
                    MEMBER [Measures Sales Plan by Product].[Measures Sales Plan by Product].[AbsoluteVariance] AS
                        ([Versions].[Versions].CurrentMember,[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value])
                        - ([Versions].[Versions].[${baseVersionValue}],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value])
                    MEMBER [Measures Sales Plan by Product].[Measures Sales Plan by Product].[PercentVariance] AS
                        IIF( ([Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value] >-0.5 ) AND ([Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value] <0.5),
                          IIF ( [Measures Sales Plan by Product].[Measures Sales Plan by Product].[AbsoluteVariance] <> 0, -1, 0), 
                          [Measures Sales Plan by Product].[Measures Sales Plan by Product].[AbsoluteVariance]/[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value] )
                        , FORMAT_STRING='#0.00%'
                -- Final aggregation of values for reporting view. NEW
                 MEMBER [Measures Sales Plan by Product].[Measures Sales Plan by Product].[ReportingMeasure] AS
                    IIF([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ReportType] = \\"DELTA ABS\\",
                     \\"[Measures Sales Plan by Product].[Measures Sales Plan by Product].[AbsoluteVariance]\\",
                IIF([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ReportType] = \\"DELTA PERCENT\\",
                 \\"[Measures Sales Plan by Product].[Measures Sales Plan by Product].[PercentVariance]\\",
                \\"[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]\\"))                
                                
                -- Required sets of versions
                    SET ReportVersions AS
                        {EXCEPT( {FILTER(
                            {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                            , [Version Information by Company].([Companies].[Companies].[${company}],[Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                            , {[Versions].[Versions].[${baseVersionValue}]} )}
                -- Define required data tuples
                    SET FixColumns AS
                        {
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionCode],[Periods].[Periods].[${year}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionCaption],[Periods].[Periods].[${year}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductNumber],[Periods].[Periods].[${year}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel],[Periods].[Periods].[${year}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutFlag],[Periods].[Periods].[${year}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser],[Periods].[Periods].[${year}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime],[Periods].[Periods].[${year}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat],[Periods].[Periods].[${year}]),
                                ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[FirstDataColumn],[Periods].[Periods].[${year}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[BW Invoice],[Periods].[Periods].[${year - 1}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[BW Invoice YTD],[Periods].[Periods].[${year}])
                        }
                    SET CompareColumns AS
                        {
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Periods].[Periods].[${year}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Periods].[Periods].[${year + 1}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Periods].[Periods].[${year + 2}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Periods].[Periods].[${year + 3}])
                        }
                        SET GrowthColumns AS
                        {
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Growth Final Sales Plan],[Periods].[Periods].[${year}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Growth Final Sales Plan],[Periods].[Periods].[${year + 1}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Growth Final Sales Plan],[Periods].[Periods].[${year + 2}]),
                        ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Growth Final Sales Plan],[Periods].[Periods].[${year + 3}])
                        }
                    SET Comment AS
                        {
                        ([Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[HasComment],[Periods].[Periods].[${year}])
                        }
                SELECT
                    {UNION( {UNION( {UNION( {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]} * {FixColumns}, 
                        {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]} * {CompareColumns} , All )}, 
                            {STRTOMEMBER([Measures Sales Plan by Product].[Measures Sales Plan by Product].[ReportingMeasure]) }  * {CompareColumns} , All )}, 
                                {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]} * {GrowthColumns} , All )}
                        PROPERTIES [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Caption] ,[Periods].[Periods].[Caption], [Versions].[Versions].[Caption]
                        ON COLUMNS ,
                            {[Versions].[Versions].[${baseVersionValue}], {ReportVersions}}
                        PROPERTIES [Versions].[Versions].[Caption] ON ROWS
                FROM [Sales Plan by Product]
                WHERE
                    (
                    [Companies].[Companies].[${company}],
                    [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                    [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${v('systemValueCompareByRowSelectedProductCode')}]
                    )
            "}`;
        },
        getCompareByColumnMDX(object, db) {
            let baseVersionValue = v('systemValueGlobalVersionKey'),
                compareVersionValue = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsGridVersionSelectorTwo', 'key'),
                lineItem = v('rocheBPSPProductsGridLineItemSelector.value'),
                reportingVersion = v('rocheBPSPProductsValueSegmentedControl.value'),
                calculatedReportingVersion = reportingVersion === 'VALUE' ? compareVersionValue : reportingVersion,
                year = Utils.parseNumber(db.systemValueGlobalStartingPlanYear);
            return `{"MDX":"             
                   WITH
                    Set DefaultProductRows AS
                     {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[PL1]}, ALL, RECURSIVE )}
                     Set FocusedOnProductRows AS
                     {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${db.systemValueFocusedProduct}]}, ALL, RECURSIVE )}
                    MEMBER [Products].[BPSP Budget].[ProductIsFocused] AS
                        IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[DUMMY] as 1
                     MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName] as 
                     [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description')
                     MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductCaption] 
                     as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
                     MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel] 
                     as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name')
                     MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat] 
                     as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} UI Level Format')
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[HasComment] AS
                        [Sales Plan by Product].([Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Comment Flag])
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime] AS
                        [Sales Plan by Product].([Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedDateTime])
                    MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser] AS
                        [Sales Plan by Product].([Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedBy])
                    MEMBER [Versions].[Versions].[AbsoluteVariance] AS
                        ([Versions].[Versions].[${compareVersionValue}] - [Versions].[Versions].[${baseVersionValue}])
                    MEMBER [Versions].[Versions].[PercentVariance] AS
                        ([Versions].[Versions].[${compareVersionValue}] - [Versions].[Versions].[${baseVersionValue}] )/[Versions].[Versions].[${baseVersionValue}]
                        , FORMAT_STRING='#0.00%'
                    Set FixColumns AS
                        {
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName]),
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductCaption]),
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel]),
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutFlag]),
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser]),
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime]),
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat])
                        }
                    Set CompareColumns AS
                        {
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                        ([Versions].[Versions].[${calculatedReportingVersion}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year + 1}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                        ([Versions].[Versions].[${calculatedReportingVersion}],[Periods].[Periods].[${year + 1}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year + 2}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                        ([Versions].[Versions].[${calculatedReportingVersion}],[Periods].[Periods].[${year + 2}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                        ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year + 3}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                        ([Versions].[Versions].[${calculatedReportingVersion}],[Periods].[Periods].[${year + 3}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}])
                        }
                    Set Comment AS
                        {([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[HasComment])}
                SELECT
                    {UNION( {FixColumns} ,{CompareColumns}, All )}
                    PROPERTIES [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Caption] ,[Periods].[Periods].[Caption], [Versions].[Versions].[Caption]
                    ON COLUMNS ,
                    {StrToSet([Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused])}
                    PROPERTIES [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption] ON ROWS
                    FROM [Sales Plan by Product]
                WHERE
                    (
                    [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                    [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                    [Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]
                    )
                    "}`;

        },
        setCompareModeToRow(cellData) {
            Utils.setWidgetValue('systemValueCompareBy', 'Row');
            Utils.setWidgetValue('systemValueCompareByRowSelectedProductCode', cellData.productCode);
        }
    },
    /* Product  Versions */
    rocheBPSPProductsGridVersionSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPProductsCompanySelector')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', v('rocheBPSPProductsGridVersionSelector.value'));
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsGridVersionSelector', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {FILTER(
                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                ,[Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        },
                        editable: (r, x) => {
                            if (v('systemValueCompareBy') === 'Column') {
                                return false;
                            }
                            if (v('systemValueCompareBy') === 'Row') {
                                return false;
                            }
                            return true;
                        }
                    }
            }
        }
    },
    rocheBPSPProductsCompareByRowPopupGridTable: {
        initCondition: (db) => {
            return Repository.rocheBPSPProducts.initCondition(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                let g = 'rocheBPSPProductsGridTableYearly';
                let searchString = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPProductsCompareByRowPopupCell1SearchBox')) {
                    searchString = v('rocheBPSPProductsCompareByRowPopupCell1SearchBox.value').toUpperCase()
                }
                return v(g + '.cellData').filter(e => e[0].label.toUpperCase().includes(searchString)).map(e => {
                    return [{
                        label: e[0].label,
                        skin: 'gridtable_hierarchy_compare_byrow_bpsp_' + e[0].uiLevel,
                        productCode: e[1].title
                    }];
                });
            }
        },
        launch: {
            execute: (db, cellData) => {
                Repository.rocheBPSPProductsGridTableYearly.setCompareModeToRow(cellData);
            }
        }
    },
    rocheBPSPProductsGridRow3Cell2ButtonOne: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueCompareBy === 'None'};
            }
        },
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCompareBy', 'Column');
            }
        }
    },
    rocheBPSPProductsGridRow3Cell2ButtonTwo: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueCompareBy === 'None'};
            }
        }
    },
    rocheBPSPProductsGridRow1Cell0Button: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCompareBy', 'None');
            }
        }
    },
    rocheBPSPProductsGridRow3Cell4ButtonExit: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCompareBy', 'None');
            }
        }
    },
    rocheBPSPProductsCheckoutPopupVersionCompareButton: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueCompareBy === 'None'};
            }
        },
        launch: {
            execute: (db) => {
                Repository.rocheBPSPProductsGridTableYearly.setCompareModeToRow(Utils.getGridTableCell('rocheBPSPProductsGridTableYearly', 1));
            }
        }
    },
    rocheBPSPProductsGridRow3Cell3ButtonGrey: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueCompareBy === 'Column'};
            }
        },
    },
    rocheBPSPProductsGridRow3Cell2Text: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueCompareBy === 'None'};
            }
        },
    },
    rocheBPSPProductsGridVersionSelectorTwo: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPProductsCompanySelector')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersionCompareByColumn', v('rocheBPSPProductsGridVersionSelectorTwo.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {EXCEPT(
                    {FILTER(
                        {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                        , [Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],[Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                    , {[Versions].[Versions].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsGridVersionSelector', 'key')}]} )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersionCompareByColumn');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue,
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPProductsValueSegmentedControl: {
        init: {
            execute: (db) => {
                return {
                    visible: Repository.rocheBPSPProductsGridTableYearly.isCompareByRowMode() || Repository.rocheBPSPProductsGridTableYearly.isCompareByColumnMode(),
                    data: [
                        {
                            value: 'VALUE',
                            selected: v('rocheBPSPProductsValueSegmentedControl.selected') === 'VALUE' || v('rocheBPSPProductsValueSegmentedControl.selected') === false
                        },
                        {
                            selected: v('rocheBPSPProductsValueSegmentedControl.selected') === 'PercentVariance',
                            value: 'PercentVariance'
                        },
                        {
                            selected: v('rocheBPSPProductsValueSegmentedControl.selected') === 'AbsoluteVariance',
                            value: 'AbsoluteVariance'
                        }
                    ]
                };
            }
        }
    },
    rocheBPSPProductsGridLineItemSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPProductsCompanySelector')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueLineitem', v('rocheBPSPProductsValueSegmentedControl.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                    SELECT 
                       {[}ElementAttributes_LineItems Sales Plan by Product].[}ElementAttributes_LineItems Sales Plan by Product].[Caption]} 
                      ON COLUMNS , 
                       {TM1FILTERBYLEVEL(    {FILTER(
                            {TM1SUBSETALL([LineItems Sales Plan by Product])}
                            , [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UI Compare Flag] = 1 )}, 0)} 
                      ON ROWS 
                    FROM [}ElementAttributes_LineItems Sales Plan by Product] 
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueLineitem');
                            for (let i = 0; i < r.Cells.length; i = i + 1) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue,
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    /* end Product Versions */
    'rocheBPSPProductsGridTableMonthlyHeaderText-04': {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPProductsGridTableMonthly');
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db) => {
                return {
                    title: db.systemValueGlobalSegmentedControlRelativeYearValue,
                    body: Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)
                };
            }
        }
    },
    rocheBPSPProductsGridTableMonthly: {
        initCondition: (db) => {
            let l = v('rocheBPSPProductsReceiverSelector.value.length') !== false
                && v('systemValueSegmentedControlPeriodUnit') === 'Monthly'
                && v('systemValueBackFromCheckinMonthly') === false
                && v('systemValueProductsTypeIsOk') === true;
            Utils.setWidgetValue('systemValueBackFromCheckinMonthly', false);
            return l;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
            type: 'POST',
            body: (db) => `
            {
                "MDX" : 
                    "With
                        --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion
                             Set DefaultProductRows AS
                             {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[PL1]}, ALL, RECURSIVE )}
                        --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                             Set FocusedOnProductRows AS
                             {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${db.systemValueFocusedProduct}]}, ALL, RECURSIVE )}
                        --Decide which rowSet to use
                             MEMBER [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused] AS 
                             IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                        -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)     
                             MEMBER [Periods].[Periods].[ProductName] as 
                                    [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description')
                             MEMBER [Periods].[Periods].[ProductCaption] as 
                                    [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
                             MEMBER [Periods].[Periods].[ProductLevel] as 
                                    [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name')
                             MEMBER [Periods].[Periods].[UILevelFormat] as 
                                    [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} UI Level Format')
                             MEMBER [Periods].[Periods].[zUI CheckOutFlag] as
                                    [Sales Plan by Product].([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutFlag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value])
                             MEMBER [Periods].[Periods].[HasComment] as
                                    [Sales Plan by Product].([Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Comment Flag])
                             MEMBER [Periods].[Periods].[zUI CheckOutUser] as 
                                    [Sales Plan by Product].([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedBy])
                             MEMBER [Periods].[Periods].[zUI CheckOutDateTime] as 
                                    [Sales Plan by Product].([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedDateTime])
                             MEMBER [Periods].[Periods].[zUI Split Flag] as 
                                    [Sales Plan by Product].([Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)}],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Monthly Split Type])

                        -- Create the first 5 column with information
                             Set FixColumns AS
                             {[Periods].[Periods].[ProductName],
                              [Periods].[Periods].[ProductCaption],
                              [Periods].[Periods].[ProductLevel],
                              [Periods].[Periods].[zUI CheckOutFlag],
                              [Periods].[Periods].[zUI CheckOutUser],
                              [Periods].[Periods].[zUI CheckOutDateTime],
                              [Periods].[Periods].[zUI Split Flag]}
                             Set Comment AS
                             {([Periods].[Periods].[HasComment])}
                        -- query
                        SELECT 
                        --Columns
                           {Union({Union(Union(FixColumns,{DRILLDOWNMEMBER({[Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}]},{[Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}]})},All),{Comment},All)},
                           {[Periods].[Periods].[UILevelFormat]})}
                           PROPERTIES [Periods].[Periods].[Caption]ON COLUMNS , 
                        -- rows
                          {StrToSet([Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused])}
                          PROPERTIES [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption] ON ROWS 
                        FROM [Sales Plan by Product] 
                        WHERE 
                          (
                           [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)}],
                           [Versions].[Versions].[${v('systemValueGlobalVersionKey')}],
                           [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                           [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                           [Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]
                          )
                        "
            }
       `,
            parsingControl: {
                type: 'matrix',
                length: 22,
                query: [
                    (r, x) => {
                        let result, pl, checkoutUser = r.Cells[x + 4].FormattedValue,
                            uiLevel = r.Cells[x + 21].FormattedValue;
                        Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsMainLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 1;
                        Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 2 || Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsMainLocked'];
                        Widgets['systemValueRocheBPSPProductsGridTableYearIsChildrenLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 3;
                        Widgets['systemValueMonthlyRelativeIndex'] = x;

                        pl = r.Cells[x + 2].FormattedValue.replace('a', '');
                        result = {
                            label: r.Cells[x].FormattedValue,
                            skin: 'gridtable_hierarchy_bpsp_' + uiLevel + (Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? '_locked' : ''),
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : '',
                            cellVisible: true,
                            icon: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsMainLocked'] ? 'icon-lock' : 'icon-badge',
                            isMainLocked: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsMainLocked'],
                            isLockedByMe: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] && Widgets.activeUserName.indexOf(checkoutUser) !== -1,
                            isLocked: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'],
                            isPlanningLocked: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'locked') === '1,00',
                            isChildrenLocked: Widgets['systemValueRocheBPSPProductsGridTableYearIsChildrenLocked'],
                            checkoutUser: checkoutUser,
                            checkedOutAt: r.Cells[x + 5].FormattedValue,
                            members: r.Cells[x].Members,
                            productLevel: pl,
                            uiLevel: uiLevel,
                            hasComment: r.Cells[x + 19].FormattedValue === ''
                        };
                        if (Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsMainLocked']) {
                            result['iconColor'] = '#D12D4A';
                        }
                        return result;
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : '',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue.replace('PL', ''),
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : '',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 5;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        let icon = v('systemValueProductsCheckotSplitIcons')[r.Cells[x + 6].FormattedValue];

                        let cell = {
                            icon: !icon ? 'icon-circle' : icon,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            iconColor: '#B1B3B3',
                            skin: 'products_gd_distribution_icon_bpsp'
                        };

                        if (!icon) {
                            cell['iconColor'] = 'black';
                            cell['titleFontWeight'] = 'bold';
                        }

                        if (cell.icon === 'icon-distribution-equal') {
                            cell.iconFontSize = 12;
                        }
                        return cell;
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            applyMeasuresToSection: true,
                            width: '100%'
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            cellSkin: Widgets['systemValueRocheBPSPProductsGridTableMonthlyIsLocked'] ? 'locked' : '',
                            icon: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue === '' ? 'icon-comment-off' : 'icon-comment-on',
                            iconColor: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue === '' ? '#C5C6C6' : '#0066cc',
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            hasComment: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue !== ''
                        };
                    }
                ]
            }
        }
    },
    rocheBPSPProductsColumnSelectorUpdateButton:
        {

            launch: {
                validation: (db) => {
                    return {
                        success: v('rocheBPSPProductsColumnSelectorPopupDropBox.value').split(',').length <= 10,
                        message: 'The max number of columns allowed is 10. Please deselect some columns.'
                    };
                },
                url: (db) => `/api/v1/Processes('MODULE - UI - Products Columns Selection Update by User Selection')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pUserID", "Value": "${db.activeUserName}"},
                                {"Name": "pSelectedColumns", "Value": "${v('rocheBPSPProductsColumnSelectorPopupDropBox.value')}"},
                        ]
                    }`
            }
        },
    rocheBPSPProductsCheckoutColumnSelectorUpdateButton: {
        launch: {
            validation: (db) => {
                return {
                    success: v('rocheBPSPProductsCheckoutColumnSelectorPopupDropBox.value').split(',').length <= 10,
                    message: 'The max number of columns allowed is 10. Please deselect some columns.'
                };
            },
            url: (db) => `/api/v1/Processes('MODULE - UI - Products Columns Selection Update by User Selection')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => `{
                        "Parameters": [
                                {"Name": "pUserID", "Value": "${db.activeUserName}"},
                                {"Name": "pSelectedColumns", "Value": "${v('rocheBPSPProductsCheckoutColumnSelectorPopupDropBox.value')}"},
                        ]
                    }`
        }
    },
    rocheBPSPProductsColumnSelectorRestoreButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Products Columns Selection Restore Default')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => `{
                        "Parameters": [
                                {"Name": "pUserID", "Value": "${db.activeUserName}"},
                        ]
                    }`
        }
    },
    rocheBPSPProductsCheckoutColumnSelectorRestoreButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Products Columns Selection Restore Default')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => `{
                        "Parameters": [
                                {"Name": "pUserID", "Value": "${db.activeUserName}"},
                        ]
                    }`
        }
    },
    rocheBPSPProductsColumnSelectorPopupDropBox: {
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Axes($expand=Tuples($expand=Members($select=Name))),Cells($select=Ordinal,Value)`,
                type: 'POST',
                body: (db) => `{
                    "MDX" : "With
                          Set DefaultRowSelection As
                             {TM1SubsetToSet([zSYS UI Columns Selector].[zSYS UI Columns Selector],'${db.systemValueGlobalSegmentedControlRelativeYear} selector')}
                          Set UserSpecificSelection As
                             {StrToSet('{'+[zSYS Analogic UI User Data].([}Clients].[}Clients].[${db.activeUserName}],
                                  [zSYS Analogic UI Widget].[zSYS Analogic UI Widget].[rocheBPSPProductsColumnSelectorPopupDropBox],
                                  [zSYS Analogic UI User Data Measure].[zSYS Analogic UI User Data Measure].[sColumnSelectorTuple ${db.systemValueGlobalSegmentedControlRelativeYear}])+'}')}
                          Member [}ElementAttributes_zSYS UI Columns Selector].[}ElementAttributes_zSYS UI Columns Selector].[Flag] As
                             IIF(Count({UserSpecificSelection})=0,[}ElementAttributes_zSYS UI Columns Selector].[}ElementAttributes_zSYS UI Columns Selector].[${db.systemValueGlobalSegmentedControlRelativeYear}],
                              IIF(Count(Intersect({[zSYS UI Columns Selector].CurrentMember},{UserSpecificSelection}))>0,
                                1,0))
                        SELECT 
                           {[}ElementAttributes_zSYS UI Columns Selector].[}ElementAttributes_zSYS UI Columns Selector].[Flag],
                            [}ElementAttributes_zSYS UI Columns Selector].[}ElementAttributes_zSYS UI Columns Selector].[Caption]} 
                          ON COLUMNS , 
                             {DefaultRowSelection}
                          ON ROWS 
                        FROM [}ElementAttributes_zSYS UI Columns Selector] 
                        "
                } `,
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            items: (r, x) => {
                                let i, res = [];
                                for (i = 0; i < r.Cells.length; i = i + 2) {
                                    res.push({name: r.Cells[i + 1].Value, on: r.Cells[i].Value == 1});
                                }
                                return res;
                            }
                        }
                }

            },
    },
    rocheBPSPProductsGridRow1Cell9Button: {
        init: {
            execute: (db) => {
                return {label: Widgets['activeUserName']};
            }
        },
    },

//start product checkout

    rocheBPSPProductsCheckoutPeriodUnitSegmentedControl: {
        init: {
            execute: (db) => {
                let e = db.systemValueSegmentedControlPeriodUnit;
                return e ? [{label: 'Yearly', selected: e === 'Yearly'}, {
                    label: 'Monthly',
                    selected: e === 'Monthly'
                }] : false;
            }
        },
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueSegmentedControlPeriodUnit', v('rocheBPSPProductsCheckoutPeriodUnitSegmentedControl.selected'));
                let versionWidgets = [
                    'rocheBPSProductsCheckoutVersioningCompareText',
                    'rocheBPSProductsCheckoutVersioningColumnButton',
                    'rocheBPSProductsCheckoutVersioningRowButton'
                ];
                v('systemValueSegmentedControlPeriodUnit') === 'Monthly' ? Api.hideWidgets(versionWidgets) : Api.showWidgets(versionWidgets);
            }
        }
    },

    rocheBPSPProductsCheckoutGridRow1Cell2CompanyText: {
        init: {
            execute: (db) => {
                return {title: v('rocheBPSPProductsCompanySelector.value')};
            }
        }
    },

    rocheBPSPProductsCheckoutGridRow1Cell3ReceiverText: {
        init: {
            execute: (db) => {
                return {title: v('rocheBPSPProductsReceiverSelector.value')};
            }
        }
    },

    rocheBPSPProductsCheckout: {
        initCondition: () => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPProductsCheckoutGridTableYearly', 'cellData');
        },
        executeForTextFirstCol: (columnIndex) => {
            return Repository.rocheBPSPProducts.executeForTextFirstCol(columnIndex, 'rocheBPSPProductsCheckoutGridTableYearly');
        },
        executeForText: (columnIndex) => {
            return Repository.rocheBPSPProducts.executeForText(columnIndex,
                'rocheBPSPProductsCheckoutGridTableYearly',
                'rocheBPSPProductsCheckoutGridVersionSelector',
                'rocheBPSPProductsCheckoutGridVersionSelectorTwo');
        },
        executeForCell: (columnIndex) => {
            return Repository.rocheBPSPProducts.executeForCell(columnIndex, 'rocheBPSPProductsCheckoutGridTableYearly');
        },

        headerWidth: () => {
            if (Repository.rocheBPSPProductsCheckoutGridTableYearly.isCompareByRowMode()) {
                return '5%'
            } else if (Repository.rocheBPSPProductsCheckoutGridTableYearly.isCompareByColumnMode()) {
                return '8%'
            } else {
                return '7.5%'
            }
        },

        executeForCellWidth: (columnIndex, gridTableId = 'rocheBPSPProductsCheckoutGridTableYearly') => {
            let cells = v(gridTableId + '.cellData'), cell = cells[0][columnIndex],
                previousCell = cells[0][columnIndex - 1],
                membersIndex = Repository[gridTableId].isCompareByRowMode() ? 6 : 5;
            if (!cell.members || !previousCell.members) {
                return '';
            }
            return {
                cellHeaderSkin: cell.members[membersIndex].Name === previousCell.members[membersIndex].Name ? '' : 'long_border_bpsp',
                width: Repository.rocheBPSPProductsCheckout.headerWidth()
            };
        },
        getProductsCheckoutDistributionEditPopupGridTableCell: (index, r) => {
            let c = r.Cells[index], editable = c.Consolidated === false && c.RuleDerived === false,
                performable = c.Consolidated === true && c.RuleDerived === false;

            let result = {
                title: c.FormattedValue,
                cellSkin: editable ? '' : 'readonly_bpsp',
                skin: 'monthly_right_bpsp',
                cellVisible: true,
                editable: editable,
                ordinal: c.Ordinal,
                members: c.Members,
                performable: performable,
                applyMeasuresToSection: true,
                width: '100%',
                height: '100%'
            };
            if (performable) {
                result['icon'] = 'icon-cloud-arrow-up';
            }
            return result;
        },
        getProductsCheckoutGridTableYearlyCell: (index, r) => {
            let uiIndex = index + 10, uiValue = parseInt(r.Cells[uiIndex].FormattedValue),
                skin = 'monthly_right_bpsp',
                cellSkin = '',
                applyMeasuresToSection = false,
                icon = '', distributionEdit = false, copyMerge = false, performWrite = false;
            if (uiValue === 1) {
                skin = 'products_gd_readonly_with_icon_bpsp';
                cellSkin = 'readonly_bpsp';
                icon = 'icon-copy';
                copyMerge = true;
            }
            if (uiValue === 0) {
                cellSkin = 'readonly_bpsp';
            }
            if ((uiValue === 2 || uiValue === 3)
                && r.Cells[index].Members[5].Name != Widgets.systemValueGlobalSegmentedControlRelativeYearValue) {

                skin = 'products_gd_readonly_with_icon_bpsp';
                cellSkin = 'readonly_bpsp';
                icon = 'icon-copy';
                copyMerge = true;
            }
            if ((uiValue === 2 || uiValue === 3)
                && r.Cells[index].Members[5].Name == Widgets.systemValueGlobalSegmentedControlRelativeYearValue) {

                skin = 'products_gd_writeable_with_icon_bpsp';
                cellSkin = '';
                applyMeasuresToSection = true;
                performWrite = true;
                if (uiValue === 2) {
                    icon = 'icon-dots-vertical';
                    distributionEdit = true;
                } else {
                    icon = 'icon-cloud-arrow-up';
                    skin = 'monthly_right_bpsp';
                }
            }
            let result = {
                title: r.Cells[index].FormattedValue,
                cellSkin: cellSkin,
                distributionEdit: !distributionEdit ? false : () => {
                    let widgetId = 'rocheBPSPProductsCheckoutGridTableYearly', w = v(widgetId);
                    if (v('perform.on', w) === true) {
                        return false;
                    }
                    return true;
                },
                copyMerge: copyMerge,
                performWrite: performWrite,
                ordinal: r.Cells[index].Ordinal,
                skin: skin,
                cellVisible: r.Cells[index].Members[6].Name !== 'DUMMY',
                members: r.Cells[index].Members,
                applyMeasuresToSection: true,
                width: '100%'
            };
            if (icon !== '') {
                result['icon'] = icon;

            }
            if (applyMeasuresToSection) {
                result['width'] = '100%';
                result['height'] = '100%';
                result['performable'] = true;
                if (uiValue === 3 && r.Cells[index].Members[5].Name == Widgets.systemValueGlobalSegmentedControlRelativeYearValue) {
                    result['paddingRight'] = 26;
                }
            }
            return result;
        },

        getProductsCheckoutGridTableYearlyCellWidth: (index, r) => {
            let uiIndex = index + 10, uiValue = parseInt(r.Cells[uiIndex].FormattedValue),
                skin = 'monthly_right_bpsp',
                cellSkin = '',
                applyMeasuresToSection = false,
                icon = '', distributionEdit = false, copyMerge = false, performWrite = false;
            if (uiValue === 1) {
                skin = 'products_gd_readonly_with_icon_bpsp';
                cellSkin = 'readonly_bpsp';
                icon = 'icon-copy';
                copyMerge = true;
            }
            if (uiValue === 0) {
                cellSkin = 'readonly_bpsp';
            }
            if ((uiValue === 2 || uiValue === 3)
                && r.Cells[index].Members[5].Name != Widgets.systemValueGlobalSegmentedControlRelativeYearValue) {

                skin = 'products_gd_readonly_with_icon_bpsp';
                cellSkin = 'readonly_bpsp';
                icon = 'icon-copy';
                copyMerge = true;
            }
            if ((uiValue === 2 || uiValue === 3)
                && r.Cells[index].Members[5].Name == Widgets.systemValueGlobalSegmentedControlRelativeYearValue) {

                skin = 'products_gd_writeable_with_icon_bpsp';
                cellSkin = '';
                applyMeasuresToSection = true;
                performWrite = true;
                if (uiValue === 2) {
                    icon = 'icon-dots-vertical';
                    distributionEdit = true;
                } else {
                    icon = 'icon-cloud-arrow-up';
                    skin = 'monthly_right_bpsp';
                }
            }
            let result = {
                title: r.Cells[index].FormattedValue,
                cellSkin: cellSkin,
                distributionEdit: !distributionEdit ? false : () => {
                    let widgetId = 'rocheBPSPProductsCheckoutGridTableYearly', w = v(widgetId);
                    if (v('perform.on', w) === true) {
                        return false;
                    }
                    return true;
                },
                copyMerge: copyMerge,
                performWrite: performWrite,
                ordinal: r.Cells[index].Ordinal,
                skin: skin,
                cellVisible: r.Cells[index].Members[6].Name !== 'DUMMY',
                members: r.Cells[index].Members,
                applyMeasuresToSection: true,
                width: '100%',
                cellWidth: '7.5%'
            };
            if (icon !== '') {
                result['icon'] = icon;

            }
            if (applyMeasuresToSection) {
                result['width'] = '100%';
                result['height'] = '100%';
                result['performable'] = true;
                if (uiValue === 3 && r.Cells[index].Members[5].Name == Widgets.systemValueGlobalSegmentedControlRelativeYearValue) {
                    result['paddingRight'] = 26;
                }
            }
            return result;
        },
        getProductsCheckoutUploadFileName: (db) => {
            let s = [], fileName;
            s.push(Utils.getFormattedDate(new Date(), '_', true));
            s.push(db.activeUserName);
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key'));
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key'));
            s.push(db.systemValueCheckoutProduct);
            s.push(Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db));
            return s.join('_').replaceAll(':', '_').replaceAll(' ', '_').replaceAll('/', '_');
        },
        getProductsCheckoutGridTableMonthlyCell: (index, r) => {
            let c = r.Cells[index], editable = c.Consolidated === false && c.RuleDerived === false,
                performable = c.Consolidated === true && c.RuleDerived === false, isGrey = c.RuleDerived === true;

            let result = {
                title: c.FormattedValue,
                cellSkin: isGrey ? 'readonly_bpsp' : '',
                skin: 'monthly_right_bpsp',
                cellVisible: true,
                editable: editable,
                ordinal: c.Ordinal,
                members: c.Members,
                performable: performable
            };
            if (performable) {
                result['icon'] = 'icon-cloud-arrow-up';
            }
            if (editable) {
                result['titleFontColor'] = '#A05EB5';
            }
            return result;
        },


    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-04': {
        initCondition: (db) => {
            return Repository.rocheBPSPProductsCheckout.initCondition();
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db) => {
                return Repository.rocheBPSPProductsCheckout.executeForTextFirstCol(3);
            }
        }
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-05': {
        initCondition: () => {
            return Repository.rocheBPSPProductsCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPProductsCheckout.executeForCell(index - 1);
            }
        }
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-05': {
        initCondition: () => {
            return Repository.rocheBPSPProductsCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPProductsCheckout.executeForText(index - 1);
            }
        }
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-06': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-06': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-07': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-07': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-08': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-08': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-09': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-09': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-10': {
        initCondition: () => {
            return Repository.rocheBPSPProductsCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPProductsCheckout.executeForCellWidth(index - 1);
            }
        }
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-10': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-11': {
        initCondition: () => {
            return Repository.rocheBPSPProductsCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPProductsCheckout.executeForCellWidth(index - 1);
            }
        }
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-11': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-12': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-12': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-13': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderCell-05'
    },

    'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-13': {
        reference: 'rocheBPSPProductsCheckoutGridTableYearlyHeaderText-05'
    },


    rocheBPSPProductsCheckoutDistributionEditPopupGridTable: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPProductsCheckoutGridTableYearly', 'cellData');
        },
        initDefault: (db) => {
            return [];
        },
        write: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                let value = widgetValue.value;
                if (col == 4) {
                    value = Utils.getDecimalFromPercentString(value);
                }
                return `{"Ordinal": ${widgetValue.ordinal},"Value": \"${value}\"}`
            }
        },
        switch: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `{"Ordinal": ${widgetValue.ordinal},"Value": \"${widgetValue.value}\"}`
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Updateable,RuleDerived,Consolidated)`,
            type: 'POST',
            body: (db) => {
                let productCode = v('systemValueDistributionEditProductCode');
                return `
                {"MDX" :"With
                       Member [LineItems Sales Plan by Product Flat].[LineItems Sales Plan by Product Flat].[ProductName] As
                            [Products Flat].[Products Flat].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption]
                       Member [LineItems Sales Plan by Product Flat].[LineItems Sales Plan by Product Flat].[ProductLevel] As
                         [Products Flat].[Products Flat].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name]
                    SELECT
                       {[LineItems Sales Plan by Product Flat].[LineItems Sales Plan by Product Flat].[ProductName],
                        [LineItems Sales Plan by Product Flat].[LineItems Sales Plan by Product Flat].[ProductLevel],
                        [LineItems Sales Plan by Product Flat].[LineItems Sales Plan by Product Flat].[UI Lock],
                        [LineItems Sales Plan by Product Flat].[LineItems Sales Plan by Product Flat].[Final Sales Plan],
                        [LineItems Sales Plan by Product Flat].[LineItems Sales Plan by Product Flat].[Split],
                        [LineItems Sales Plan by Product Flat].[LineItems Sales Plan by Product Flat].[Difference]}
                       PROPERTIES [LineItems Sales Plan by Product Flat].[LineItems Sales Plan by Product Flat].[Caption]  ON COLUMNS ,
                       UNION({[Products Flat].[Products Flat].[${productCode}]},
                       {TM1FILTERBYLEVEL({DRILLDOWNMEMBER({[Products Flat].[Products Flat].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} ${productCode}]}, {[Products Flat].[Products Flat].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} ${productCode}]})},0)},All)
                       PROPERTIES [Products Flat].[Products Flat].[Caption]  ON ROWS
                    FROM [Sales Plan by Product Flat]
                    WHERE
                      (
                       [Versions].[Versions].[${v('systemValueGlobalVersionKey')}],
                       [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                       [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                       [Measures Sales Plan by Product Flat].[Measures Sales Plan by Product Flat].[Value],
                       [Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}12]
                      )"}`
            },
            parsingControl: {
                type: 'matrix',
                length: 6,
                query: [
                    (r, x) => {
                        let result, pl;
                        Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] = x;
                        pl = r.Cells[x + 1].FormattedValue.replace('a', '');
                        result = {
                            label: r.Cells[x].FormattedValue,
                            skin: 'gridtable_checkout_hierarchy_bpsp_' + pl,
                            cellVisible: true,
                            icon: 'icon-badge',
                            productLevel: pl
                        };
                        return result;
                    },
                    (r, x) => {
                        Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] = Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex']].FormattedValue.replace('PL', ''),
                            cellVisible: true,
                            cellSkin: ''
                        };
                    },
                    (r, x) => {
                        Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] = Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex']],
                            editable = c.Consolidated === false && c.RuleDerived === false;
                        return {
                            value: parseInt(c.FormattedValue) === 0 ? 0 : 1,
                            ordinal: c.Ordinal,
                            cellSkin: editable ? '' : 'readonly_bpsp',
                            editable: editable,
                            skin: 'lock_unlock_bpsp'
                        };
                    },
                    (r, x) => {
                        Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] = Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutDistributionEditPopupGridTableCell(Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] = Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutDistributionEditPopupGridTableCell(Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] = Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'] + 1;
                        let s = Repository.rocheBPSPProductsCheckout.getProductsCheckoutDistributionEditPopupGridTableCell(Widgets['rocheBPSPProductsCheckoutDistributionEditPopupGridTableRelativeIndex'], r);
                        if (parseInt(s.title) > 0) {
                            s['titleFontColor'] = '#A86B24';
                        }
                        s['visible'] = x === 0;
                        return s;
                    },
                    (r, x) => {
                        return {
                            visible: x === 0
                        };
                    }
                ]
            }
        }
    },
    rocheBPSPProductsCheckoutGridRow2Cell3Button: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Products GridTable CheckIn by User')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    Utils.setWidgetValue('systemValueBackFromCheckin', true);
                    Utils.setWidgetValue('systemValueBackFromCheckinMonthly', true);
                    return `{
                        "Parameters": [
                                {"Name": "pUserID", "Value": "${db.activeUserName}"},
                                {"Name": "pProduct", "Value": "${Widgets['systemValueCheckoutProduct']}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${v('rocheBPSPProductsReceiverSelector.value')}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"}
                        ]
                    }`
                }
            },
    },
    rocheBPSPProductsCheckoutGridRow2Cell1Button: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueSegmentedControlPeriodUnit === 'Yearly'};
            }
        }
    },
    rocheBPSPProductsCheckoutGridRow2Cell1bButton: {
        init: {
            execute: (db) => {
                return {
                    visible:
                        db.systemValueSegmentedControlPeriodUnit === 'Monthly' &&
                        v('systemValueProductsTypeIsOk') === true &&
                        v('rocheBPSPProductsTypeSegmentedControl.value') !== false
                };
            }
        }
    },
    rocheBPSPProductsCheckoutCopyMergePopupSlider: {
        initCondition: (db) => {
            let l = v('rocheBPSPProductsCheckoutGridTableYearly.cellData.length');
            return l != false && l != 0;
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            { "MDX" :
                "SELECT 
                   {[Versions].[Versions].[${v('systemValueGlobalVersionKey')}]} 
                   PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                   {[Measures Sales Parameters by Products Flat].[Measures Sales Parameters by Products Flat].[Growth rate for Products Copy Minimum],
                    [Measures Sales Parameters by Products Flat].[Measures Sales Parameters by Products Flat].[Growth rate for Products Copy Maximum],
                [Measures Sales Parameters by Products Flat].[Measures Sales Parameters by Products Flat].[Growth rate for Products Copy]} 
                  ON ROWS 
                FROM [Sales Parameters by Products Flat] 
                WHERE 
                  (
                   [Years].[Years].[${Widgets.systemValueGlobalSegmentedControlRelativeYearValue}],
                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                   [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                   [Products Flat].[Products Flat].[${Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableYearly', 1).title}]
                  )
                  "}
           `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            return Utils.parseNumber(r.Cells[2].FormattedValue);
                        },
                        originalValue: (r, x) => {
                            return Utils.parseNumber(r.Cells[2].FormattedValue);
                        }
                    }
            }
        }
    },
    rocheBPSPProductsCheckoutDistributionEditPopupControlPanelSaveButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Products Yearly Save Split')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return `{
                        "Parameters": [
                                {"Name": "pPeriod", "Value": "${v('systemValueGlobalSegmentedControlRelativeYearValue')}"},
                                {"Name": "pProduct", "Value": "${v('rocheBPSPProductsCheckoutDistributionEditPopupGridTable.cellData')[0][0].label.split(' ')[0]}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key')}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"},
                                {"Name": "pLineItem", "Value": "${v('systemValueProductCheckoutGridTableYearlyPLineItem')}"},
                        ]
                    }`
                }
            },
    },
    rocheBPSPProductsCheckoutDistributionEditPopupControlPanelCancelButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Clear All Inputs')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return `{
                        "Parameters": [
                                {"Name": "pPeriod", "Value": "${v('systemValueGlobalSegmentedControlRelativeYearValue')}"},
                                {"Name": "pProduct", "Value": "${v('rocheBPSPProductsCheckoutDistributionEditPopupGridTable.cellData')[0][0].label.split(' ')[0]}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key')}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"},
                                {"Name": "pCube", "Value": "Sales Plan by Product Flat"}
                        ]
                    }`
                }
            },
    },
    'rocheBPSPProductsCheckoutDistributionEditPopupGridTableCellButton-07': {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Products Yearly Recalculate Split')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return `{
                        "Parameters": [
                                {"Name": "pPeriod", "Value": "${v('systemValueGlobalSegmentedControlRelativeYearValue')}"},
                                {"Name": "pProduct", "Value": "${v('rocheBPSPProductsCheckoutDistributionEditPopupGridTable.cellData')[0][0].label.split(' ')[0]}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key')}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"}
                        ]
                    }`
                }
            },
    },
    rocheBPSPProductsCheckoutClearPopupClearSelectionButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Input Clear')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let scope = v('systemValueSegmentedControlPeriodUnit') === 'Yearly' ? 'Product View - Yearly' : 'Product View - Monthly',
                    lineItem = v('systemValueSegmentedControlPeriodUnit') === 'Yearly' ? '' : Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db),
                    company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key'),
                    receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key'),
                    version = v('systemValueGlobalVersionKey'),
                    product = v('systemValueCheckoutProduct'),
                    year = v('systemValueGlobalSegmentedControlRelativeYearValue')
                ;
                return `{
                        "Parameters": [
                                {"Name": "pScope", "Value": "${scope}"},
                                {"Name": "pVersion", "Value": "${version}"},
                                {"Name": "pCompany", "Value": "${company}"},
                                {"Name": "pLineItem", "Value": "${lineItem}"},
                                {"Name": "pYear", "Value": "${year}"},
                                {"Name": "pProduct", "Value": "${product}"},
                                {"Name": "pReceiver", "Value": "${receiver}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPProductsCheckoutClearPopupClearAllButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Input Clear')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let scope = v('systemValueSegmentedControlPeriodUnit') === 'Yearly' ? 'Product View - Yearly' : 'Product View - Monthly',
                    lineItem = v('systemValueSegmentedControlPeriodUnit') === 'Yearly' ? 'Final Sales Plan' : Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db),
                    company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key'),
                    receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key'),
                    version = v('systemValueGlobalVersionKey'),
                    product = v('systemValueCheckoutProduct'),
                    year = v('systemValueGlobalSegmentedControlRelativeYearValue')
                ;
                return `{
                        "Parameters": [
                                {"Name": "pScope", "Value": "${scope}"},
                                {"Name": "pVersion", "Value": "${version}"},
                                {"Name": "pCompany", "Value": "${company}"},
                                {"Name": "pLineItem", "Value": "${lineItem}"},
                                {"Name": "pProduct", "Value": "${product}"},
                                {"Name": "pReceiver", "Value": "${receiver}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPProductsCheckoutGridTableYearly: {
        perform: {
            validation: (db, cell, widgetValue, row, col) => {
                let result = {success: cell.copyMerge === false && v('systemValueRocheBPSPProductsCheckoutPerformStarted') === false};
                if (cell.copyMerge === false && v('systemValueRocheBPSPProductsCheckoutPerformStarted') === false) {
                    Utils.setWidgetValue('systemValueRocheBPSPProductsCheckoutPerformStarted', true);
                }
                return result;
            },
            url: (db, cell, widgetValue, row, col) => {
                if (Utils.getPropertyOrFunctionValue(cell, 'distributionEdit')) {
                    return `/api/v1/Processes('MODULE - UI - Products Yearly Prepare Split')/tm1.ExecuteWithReturn`;
                } else {
                    return `/api/v1/Processes('MODULE - UI - Sales Plan by Product Split ')/tm1.ExecuteWithReturn`;
                }
            },
            type: 'POST',
            body: (db, cell, widgetValue, row, col) => {
                let pLineItem = Utils.getGridTableCurrentCell('rocheBPSPProductsCheckoutGridTableYearly').members[6].Name;
                Utils.setWidgetValue('systemValueProductCheckoutGridTableYearlyPLineItem', pLineItem);
                setTimeout(() => {
                    Utils.setWidgetValue('systemValueRocheBPSPProductsCheckoutPerformStarted', false);
                }, 500);// Todo handle in callback
                if (Utils.getPropertyOrFunctionValue(cell, 'distributionEdit')) {
                    return `{
                        "Parameters": [
                                {"Name": "pPeriod", "Value": "${v('systemValueGlobalSegmentedControlRelativeYearValue')}"},
                                {"Name": "pProduct", "Value": "${Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableYearly', 1).title}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key')}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"},
                                {"Name": "pLineItem", "Value": "${pLineItem}"}
                        ]
                    }`
                } else {
                    return `{
                        "Parameters": [
                                {"Name": "pValue", "Value": "${Utils.parseNumber(v('rocheBPSPProductsCheckoutGridTableYearly.value'))}"},
                                {"Name": "pPeriod", "Value": "${v('systemValueGlobalSegmentedControlRelativeYearValue')}"},
                                {"Name": "pProduct", "Value": "${Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableYearly', 1).title}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key')}"},
                                {"Name": "pSplitMode", "Value": "Default"},
                                {"Name": "pLineItem", "Value": "${pLineItem}"}
                        ]
                    }`
                }
            }
        },
        text_click: {
            execute: (db, cell, widgetValue, row, col, event, element) => {
                if (Repository.rocheBPSPProductsCheckoutGridTableYearly.isCompareByColumnMode() ||
                    Repository.rocheBPSPProductsCheckoutGridTableYearly.isCompareByRowMode()) {
                    Repository.rocheBPSPVersionsCopyDataTemplatePopup.setSource('rocheBPSPProductsCheckoutGridTableYearly');
                    Repository.rocheBPSPVersionsCopyDataTemplatePopup.refresh();
                    Api.openPopup('rocheBPSPVersionsCopyDataTemplatePopup', event, element);
                }
            }
        },
        initCondition: (db) => {
            return v('systemValueSegmentedControlPeriodUnit') === 'Yearly';
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Updateable,RuleDerived,Consolidated;$expand=Members($select=Name,Attributes/Caption))`,
            type: 'POST',
            body: (db, widgetId, object) => {
                if (object.isCompareByColumnMode()) {
                    return object.getCompareByColumnMDX(object, db);
                }
                if (object.isCompareByRowMode()) {
                    return object.getCompareByRowMDX(object, db)
                }
                return object.getNormalMDX(object, db);
            },
            parsingControl: (db, widgetId, object) => {
                if (object.isCompareByColumnMode()) {
                    return object.getParsingControlCompareByColumn(object);
                }
                if (object.isCompareByRowMode()) {
                    return object.getParsingControlCompareByRow(object);
                }
                return object.parsingControlNormalMode;
            }
        },
        getNormalMDX(object, db) {
            return `
            {
                "MDX" : 
                    "With 
                         Set DefaultProductRows AS
                         {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${db.systemValueCheckoutProduct}]}, ALL, RECURSIVE )}
                         MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[DUMMY] as 1
                         Set PaddingColumns AS
                         {{TM1SubsetToSet([Periods].[Periods],'zUI Padding Years')}*{[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[DUMMY]}}
                         Set DefaultColumnSelection AS
                    {HEAD(UNION({StrToSet([Control].([Measures Control].[Measures Control].[UI ProuctsGridTable DefaultColumnsTuple ${db.systemValueGlobalSegmentedControlRelativeYear}],[Value Type].[Value Type].[String]))},{PaddingColumns},All),10)}
                         Set ColumnSelectionByUser AS 
                         Head(UNION({StrToSet('{'+[zSYS Analogic UI User Data].([}Clients].[}Clients].[${db.activeUser}],[zSYS Analogic UI Widget].[zSYS Analogic UI Widget].[rocheBPSPProductsGridTableYearly],[zSYS Analogic UI User Data Measure].[zSYS Analogic UI User Data Measure].[sColumnSelectorTuple ${db.systemValueGlobalSegmentedControlRelativeYear}])+'}')},{PaddingColumns},All),10)
                         Set WidgetSettingByUser AS
                         {StrToSet('{'+[zSYS Analogic UI User Data].([}Clients].[}Clients].[${db.activeUserName}],[zSYS Analogic UI Widget].[zSYS Analogic UI Widget].[rocheBPSPProductsGridTableYearly],[zSYS Analogic UI User Data Measure].[zSYS Analogic UI User Data Measure].[sColumnSelectorTuple ${db.systemValueGlobalSegmentedControlRelativeYear}])+'}')}
                         MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ColumnSelectionByUser] AS 
                         IIF(Count(WidgetSettingByUser)>0,'Head(UNION({WidgetSettingByUser},{PaddingColumns},All),10)','{}')
                         Set ColumnSelectionByUser AS
                         {StrToSet([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ColumnSelectionByUser])}
                         MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description')
                         MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductCaption] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
                         MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name')
                         MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} UI Level Format')
                         MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime] as 
                                [Sales Plan by Product].([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedDateTime])
                         MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser] as 
                                [Sales Plan by Product].([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedBy])
                         Set FixColumns AS
                         {([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName]),
                         ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductCaption]),
                         ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel]),
                         ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutFlag]),
                         ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser]),
                         ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime]),
                         ([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat])}
                         Set Comment AS
                              {([Measures Sales Plan by Product].[Measures Sales Plan by Product].[Comment Flag],[Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan])}

                    SELECT
                        {UNION(
                           HEAD(
                             UNION(
                               UNION({[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]}*{FixColumns},
                               {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[UI Format]}*{ColumnSelectionByUser},All),
                               {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[UI Format]}*{DefaultColumnSelection},All),27),
                                       {Comment},All)}  ON COLUMNS , 
                      {DefaultProductRows} PROPERTIES [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption] ON ROWS 
                    FROM [Sales Plan by Product] 
                    WHERE 
                      (
                           [Versions].[Versions].[${v('systemValueGlobalVersionKey')}],
                           [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                           [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}]
                      )

                        "
            }
       `
        },
        getCompareByColumnMDX(object, db) {
            let baseVersionValue = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCheckoutGridVersionSelector', 'key'),
                compareVersionValue = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCheckoutGridVersionSelectorTwo', 'key'),
                lineItem = v('rocheBPSPProductsCheckoutGridLineItemSelector.value'),
                reportingVersion = v('rocheBPSPProductsCheckoutValueSegmentedControl.value'),
                calculatedReportingVersion = reportingVersion === 'VALUE' ? compareVersionValue : reportingVersion,
                year = Utils.parseNumber(db.systemValueGlobalStartingPlanYear);
            return `{"MDX" :
                        "WITH
                                Set DefaultProductRows AS
                                 {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${db.systemValueCheckoutProduct}]}, ALL, RECURSIVE )}
                                MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[DUMMY] as 1
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description')
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductCaption] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name')
                                 MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat] as [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} UI Level Format')
                                MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[HasComment] AS
                                    [Sales Plan by Product].([Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Comment Flag])
                                MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime] AS
                                    [Sales Plan by Product].([Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedDateTime])
                                MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser] AS
                                    [Sales Plan by Product].([Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedBy])
                                MEMBER [Versions].[Versions].[AbsoluteVariance] AS
                                    ([Versions].[Versions].[${compareVersionValue}] - [Versions].[Versions].[${baseVersionValue}])
                                MEMBER [Versions].[Versions].[PercentVariance] AS
                                    ([Versions].[Versions].[${compareVersionValue}] - [Versions].[Versions].[${baseVersionValue}] )/[Versions].[Versions].[${baseVersionValue}]
                                    , FORMAT_STRING='#0.00%'
                                Set FixColumns AS
                                    {
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName]),
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductCaption]),
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel]),
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutFlag]),
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser]),
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime]),
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat])
                                    }
                                Set CompareColumns AS
                                    {
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                                    ([Versions].[Versions].[${calculatedReportingVersion}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year + 1}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                                    ([Versions].[Versions].[${calculatedReportingVersion}],[Periods].[Periods].[${year + 1}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year + 2}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                                    ([Versions].[Versions].[${calculatedReportingVersion}],[Periods].[Periods].[${year + 2}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                                    ([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year + 3}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}]),
                                    ([Versions].[Versions].[${calculatedReportingVersion}],[Periods].[Periods].[${year + 3}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${lineItem}])
                                    }
                                Set Comment AS
                                    {([Versions].[Versions].[${baseVersionValue}],[Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[HasComment])}
                            SELECT
                                {UNION( {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]} * {FixColumns}
                                    ,{[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[UI Format]} * {CompareColumns}, All )} 
                                PROPERTIES [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Caption] ,[Periods].[Periods].[Caption], [Versions].[Versions].[Caption]
                                ON COLUMNS ,
                                {DefaultProductRows}
                                PROPERTIES [Products].[BPSP Budget].[BPSP Budget Caption] ON ROWS
                                FROM [Sales Plan by Product]
                            WHERE
                                (
                                    [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                                    [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}]
                                )
            "}
            `;
        },
        getCompareByRowMDX(object, db) {
            let baseVersionValue = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCheckoutGridVersionSelector', 'key'),
                reportingVersion = v('rocheBPSPProductsCheckoutValueSegmentedControl.value'),
                calculatedReportingVersion = reportingVersion,
                year = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                yearminusOne = Utils.parseNumber(db.systemValueGlobalStartingPlanYear) - 1,
                company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key'),
                product = v('systemValueProductCheckedOutCompareByRowSelectedProductCode')
            ;
            if (calculatedReportingVersion === 'PercentVariance') {
                calculatedReportingVersion = 'DELTA PERCENT';
            }
            if (calculatedReportingVersion === 'AbsoluteVariance') {
                calculatedReportingVersion = 'DELTA ABS';
            }
            return `{"MDX":"
                    -- Final version. Handle switching reporting element by row in MDX
                    WITH
                    -- Comparison query control elements
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ReportType] AS \\"${calculatedReportingVersion}\\"
                    -- Standard info columns
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName] AS [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description')
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductNumber] AS [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel] AS [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name')
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionCode] AS [Versions].[Versions].CurrentMember.Name
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionName] AS
                            [Version Information by Company].([Versions].[Versions].CurrentMember,[Companies].[Companies].[${company}],[Measures Version Information by Company].[Measures Version Information by Company].[Name])
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionMonth] AS
                            [Version Information by Company].([Versions].[Versions].CurrentMember,[Companies].[Companies].[${company}],[Measures Version Information by Company].[Measures Version Information by Company].[Actuals Month])
                    -- Reuse standard PH based formatting
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat] AS
                            IIF( [Versions].[Versions].CurrentMember.Name = [Versions].[Versions].[${baseVersionValue}].Name, \\"01C\\", \\"02C\\")
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionCaption] AS
                            IIF( [Versions].[Versions].CurrentMember.Name = [Versions].[Versions].[${baseVersionValue}].Name,
                            [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName] + \\" (\\" + [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionName] + \\")\\",
                            [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionName] + \\" (\\" + [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionMonth] + \\")\\")
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionCaptionWithoutExtraInfo] AS
                            IIF( [Versions].[Versions].CurrentMember.Name = [Versions].[Versions].[${baseVersionValue}].Name,
                            [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductName],
                            [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionName])
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[HasComment] AS
                            [Sales Plan by Product].([Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Comment Flag])
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime] AS
                            [Sales Plan by Product].([Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedDateTime])
                        MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser] AS
                            [Sales Plan by Product].([Periods].[Periods].[${year}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],
                            [Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedBy])
                    -- new 2 line
                       MEMBER [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[FirstDataColumn] AS
                            IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${baseVersionValue}], 0, COUNT({CompareColumns}) )
                    -- Calcuated measures for variances
                        MEMBER [Measures Sales Plan by Product].[Measures Sales Plan by Product].[AbsoluteVariance] AS
                            ([Versions].[Versions].CurrentMember,[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value])
                            - ([Versions].[Versions].[${baseVersionValue}],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value])
                        MEMBER [Measures Sales Plan by Product].[Measures Sales Plan by Product].[PercentVariance] AS
                            IIF( ([Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value] >-0.5 ) AND ([Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value] <0.5),
                                IIF ( [Measures Sales Plan by Product].[Measures Sales Plan by Product].[AbsoluteVariance] <> 0, -1, 0), 
                                [Measures Sales Plan by Product].[Measures Sales Plan by Product].[AbsoluteVariance]/[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value])
                            , FORMAT_STRING='#0.00%'
                        -- Final aggregation of values for reporting view.
                        MEMBER [Measures Sales Plan by Product].[Measures Sales Plan by Product].[ReportingMeasure] AS
                           IIF([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ReportType] = \\"DELTA ABS\\",
                            \\"[Measures Sales Plan by Product].[Measures Sales Plan by Product].[AbsoluteVariance]\\",
                        IIF([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ReportType] = \\"DELTA PERCENT\\",
                        \\"[Measures Sales Plan by Product].[Measures Sales Plan by Product].[PercentVariance]\\",
                        \\"[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]\\"))               
                    -- Required sets of versions
                        SET ReportVersions AS
                            {EXCEPT( {FILTER(
                                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                                , [Version Information by Company].([Companies].[Companies].[${company}],[Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                                , {[Versions].[Versions].[${baseVersionValue}]} )}
                    -- Define required data tuples
                        SET FixColumns AS
                            {
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionCode],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionCaption],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[VersionCaptionWithoutExtraInfo],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductNumber],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[ProductLevel],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutFlag],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutUser],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutDateTime],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[UILevelFormat],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[FirstDataColumn],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[BW Invoice],[Periods].[Periods].[${yearminusOne}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[BW Invoice YTD],[Periods].[Periods].[${year}])
                            }
                        SET CompareColumns AS
                            {
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Periods].[Periods].[${year + 1}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Periods].[Periods].[${year + 2}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Periods].[Periods].[${year + 3}])
                            }
                        SET GrowthColumns AS
                            {
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Growth Final Sales Plan],[Periods].[Periods].[${year}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Growth Final Sales Plan],[Periods].[Periods].[${year + 1}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Growth Final Sales Plan],[Periods].[Periods].[${year + 2}]),
                            ([LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Growth Final Sales Plan],[Periods].[Periods].[${year + 3}])
                            }
                        SET Comment AS
                            {
                    ([Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[HasComment],[Periods].[Periods].[${year}])
                            }
                    SELECT
                         {UNION( {UNION( {UNION( {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]} * {FixColumns}, 
                        {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]} * {CompareColumns} , All )}, 
                        {STRTOMEMBER([Measures Sales Plan by Product].[Measures Sales Plan by Product].[ReportingMeasure]) }  * {CompareColumns} , All )}, 
                    {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]} * {GrowthColumns} , All )}
                        PROPERTIES [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Caption] ,[Periods].[Periods].[Caption], [Versions].[Versions].[Caption]
                        ON COLUMNS ,
                        {[Versions].[Versions].[${baseVersionValue}], {ReportVersions}}
                        PROPERTIES [Versions].[Versions].[Caption] ON ROWS
                    FROM [Sales Plan by Product]
                    WHERE
                        (
                        [Companies].[Companies].[${company}],
                        [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                        [Products].[BPSP Budget].[${product}]
                        )
            "}`;
        },
        parsingControlNormalMode: {
            type: 'matrix',
            length: 28,
            query: [
                (r, x) => {
                    let result, pl, uiLevel = r.Cells[x + 6].FormattedValue;
                    Widgets['systemValueProductsYearlyRelativeIndex'] = x;
                    pl = r.Cells[x + 2].FormattedValue.replace('a', '');
                    result = {
                        label: r.Cells[x].FormattedValue,
                        skin: 'gridtable_checkout_hierarchy_bpsp_' + uiLevel,
                        cellVisible: true,
                        icon: 'icon-badge',
                        members: r.Cells[x].Members,
                        uiLevel: uiLevel,
                        productLevel: pl
                    };
                    if (Widgets['systemValueRocheBPSPProductsCheckoutGridTableYearlyIsMainLocked']) {
                        result['iconColor'] = '#D12D4A';
                    }
                    return result;
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                        cellVisible: true,
                        cellSkin: '',
                        members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue.replace('PL', ''),
                        cellVisible: true,
                        cellSkin: '',
                        members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 5;
                    return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableYearlyCell(Widgets['systemValueProductsYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableYearlyCell(Widgets['systemValueProductsYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableYearlyCell(Widgets['systemValueProductsYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableYearlyCell(Widgets['systemValueProductsYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableYearlyCell(Widgets['systemValueProductsYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableYearlyCell(Widgets['systemValueProductsYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableYearlyCellWidth(Widgets['systemValueProductsYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableYearlyCellWidth(Widgets['systemValueProductsYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableYearlyCell(Widgets['systemValueProductsYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableYearlyCell(Widgets['systemValueProductsYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 11;
                    let cellValue = r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue;
                    return {

                        icon: cellValue === '' ? 'icon-comment-off' : 'icon-comment-on',
                        iconColor: cellValue === '' ? '#C5C6C6' : '#0066cc',
                        members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members,
                        hasComment: cellValue !== ''
                    };
                },
                (r, x) => {
                    return {};
                }
            ]
        },
        getParsingControlCompareByColumn(object) {
            let query = object.parsingControlNormalMode.query.slice(0, 11), i = 3;
            while (i < 11) {
                const j = i;
                query[i] = (r, x) => {
                    return object.getBaseCell(r, 3 === j ? 5 : 1, j % 2 === 1 ? 'readonly_bpsp' : 'readonly_blue_bpsp');
                };
                ++i;
            }
            query[9] = (r, x) => {
                return object.getBaseCellInColumn(r, 1, 'readonly_bpsp');
            };
            query[10] = (r, x) => {
                return object.getBaseCellInColumn(r, 1, 'readonly_blue_bpsp');
            };
            let l = 4;
            for (i = 0; i < l; ++i) {
                query.push((r, x) => {
                    return {cellVisible: false};
                });
            }
            return {
                type: 'matrix',
                length: 23,
                query: query
            };
        },
        getParsingControlCompareByRow(object) {
            return {
                type: 'matrix',
                length: 24,
                query: [
                    (r, x) => {
                        let result, pl,
                            uiLevel = r.Cells[x + 8].FormattedValue,
                            colOffset = r.Cells[x + 9].FormattedValue;
                        Widgets['systemValueProductsYearlyRelativeIndex'] = x + 1;
                        Widgets['systemValueProductsCompareColumnOffset'] = colOffset;
                        pl = r.Cells[x + 5].FormattedValue.replace('a', '');
                        result = {
                            label: r.Cells[x + 1].FormattedValue,
                            skin: 'gridtable_checkout_hierarchy_bpsp_' + uiLevel,
                            cellSkin: x === 0 ? 'selected' : '',
                            cellVisible: true,
                            icon: x > 0 ? 'icon-rectangle-stack' : 'icon-badge',
                            members: r.Cells[x + 1].Members,
                            captionWithoutExtraInfo: r.Cells[x + 2].FormattedValue,
                            uiLevel: uiLevel,
                            productLevel: pl
                        };
                        return result;
                    },
                    (r, x) => {
                        Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 2;
                        return {
                            title: x > 3 ? '' : r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                            cellVisible: true,
                            cellSkin: x === 0 ? 'selected' : '',
                            members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + 1;
                        return {
                            title: x > 3 ? '' : r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue.replace('PL', ''),
                            cellVisible: true,
                            cellSkin: x === 0 ? 'selected' : '',
                            members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members
                        };
                    },
                    (r, x) => {
                        return object.getBaseCell(r, 6, x === 0 ? 'selected' : 'readonly_bpsp');
                    },
                    (r, x) => {
                        return object.getBaseCell(r, 1, x === 0 ? 'selected' : 'readonly_bpsp');
                    },
                    (r, x) => {
                        let incCols = 1 + parseInt(Widgets['systemValueProductsCompareColumnOffset']);
                        return object.getBaseCell(r, incCols, x === 0 ? 'selected' : 'readonly_bpsp');
                    },
                    (r, x) => {
                        return object.getBaseCell(r, 1, x === 0 ? 'selected' : 'readonly_bpsp');
                    },
                    (r, x) => {
                        return object.getBaseCell(r, 1, x === 0 ? 'selected' : 'readonly_bpsp');
                    },
                    (r, x) => {
                        return object.getBaseCell(r, 1, x === 0 ? 'selected' : 'readonly_bpsp');
                    },
                    (r, x) => {
                        let incCols = 5 - parseInt(Widgets['systemValueProductsCompareColumnOffset']);
                        return object.getBaseCellShorter(r, incCols, x === 0 ? 'selected' : 'readonly_bpsp');
                    },
                    (r, x) => {
                        return object.getBaseCellShorter(r, 1, x === 0 ? 'selected' : 'readonly_bpsp');
                    },
                    (r, x) => {
                        return object.getBaseCellShorter(r, 1, x === 0 ? 'selected' : 'readonly_bpsp');
                    },
                    (r, x) => {
                        return object.getBaseCellShorter(r, 1, x === 0 ? 'selected' : 'readonly_bpsp');
                    },
                    (r, x) => {
                        return {
                            visible: false,
                            cellVisible: false
                        };
                    },
                    (r, x) => {
                        return {
                            visible: false,
                            cellVisible: false
                        };
                    }
                ]
            };
        },
        setCompareModeToRow(cellData) {
            Utils.setWidgetValue('systemValueCompareBy', 'Row');
            Utils.setWidgetValue('systemValueCompareByRowSelectedProductCode', cellData.productCode);
        },
        isCompareByColumnMode() {
            return v('systemValueCompareBy') === 'Column';
        },
        isCompareByRowMode() {
            return v('systemValueCompareBy') === 'Row';
        },
        getBaseCell(r, inc, readonlySkin = 'readonly_bpsp') {
            Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + inc;
            return {
                title: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                cellSkin: readonlySkin,
                applyMeasuresToSection: true,
                skin: 'monthly_right_bpsp',
                members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members,
                width: '100%'
            };
        },

        getBaseCellInColumn(r, inc, readonlySkin = 'readonly_bpsp') {
            Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + inc;
            return {
                title: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                cellSkin: readonlySkin,
                applyMeasuresToSection: true,
                skin: 'monthly_right_bpsp',
                members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members,
                width: '100%',
                cellWidth: '8%'
            };
        },

        getBaseCellShorter(r, inc, readonlySkin = 'readonly_bpsp') {
            Widgets['systemValueProductsYearlyRelativeIndex'] = Widgets['systemValueProductsYearlyRelativeIndex'] + inc;
            return {
                title: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].FormattedValue,
                cellSkin: readonlySkin,
                applyMeasuresToSection: true,
                skin: 'monthly_right_bpsp',
                members: r.Cells[Widgets['systemValueProductsYearlyRelativeIndex']].Members,
                width: '100%',
                cellWidth: '5%',
            };
        },

        // copy version template popup implementation
        getCopyVersionSource() {
            const b = Repository.rocheBPSPProductsCheckoutGridTableYearly.isCompareByRowMode();
            if (b) {
                let r = Repository.rocheBPSPProductsCheckoutGridTableYearly.getRowsForCopyVersion('captionWithoutExtraInfo');
                r.items.shift();
                return r;
            } else {
                return {
                    editable: false,
                    items: v('rocheBPSPProductsCheckoutGridVersionSelectorTwo.items')
                };
            }
        },
        getCopyVersionTarget() {
            return {
                editable: false,
                items: v('rocheBPSPProductsCheckoutGridVersionSelector.items')
            };
        },
        getCopyVersionRows() {
            const b = Repository.rocheBPSPProductsCheckoutGridTableYearly.isCompareByRowMode();
            if (b) {
                return {
                    editable: false,
                    items: [{
                        name: v('rocheBPSPProductsCheckoutGridTableYearly.cellData')[0][0].captionWithoutExtraInfo,
                        on: true
                    }]
                };
            } else {
                return Repository.rocheBPSPProductsCheckoutGridTableYearly.getRowsForCopyVersionInColumnsCompare();
            }
        },
        getCopyVersionColumns() {
            const b = Repository.rocheBPSPProductsCheckoutGridTableYearly.isCompareByRowMode();
            return {
                editable: false,
                items: [
                    {
                        name: b ? 'Final Sales Plan' : v('rocheBPSPProductsCheckoutGridLineItemSelector.value'),
                        on: true
                    }
                ]
            };
        },
        getCopyVersionYears() {
            let s = Utils.parseNumber(v('systemValueGlobalStartingPlanYear'));
            const currentCell = Utils.getGridTableCurrentCell('rocheBPSPProductsCheckoutGridTableYearly'),
                b = Repository.rocheBPSPProductsCheckoutGridTableYearly.isCompareByRowMode(),
                selected = Utils.parseNumber(currentCell.members[b ? 6 : 5].Name);
            let g = (year, inc, selected) => {
                const s = year + inc;
                return {name: s.toString(), key: s, on: s === selected};
            };
            return {
                items: [
                    {name: 'All', key: '', on: false},
                    g(s, 0, selected),
                    g(s, 1, selected),
                    g(s, 2, selected),
                    g(s, 3, selected)
                ]
            };
        },

        getCopyVersionUsed() {
            return {
                visible: false
            };
        },

        getCopyProcessParameters() {
            const b = Repository.rocheBPSPProductsCheckoutGridTableYearly.isCompareByRowMode();
            if (b) {     //// compareByRow
                return {
                    pScope: 'cube:Sales Plan by Product',
                    pElementFrom: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupSourceVersionDropbox', 'key'),
                    pElementTo: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupTargetVersionDropbox', 'key'),
                    pProduct: v('systemValueCheckoutProduct'),
                    pLineItem: v('rocheBPSPVersionsCopyDataTemplatePopupColumnsDropbox.value'),
                    pYear: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupYearsDropbox', 'key'),
                    pCompany: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key'),
                    pReceiver: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key'),
                    pMeasure: 'Value'
                };
            } else {  // compareByColumn
                return {
                    pScope: 'cube:Sales Plan by Product',
                    pElementFrom: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupSourceVersionDropbox', 'key'),
                    pElementTo: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupTargetVersionDropbox', 'key'),
                    pProduct: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupRowsDropbox', 'key'),
                    pLineItem: v('rocheBPSPVersionsCopyDataTemplatePopupColumnsDropbox.value'),
                    pYear: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupYearsDropbox', 'key'),
                    pCompany: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key'),
                    pReceiver: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key'),
                    pMeasure: 'Value'
                };
            }
        },

        getCopyProcessName() {
            return 'MODULE - UI - Input Copy';
        },

        refreshCopyVersionRelatedWidgets() {
            Api.forceRefresh('rocheBPSPProductsCheckoutGridTableYearly');
        },

        // copy version template popup implementation
        // compareByRow mode - From
        getRowsForCopyVersion(attribute = 'label') {
            const i = v('rocheBPSPProductsCheckoutGridTableYearly.row');
            const l = v('rocheBPSPProductsCheckoutGridTableYearly.cellData')[i][0]['captionWithoutExtraInfo'];
            return {
                items: v('rocheBPSPProductsCheckoutGridTableYearly.cellData').map(e => {
                    return {
                        name: e[0]['captionWithoutExtraInfo'],
                        key: e[4].members[3].Name,
                        on: e[0]['captionWithoutExtraInfo'] === l
                    }
                })
            };
        },

        getRowsForCopyVersionInColumnsCompare(attribute = 'label') {
            const i = v('rocheBPSPProductsCheckoutGridTableYearly.row');
            const l = v('rocheBPSPProductsCheckoutGridTableYearly.cellData')[i][0][attribute];
            return {
                items: v('rocheBPSPProductsCheckoutGridTableYearly.cellData').map(e => {
                    return {name: e[0][attribute], key: e[0].members[2].Name, on: e[0][attribute] === l}
                })
            };
        },


        getColumnsForCopyVersion() {
            const currentCell = Utils.getGridTableCurrentCell('rocheBPSPProductsCheckoutGridTableYearly');
            const currentColumn = currentCell.members[5].Attributes.Caption;
            return v('rocheBPSPProductsCheckoutGridTableYearly.cellData')[0].slice(3, 12).map(e => {
                return {
                    name: e.members[5].Attributes.Caption,
                    on: e.members[5].Attributes.Caption === currentColumn
                }
            });
        }
    },
    /*version copy data template*/
    rocheBPSPVersionsCopyDataTemplatePopup: {
        setSource(source) {
            Utils.setWidgetValue('rocheBPSPVersionsCopyDataTemplatePopupSource', source);
        },
        getSourceObject() {
            const source = v('rocheBPSPVersionsCopyDataTemplatePopupSource');
            return source ? v(source, Repository) : false;
        },
        getDropboxData(method) {
            const source = this.getSourceObject();
            return source ? source[method]() : {};
        },
        refresh() {
            Api.forceRefreshWidgets([
                'rocheBPSPVersionsCopyDataTemplatePopupSourceVersionDropbox',
                'rocheBPSPVersionsCopyDataTemplatePopupTargetVersionDropbox',
                'rocheBPSPVersionsCopyDataTemplatePopupRowsDropbox',
                'rocheBPSPVersionsCopyDataTemplatePopupColumnsDropbox',
                'rocheBPSPVersionsCopyDataTemplatePopupYearsDropbox',
                'rocheBPSPVersionsCopyDataTemplatePopupUsedDropbox'
            ]);
        }
    },
    rocheBPSPVersionsCopyDataTemplatePopupSourceVersionDropbox: {
        init: {
            execute: (db) => {
                return Repository.rocheBPSPVersionsCopyDataTemplatePopup.getDropboxData('getCopyVersionSource');
            }
        }
    },
    rocheBPSPVersionsCopyDataTemplatePopupTargetVersionDropbox: {
        init: {
            execute: (db) => {
                return Repository.rocheBPSPVersionsCopyDataTemplatePopup.getDropboxData('getCopyVersionTarget');
            }
        }
    },
    rocheBPSPVersionsCopyDataTemplatePopupRowsDropbox: {
        init: {
            execute: (db) => {
                return Repository.rocheBPSPVersionsCopyDataTemplatePopup.getDropboxData('getCopyVersionRows');
            }
        }
    },
    rocheBPSPVersionsCopyDataTemplatePopupColumnsDropbox: {
        init: {
            execute: (db) => {
                return Repository.rocheBPSPVersionsCopyDataTemplatePopup.getDropboxData('getCopyVersionColumns');
            }
        }
    },
    rocheBPSPVersionsCopyDataTemplatePopupYearsDropbox: {
        init: {
            execute: (db) => {
                return Repository.rocheBPSPVersionsCopyDataTemplatePopup.getDropboxData('getCopyVersionYears');
            }
        }
    },

    rocheBPSPVersionsCopyDataTemplatePopupUsedDropbox: {
        init: {
            execute: (db) => {
                return Repository.rocheBPSPVersionsCopyDataTemplatePopup.getDropboxData('getCopyVersionUsed');
            }
        }
    },

    rocheBPSPVersionsCopyDataTemplatePopupControlPanelCancelButton: {
        launch: {
            execute: (db, event, element) => {
                Api.togglePopup('rocheBPSPVersionsCopyDataTemplatePopup', event, element);
            }
        }
    },
    rocheBPSPVersionsCopyDataTemplatePopupControlPanelCopyButton: {
        launch: {
            validation: (db) => {
                return {
                    success: Repository.rocheBPSPVersionsCopyDataTemplatePopup.getSourceObject() !== false,
                    message: 'Please set source of popup'
                };
            },
            url: (db) => {
                const source = Repository.rocheBPSPVersionsCopyDataTemplatePopup.getSourceObject(),
                    processName = source.getCopyProcessName();
                return `/api/v1/Processes('${processName}')/tm1.ExecuteWithReturn`;
            },
            type: 'POST',
            body: (db, event, element) => {
                const source = Repository.rocheBPSPVersionsCopyDataTemplatePopup.getSourceObject();
                Api.togglePopup('rocheBPSPVersionsCopyDataTemplatePopup', event, element);
                return Utils.buildProcessParametersFromObject(source.getCopyProcessParameters());
            }
        },
        refreshRequest: {
            execute: (db) => {
                const source = Repository.rocheBPSPVersionsCopyDataTemplatePopup.getSourceObject();
                source.refreshCopyVersionRelatedWidgets();
            }
        }
    },
    /*end version copy data template*/
    rocheBPSPProductsCheckoutGridRow2Cell1aButton: {
        init: {
            execute: (db) => {
                return {
                    visible:
                        db.systemValueSegmentedControlPeriodUnit === 'Monthly' &&
                        v('systemValueProductsTypeIsOk') === true &&
                        v('rocheBPSPProductsTypeSegmentedControl.value') !== false
                };
            }
        },
        launch: {
            download: (db) => {
                let y1 = parseInt(db.systemValueGlobalStartingPlanYear),
                    fileName = Repository.rocheBPSPProductsCheckout.getProductsCheckoutUploadFileName(db);
                return {
                    url: 'export?export_key=rocheMonthly&file_name=' + fileName + '.xlsx',
                    fileName: fileName + '.xlsx',
                    activeUserName: db.activeUserName,
                    companyVersion: v('systemValueGlobalVersionKey'), //Live
                    productPlanVersion: db.systemValueGlobalCompanyProductPlanVersion, //Budget
                    company: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key'),
                    receiver: v('rocheBPSPProductsReceiverSelector.value'),
                    product: db.systemValueCheckoutProduct,
                    globalVersion: v('systemValueGlobalVersionKey'),
                    version: Widgets.systemValueGlobalCompanyProductPlanVersion,
                    lineItem: Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db),
                    year1: y1,
                    year2: y1 + 1,
                    year3: y1 + 2,
                    year4: y1 + 3,
                    key: 'exportMonthly'
                };
            }
        }
    },
    rocheBPSPProductsCheckoutUploadPopupPlDropbox: {
        initCondition: (db) => {
            let l = v('rocheBPSPProductsCheckoutGridTableMonthly.cellData.length');
            return l !== false && l !== 0;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return v('rocheBPSPProductsCheckoutGridTableMonthly.cellData').map(function (e) {
                    return {name: 'PL' + e[2].title, key: e[2].title, on: false}
                }).reduce((acc, current) => {
                    const x = acc.find(item => item.name === current.name);
                    if (!x) {
                        return acc.concat([current]);
                    } else {
                        return acc;
                    }
                }, []);
            }
        }
    },
    rocheBPSPProductsCheckoutUploadPopupUpload: {
        upload: (db) => {
            let fileName = Repository.rocheBPSPProductsCheckout.getProductsCheckoutUploadFileName(db);
            Utils.modifyFileName('rocheBPSPProductsCheckoutUploadPopupUpload', fileName);
            Utils.setWidgetValue('systemValueUploadFileName', fileName + '.csv');
            return {
                staging: app.defaultUploadStagingFolder,
                target: app.defaultUploadTargetFolder,
                productLevel: v('rocheBPSPProductsCheckoutUploadPopupPlDropbox.value'),
                validation: 'validateExcelImport',
                validationUser: db.activeUserName,
                validationCompany: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key'),
                validationReceiver: v('rocheBPSPProductsReceiverSelector.value'),
                validationGlobalVersion: v('systemValueGlobalVersionKey'),
                validationVersion: Widgets.systemValueGlobalCompanyProductPlanVersion,
                validationProduct: Widgets.systemValueCheckoutProduct,
                validationLineItem: Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db),
                validationMessage: 'First row of excel does not match'
                //      preProcessTemplate: v('preprocess.choose.value') === false ? 'Template1' : v('preprocess.choose.value')
            };
        },
        request: {
            url: (db) => `/api/v1/Processes('MODULE - UI - CSV Upload Post Processing')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let fileName = v('systemValueUploadFileName');
                return `{
                        "Parameters": [
                                {"Name": "pUser", "Value": "${db.activeUserName}"},
                                {"Name": "pProduct", "Value": "${db.systemValueCheckoutProduct}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key')}"},
                                {"Name": "pTargetCube", "Value": "Sales Plan by Product"},
                                {"Name": "pSelectedProductLevel", "Value": "${v('rocheBPSPProductsCheckoutUploadPopupPlDropbox.value')}"},
                                {"Name": "pFileName", "Value": "${fileName}"},
                                {"Name": "pLineItem", "Value": "${Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPProductsCheckoutCopyMergePopupCopyButton: {
        launch: {

            url: (db) => `/api/v1/Processes('MODULE - UI - Products Yearly Copy')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let percentage = $('#rocheBPSPProductsCheckoutCopyMergeTextBox').find('.ks-textbox-input').val();
                return `{
                        "Parameters": [
                                {"Name": "pProduct", "Value": "${Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableYearly', 1).title}"},
                                {"Name": "pYearFrom", "Value": "${Utils.getGridTableCurrentCell('rocheBPSPProductsCheckoutGridTableYearly').members[5].Name}"},
                                {"Name": "pYearTo", "Value": "${v('systemValueGlobalSegmentedControlRelativeYearValue')}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key')}"},
                                {"Name": "pMode", "Value": "1"},
                                {"Name": "pPercentage", "Value": "${Utils.parseNumber(percentage) / 100}"},
                                {"Name": "pLineItem", "Value": "${Utils.getGridTableCurrentCell('rocheBPSPProductsCheckoutGridTableYearly').members[6].Name}"},
                                {"Name": "pVersionFrom", "Value": "${v('systemValueGlobalVersionKey')}"},
                                {"Name": "pVersionTo", "Value": "${v('systemValueGlobalVersionKey')}"}
                        ]
                    }`;
            }

        }
    },
    rocheBPSPProductsCheckoutCopyMergePopupMergeButton: {
        launch: {

            url: (db) => `/api/v1/Processes('MODULE - UI - Products Yearly Copy')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let percentage = $('#rocheBPSPProductsCheckoutCopyMergeTextBox').find('.ks-textbox-input').val();
                return `{
                        "Parameters": [
                                {"Name": "pProduct", "Value": "${Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableYearly', 1).title}"},
                                {"Name": "pYearFrom", "Value": "${Utils.getGridTableCurrentCell('rocheBPSPProductsCheckoutGridTableYearly').members[5].Name}"},
                                {"Name": "pYearTo", "Value": "${v('systemValueGlobalSegmentedControlRelativeYearValue')}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key')}"},
                                {"Name": "pMode", "Value": "2"},
                                {"Name": "pPercentage", "Value": "${Utils.parseNumber(percentage) / 100}"},
                                {"Name": "pLineItem", "Value": "${Utils.getGridTableCurrentCell('rocheBPSPProductsCheckoutGridTableYearly').members[6].Name}"},
                                {"Name": "pVersionFrom", "Value": "${v('systemValueGlobalVersionKey')}"},
                                {"Name": "pVersionTo", "Value": "${v('systemValueGlobalVersionKey')}"}
                        ]
                    }`;
            }

        }
    },
    rocheBPSPProductsCheckoutDistributionPopupLastYearButton: {
        launch: {

            url: (db) => `/api/v1/Processes('MODULE - UI - Sales Plan by Product Split')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => `{
                        "Parameters": [
                                {"Name": "pValue", "Value": "${Utils.parseNumber(Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableMonthly', 3).title)}"},
                                {"Name": "pProduct", "Value": "${Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableMonthly', 1).title}"},
                                {"Name": "pPeriod", "Value": "${v('systemValueGlobalSegmentedControlRelativeYearValue')}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${v('rocheBPSPProductsReceiverSelector.value')}"},
                                {"Name": "pSplitMode", "Value": "Monthly"},
                                {"Name": "pSplitMethod", "Value": "Previous Year"},
                                {"Name": "pLineItem", "Value": "${Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"}
                        ]
                    }`

        }
    },
    rocheBPSPProductsCheckoutDistributionPopupLinearSplitButton: {
        launch: {

            url: (db) => `/api/v1/Processes('MODULE - UI - Sales Plan by Product Split')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => `{
                        "Parameters": [
                                {"Name": "pValue", "Value": "${Utils.parseNumber(Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableMonthly', 3).title)}"},
                                {"Name": "pProduct", "Value": "${Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableMonthly', 1).title}"},
                                {"Name": "pPeriod", "Value": "${v('systemValueGlobalSegmentedControlRelativeYearValue')}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${v('rocheBPSPProductsReceiverSelector.value')}"},
                                {"Name": "pSplitMode", "Value": "Monthly"},
                                {"Name": "pSplitMethod", "Value": "Equal"},
                                {"Name": "pLineItem", "Value": "${Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"}
                        ]
                    }`

        }
    },
    rocheBPSPProductsCheckoutDistributionPopupMonthlyPhasingButton: {
        launch: {

            url: (db) => `/api/v1/Processes('MODULE - UI - Sales Plan by Product Split')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => `{
                        "Parameters": [
                                {"Name": "pValue", "Value": "${Utils.parseNumber(Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableMonthly', 3).title)}"},
                                {"Name": "pProduct", "Value": "${Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableMonthly', 1).title}"},
                                {"Name": "pPeriod", "Value": "${v('systemValueGlobalSegmentedControlRelativeYearValue')}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${v('rocheBPSPProductsReceiverSelector.value')}"},
                                {"Name": "pSplitMode", "Value": "Monthly"},
                                {"Name": "pSplitMethod", "Value": "MonthlyPhasing"},
                                {"Name": "pLineItem", "Value": "${Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"}
                        ]
                    }`

        }
    },
    'rocheBPSPProductsCheckoutGridTableMonthlyHeaderText-04': {
        init: {
            execute: (db) => {
                return {
                    title: db.systemValueGlobalSegmentedControlRelativeYearValue,
                    body: Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)
                };
            }
        }
    },
    rocheBPSPProductsCheckoutGridTableMonthly: {
        perform: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Sales Plan by Product Split')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db, cell, widgetValue, row, col) => {
                return `{
                        "Parameters": [
                                {"Name": "pValue", "Value": "${Utils.parseNumber(v('rocheBPSPProductsCheckoutGridTableMonthly.value'))}"},
                                {"Name": "pProduct", "Value": "${Utils.getGridTableCell('rocheBPSPProductsCheckoutGridTableMonthly', 1).title}"},
                                {"Name": "pPeriod", "Value": "${Utils.getGridTableCurrentCell('rocheBPSPProductsCheckoutGridTableMonthly').members[6].Name}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}"},
                                {"Name": "pReceiver", "Value": "${v('rocheBPSPProductsReceiverSelector.value')}"},
                                {"Name": "pSplitMode", "Value": "Default"},
                                {"Name": "pLineItem", "Value": "${Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)}"}
                        ]
                    }`
            }
        },
        pastelast: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                Utils.setWidgetValueIfNotExist('systemValueCheckoutGridTableMonthlyPatchedProducts', []);
                v('systemValueCheckoutGridTableMonthlyPatchedProducts').push(v('rocheBPSPProductsCheckoutGridTableMonthly.cellData')[row][1].title);
                return `[
                    {"Ordinal": ${widgetValue.ordinal},"Value": \"${Utils.parseNumber(widgetValue.value)}\"}
                ]`;
            }
        },
        paste: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                Utils.setWidgetValueIfNotExist('systemValueCheckoutGridTableMonthlyPatchedProducts', []);
                v('systemValueCheckoutGridTableMonthlyPatchedProducts').push(v('rocheBPSPProductsCheckoutGridTableMonthly.cellData')[row][1].title);
                return `[
                    {"Ordinal": ${widgetValue.ordinal},"Value": \"${Utils.parseNumber(widgetValue.value)}\"}
                ]`;
            }
        },
        write: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                Utils.setWidgetValueIfNotExist('systemValueCheckoutGridTableMonthlyPatchedProducts', []);
                v('systemValueCheckoutGridTableMonthlyPatchedProducts').push(v('rocheBPSPProductsCheckoutGridTableMonthly.cellData')[row][1].title);
                return `[
                    {"Ordinal": ${widgetValue.ordinal},"Value": \"${Utils.parseNumber(widgetValue.value)}\"}
                ]`;
            }
        },
        request: {
            url: (db) => `/api/v1/Cubes('Sales Plan by Product')/tm1.Update`,
            type: 'POST',
            body: (db) => {

                let touchedProducts = Utils.filterUnique(v('systemValueCheckoutGridTableMonthlyPatchedProducts')),
                    cellTemplates = [];

                let cellTemplate = (productCode) => `
                    {
                        "Cells": [
                            {
                                "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${v('systemValueGlobalVersionKey')}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueGlobalSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}')",
                                    "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsReceiverSelector', 'key')}')",
                                    "Dimensions('LineItems Sales Plan by Product')/Hierarchies('LineItems Sales Plan by Product')/Elements('${Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)}')",
                                    "Dimensions('Measures Sales Plan by Product')/Hierarchies('Measures Sales Plan by Product')/Elements('Monthly Split Type')"
                                ]
                            },
                        ],
                         "Value": "M"
                    }
                    `;

                for (const t of touchedProducts) {
                    cellTemplates.push(cellTemplate(t));
                }

                Utils.setWidgetValue('systemValueCheckoutGridTableMonthlyPatchedProducts', []);

                return `
                    [
                    ${cellTemplates.join(',')}
                ]`;
            }
        },
        initCondition: (db) => {
            return Widgets['systemValueSegmentedControlPeriodUnit'] === 'Monthly'
                && v('rocheBPSPProductsTypeSegmentedControl.value') !== false
                && v('systemValueProductsTypeIsOk') == true;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Consolidated,RuleDerived,Updateable;$expand=Members($select=Name))`,
            type: 'POST',
            body: (db) => `
            {
                "MDX" : 
                    "With
                        --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion
                             Set DefaultProductRows AS
                             {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[PL1]}, ALL, RECURSIVE )}
                        --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                             Set FocusedOnProductRows AS
                             {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${db.systemValueCheckoutProduct}]}, ALL, RECURSIVE )}
                        --Decide which rowSet to use
                             MEMBER [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused] AS 
                             IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                        -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)     
                             MEMBER [Periods].[Periods].[ProductName] as 
                                    [Products].[BPSP Budget].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description')
                             MEMBER [Periods].[Periods].[ProductCaption] as 
                                    [Products].[BPSP Budget].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
                             MEMBER [Periods].[Periods].[ProductLevel] as 
                                    [Products].[BPSP Budget].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name')
                             MEMBER [Periods].[Periods].[UILevelFormat] as 
                                    [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} UI Level Format')
                             MEMBER [Periods].[Periods].[zUI CheckOutFlag] as
                                    [Sales Plan by Product].([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI CheckOutFlag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value])
                             MEMBER [Periods].[Periods].[HasComment] as
                                    [Sales Plan by Product].([Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Comment Flag])
                             MEMBER [Periods].[Periods].[zUI CheckOutUser] as 
                                    [Sales Plan by Product].([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedBy])
                             MEMBER [Periods].[Periods].[zUI CheckOutDateTime] as 
                                    [Sales Plan by Product].([Periods].[Periods].[2021],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[zUI Checkout Flag],[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedDateTime])
                             MEMBER [Periods].[Periods].[zUI Split Flag] as 
                                    [Sales Plan by Product].([Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}],[LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)}],
                                    [Measures Sales Plan by Product].[Measures Sales Plan by Product].[Monthly Split Type])
                        -- Create the first 5 column with information
                             Set FixColumns AS
                             {[Periods].[Periods].[ProductName],
                              [Periods].[Periods].[ProductCaption],
                              [Periods].[Periods].[ProductLevel],
                              [Periods].[Periods].[zUI CheckOutFlag],
                              [Periods].[Periods].[zUI CheckOutUser],
                              [Periods].[Periods].[zUI CheckOutDateTime],
                              [Periods].[Periods].[zUI Split Flag]}
                             Set Comment AS
                             {([Periods].[Periods].[HasComment])}
                        -- query
                        SELECT 
                        --Columns
                           {Union({Union(Union(FixColumns,{DRILLDOWNMEMBER({[Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}]},{[Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}]})},All),{Comment},All)},
                           {[Periods].[Periods].[UILevelFormat]})}
                           PROPERTIES [Periods].[Periods].[Caption] ON COLUMNS , 
                        -- rows
                          {StrToSet([Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused])}
                          PROPERTIES [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption] ON ROWS 
                        FROM [Sales Plan by Product] 
                        WHERE 
                          (
                           [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[${Repository.rocheBPSPProducts.getProductsTypeSegmentedControlValue(db)}],
                       [Versions].[Versions].[${v('systemValueGlobalVersionKey')}],
                       [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                       [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                           [Measures Sales Plan by Product].[Measures Sales Plan by Product].[Value]
                          )
                        "
            }
       `,
            parsingControl: {
                type: 'matrix',
                length: 22,
                query: [
                    (r, x) => {
                        let result, pl, uiLevel = r.Cells[x + 21].FormattedValue;
                        Widgets['systemValueMonthlyRelativeIndex'] = x;

                        pl = r.Cells[x + 2].FormattedValue.replace('a', '');
                        result = {
                            label: r.Cells[x].FormattedValue,
                            skin: 'gridtable_checkout_hierarchy_bpsp_' + uiLevel,
                            cellVisible: true,
                            icon: 'icon-badge',
                            members: r.Cells[x].Members,
                            productLevel: pl,
                            hasComment: r.Cells[x + 20].FormattedValue === ''
                        };
                        return result;
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: '',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue.replace('PL', ''),
                            cellSkin: '',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 5;
                        return {
                            title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: 'readonly_bpsp',
                            cellVisible: true,
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members
                        };
                    },
                    (r, x) => {
                        let icon = v('systemValueProductsCheckotSplitIcons')[r.Cells[x + 6].FormattedValue];

                        let cell = {
                            icon: !icon ? 'icon-circle' : icon,
                            cellSkin: '',
                            cellVisible: true,
                            ordinal: r.Cells[x + 6].Ordinal,
                            skin: 'products_gd_distribution_icon_bpsp'
                        };
                        if (!icon) {
                            cell['iconColor'] = 'black';
                            cell['titleFontWeight'] = 'bold';
                        }
                        if (cell.icon === 'icon-distribution-equal') {
                            cell.iconFontSize = 12;
                        }
                        return cell;
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPProductsCheckout.getProductsCheckoutGridTableMonthlyCell(Widgets['systemValueMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                        return {
                            cellSkin: '',
                            icon: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue === '' ? 'icon-comment-off' : 'icon-comment-on',
                            iconColor: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue === '' ? '#C5C6C6' : '#0066cc',
                            members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members,
                            hasComment: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue !== ''
                        };
                    }
                ]
            }
        }
    },
    rocheBPSPProductsCheckoutColumnSelectorPopupDropBox: {
        reference: 'rocheBPSPProductsColumnSelectorPopupDropBox'
    },
    rocheBPSPProductsCheckoutGridRow1Cell9Button: {
        reference: 'rocheBPSPProductsGridRow1Cell9Button'
    },
    rocheBPSPProductsCheckoutCommentShowGridTable: {
        initCondition: (db) => {
            return Repository.rocheBPSPProducts.initConditionDependingOnCheckoutYearlyMonthly(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsCheckoutGridTableYearly' : 'rocheBPSPProductsCheckoutGridTableMonthly';
                let productCode = Utils.getGridTableCell(g, 1).title,
                    version = v('systemValueGlobalVersionKey');
                return `{"MDX":"
                    SELECT 
                    {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Comment]}
                    PROPERTIES  [Measures Sales Plan by Product]. [Measures Sales Plan by Product].[Caption]
                    ON COLUMNS , 
                    {[Products].[BPSP Budget].[${productCode}]} PROPERTIES [Products].[BPSP Budget].[Caption]
                    ON ROWS 
                    FROM [Sales Plan by Product] 
                    WHERE 
                    ([Versions].[Versions].[${version}],
                    [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                    [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                    [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],
                    [Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}])
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 1,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue,
                        }
                    }]
            }
        }
    },
    rocheBPSPProductsCheckoutCommentShowGridTableSource: {
        initCondition: (db) => {
            return Repository.rocheBPSPProducts.initConditionDependingOnCheckoutYearlyMonthly(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsCheckoutGridTableYearly' : 'rocheBPSPProductsCheckoutGridTableMonthly';
                let productCode = Utils.getGridTableCell(g, 1).title,
                    version = v('systemValueGlobalVersionKey');
                return `{"MDX":"
                        SELECT 
                            {{[Measures Sales Plan by Product].[Measures Sales Plan by Product].[CommentSource]},
                            {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedBy]},
                            {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedDateTime]}}
                            
                            PROPERTIES  [Measures Sales Plan by Product]. [Measures Sales Plan by Product].[Caption]
                        ON COLUMNS , 
                            {[Products].[BPSP Budget].[${productCode}]} 
                            PROPERTIES [Products].[BPSP Budget].[Caption] 
                        ON ROWS 
                        FROM [Sales Plan by Product] 
                        WHERE 
                            ([Versions].[Versions].[${version}],
                            [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                            [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                            [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],
                            [Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}])
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 3,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue + '<br/><div style=\"margin-top:20px; float: left; font-size: 10px;  ";  >' + 'Edited by '
                                + '</div>' + '<div style=\"font-size:12px; font-weight: bold; margin-top:18px; margin-left: 3px; float: left;";  >'
                                + r.Cells[x + 1].FormattedValue + '</div>' + '<div style=\"font-size:10px;color:#B1B3B3;margin-top:20px;margin-left: 5px; float: left; \" >'
                                + r.Cells[x + 2].FormattedValue + '</div>',
                        }
                    }


                ]
            }
        }
    },
    rocheBPSPProductsCheckoutCommentEditGridRow2CommentInput: {
        init: {
            execute: (db) => {
                let l = v('rocheBPSPProductsCheckoutCommentShowGridTable.cellData.length'), r = {value: ''};
                if (l !== false && l !== 0) {
                    r.value = v('rocheBPSPProductsCheckoutCommentShowGridTable.cellData')[0][0].title;
                }
                return r;
            }
        }
    },
    rocheBPSPProductsCheckoutCommentEditGridRow3TextInput: {
        init: {
            execute: (db) => {
                let l = v('rocheBPSPProductsCheckoutCommentShowGridTableSource.cellData.length'), r = {value: ''};
                if (l !== false && l !== 0) {
                    r.value = v('rocheBPSPProductsCheckoutCommentShowGridTableSource.cellData')[0][0].title.split('<br/>')[0];
                }
                return r;
            }
        }
    },
    rocheBPSPProductsCheckoutCommentEditControlPanelSaveButton: {
        launch: {
            url: (db) => `/api/v1/Cubes('Sales Plan by Product')/tm1.Update`,
            type: 'POST',
            body: (db) => {
                let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsCheckoutGridTableYearly' : 'rocheBPSPProductsCheckoutGridTableMonthly';
                let productCode = Utils.getGridTableCell(g, 1).title,
                    version = v('systemValueGlobalVersionKey');
                return `
                [
                    {
                        "Cells": [
                            {
                                "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueGlobalSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}')",
                                    "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPProductsReceiverSelector.value')}')",
                                    "Dimensions('LineItems Sales Plan by Product')/Hierarchies('LineItems Sales Plan by Product')/Elements('Final Sales Plan')",
                                    "Dimensions('Measures Sales Plan by Product')/Hierarchies('Measures Sales Plan by Product')/Elements('EditedDateTime')"
                                ]
                            },
                        ],
                         "Value": "${Utils.getFormattedDate(new Date(), '.', true)}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                   "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                   "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueGlobalSegmentedControlRelativeYearValue}')",
                                   "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}')",
                                   "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                   "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPProductsReceiverSelector.value')}')",
                                   "Dimensions('LineItems Sales Plan by Product')/Hierarchies('LineItems Sales Plan by Product')/Elements('Final Sales Plan')",
                                   "Dimensions('Measures Sales Plan by Product')/Hierarchies('Measures Sales Plan by Product')/Elements('EditedBy')"
                               ]
                            },
                        ],
                        "Value": "${Widgets['activeUserName']}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                   "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                   "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueGlobalSegmentedControlRelativeYearValue}')",
                                   "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}')",
                                   "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                   "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPProductsReceiverSelector.value')}')",
                                   "Dimensions('LineItems Sales Plan by Product')/Hierarchies('LineItems Sales Plan by Product')/Elements('Final Sales Plan')",
                                   "Dimensions('Measures Sales Plan by Product')/Hierarchies('Measures Sales Plan by Product')/Elements('CommentSource')"
                               ]
                            },
                        ],
                        "Value": "${v('rocheBPSPProductsCheckoutCommentEditGridRow3TextInput.value') ? v('rocheBPSPProductsCheckoutCommentEditGridRow3TextInput.value') : ''}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                   "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                   "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueGlobalSegmentedControlRelativeYearValue}')",
                                   "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}')",
                                   "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                   "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPProductsReceiverSelector.value')}')",
                                   "Dimensions('LineItems Sales Plan by Product')/Hierarchies('LineItems Sales Plan by Product')/Elements('Final Sales Plan')",
                                   "Dimensions('Measures Sales Plan by Product')/Hierarchies('Measures Sales Plan by Product')/Elements('Comment')"
                               ]
                            },
                        ],
                        "Value": "${v('rocheBPSPProductsCheckoutCommentEditGridRow2CommentInput.value') ? v('rocheBPSPProductsCheckoutCommentEditGridRow2CommentInput.value') : ''}"
                    }
                ]
                `;
            }
        }
    },
    // versioning
    rocheBPSPProductsCheckoutGridVersionSelector: {
        init: {
            execute: (db) => {
                return {
                    items: [{
                        name: v('systemValueGlobalVersion'),
                        key: v('systemValueGlobalVersionKey'),
                        on: true
                    }],
                    editable: false
                };
            }
        }
    },
    rocheBPSPProductsCheckoutValueSegmentedControl: {
        init: {
            execute: (db) => {
                return {
                    data: [
                        {
                            value: 'VALUE',
                            selected: v('rocheBPSPProductsCheckoutValueSegmentedControl.selected') === 'VALUE' || v('rocheBPSPProductsCheckoutValueSegmentedControl.selected') === false
                        },
                        {
                            selected: v('rocheBPSPProductsCheckoutValueSegmentedControl.selected') === 'PercentVariance',
                            value: 'PercentVariance'
                        },
                        {
                            selected: v('rocheBPSPProductsCheckoutValueSegmentedControl.selected') === 'AbsoluteVariance',
                            value: 'AbsoluteVariance'
                        }
                    ]
                };
            }
        },
        switch: {
            execute: (db) => {
                Api.forceRefresh('rocheBPSPProductsCheckoutGridTableYearly');
            }
        }
    },
    rocheBPSPProductsCheckoutGridLineItemSelector: {
        reference: 'rocheBPSPProductsGridLineItemSelector',
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueLineitem', v('rocheBPSPProductsCheckoutGridLineItemSelector.value'));
                Api.forceRefresh('rocheBPSPProductsCheckoutGridTableYearly');
            }
        },
    },
    rocheBPSPProductsCheckoutGridVersionSelectorTwo: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersionCompareByColumn', v('rocheBPSPProductsCheckoutGridVersionSelectorTwo.value'));
                Api.forceRefresh('rocheBPSPProductsCheckoutGridTableYearly');
            }
        },
        reference: 'rocheBPSPProductsGridVersionSelectorTwo'
    },
    rocheBPSProductsCheckoutVersioningColumnButton: {
        reference: 'rocheBPSProductsCheckoutVersioningCompareText',
        show: [
            'rocheBPSProductsCheckoutVersioningExitButton',
            'rocheBPSProductsCheckoutVersioningButtonGrey',
            'rocheBPSPProductsCheckoutGridVersionSelectorTwo',
            'rocheBPSPProductsCheckoutGridLineItemSelector',
            'rocheBPSPProductsCheckoutValueSegmentedControl'

        ],
        hide: [
            'rocheBPSProductsCheckoutVersioningColumnButton',
            'rocheBPSProductsCheckoutVersioningCompareText',
            'rocheBPSProductsCheckoutVersioningRowButton',
            'rocheBPSPProductsCheckoutGridRow2Cell1Button',
            'rocheBPSPProductsCheckoutGridRow2Cell2Button',
            'rocheBPSPProductsCheckoutGridRow2Cell3Button',
            'rocheBPSPProductsYearSegmentedControl',
            'rocheBPSPProductsCheckoutPeriodUnitSegmentedControl'

        ],
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCompareBy', 'Column');
                Api.showWidgets(Repository.rocheBPSProductsCheckoutVersioningColumnButton.show);
                Api.hideWidgets(Repository.rocheBPSProductsCheckoutVersioningColumnButton.hide);
                Api.forceRefresh('rocheBPSPProductsCheckoutGridTableYearly');
            }
        }
    },
    rocheBPSProductsCheckoutVersioningExitButton: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCompareBy', 'None');
                Api.showWidgets(
                    [
                        'rocheBPSProductsCheckoutVersioningColumnButton',
                        'rocheBPSPProductsCheckoutGridLineItemSelector'
                    ].concat(
                        Repository.rocheBPSProductsCheckoutVersioningColumnButton.hide
                    )
                );
                Api.hideWidgets(Repository.rocheBPSProductsCheckoutVersioningColumnButton.show);
                Api.forceRefresh('rocheBPSPProductsCheckoutGridTableYearly');
            }
        }
    },
    rocheBPSProductsCheckoutVersioningCompareText: {
        init: {
            execute: () => {
                return {visible: v('systemValueSegmentedControlPeriodUnit') === 'Yearly'}
            }
        }
    },
    rocheBPSPProductsCheckoutCompareByRowPopupGridTable: {
        initCondition: (db) => {
            return Repository.rocheBPSPProductsCheckout.initCondition(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                let g = 'rocheBPSPProductsCheckoutGridTableYearly';
                let searchString = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPProductsCheckoutCompareByRowPopupCell1SearchBox')) {
                    searchString = v('rocheBPSPProductsCheckoutCompareByRowPopupCell1SearchBox.value').toUpperCase()
                }
                return v(g + '.cellData').filter(e => e[0].label.toUpperCase().includes(searchString)).map(e => {
                    return [{
                        label: e[0].label,
                        skin: 'gridtable_hierarchy_compare_byrow_bpsp_' + e[0].uiLevel,
                        productCode: e[1].title
                    }];
                });
            }
        },
        launch: {
            execute: (db, cellData) => {
                Repository.rocheBPSPProductsCheckoutGridTableYearly.setCompareModeToRow(cellData);
                Utils.setWidgetValue('systemValueProductCheckedOutCompareByRowSelectedProductCode', cellData.productCode);
            }
        }
    },
    rocheBPSProductsCheckoutVersioningRowButton: {
        reference: 'rocheBPSProductsCheckoutVersioningCompareText',
        launch: {
            execute: (db) => {

            }
        }
    },
    rocheBPSPProductsCheckoutCheckoutPopupVersionCompareButton: {
        launch: {
            execute: (db) => {

            }
        }
    },
    //end versioning

    //end product checkout
    rocheBPSPMainGridRow1Cell5Button: {
        initCondition: (db) => {
            return v('activeUserName');
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPCustomersGridRow1Cell5Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPSettingsGridRow1Cell5Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPProductsCommentShowGridTable: {
        initCondition: (db) => {
            return Repository.rocheBPSPProducts.initConditionDependingOnYearlyMonthly(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly';
                let productCode = Utils.getGridTableCell(g, 1).title,
                    version = v('systemValueGlobalVersionKey');
                return `{"MDX":"
                    SELECT 
                    {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[Comment]}
                    PROPERTIES  [Measures Sales Plan by Product]. [Measures Sales Plan by Product].[Caption]
                    ON COLUMNS , 
                    {[Products].[BPSP Budget].[${productCode}]} PROPERTIES [Products].[BPSP Budget].[Caption]
                    ON ROWS 
                    FROM [Sales Plan by Product] 
                    WHERE 
                    ([Versions].[Versions].[${version}],
                    [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                    [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                    [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],
                    [Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}])
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 1,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue,
                        }
                    }]
            }
        }
    },
    rocheBPSPProductsCommentShowGridTableSource: {
        initCondition: (db) => {
            return Repository.rocheBPSPProducts.initConditionDependingOnYearlyMonthly(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly';
                let productCode = Utils.getGridTableCell(g, 1).title,
                    version = v('systemValueGlobalVersionKey');
                return `{"MDX":"
                        SELECT 
                            {{[Measures Sales Plan by Product].[Measures Sales Plan by Product].[CommentSource]},
                            {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedBy]},
                            {[Measures Sales Plan by Product].[Measures Sales Plan by Product].[EditedDateTime]}}
                            
                            PROPERTIES  [Measures Sales Plan by Product]. [Measures Sales Plan by Product].[Caption]
                        ON COLUMNS , 
                            {[Products].[BPSP Budget].[${productCode}]} 
                            PROPERTIES [Products].[BPSP Budget].[Caption] 
                        ON ROWS 
                        FROM [Sales Plan by Product] 
                        WHERE 
                            ([Versions].[Versions].[${version}],
                            [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}],
                            [Receivers].[Receivers].[${v('rocheBPSPProductsReceiverSelector.value')}],
                            [LineItems Sales Plan by Product].[LineItems Sales Plan by Product].[Final Sales Plan],
                            [Periods].[Periods].[${db.systemValueGlobalSegmentedControlRelativeYearValue}])
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 3,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue + '<br/><div style=\"margin-top:20px; float: left; font-size: 10px;  ";  >'
                                + 'Edited by ' + '</div>' + '<div style=\"font-size:12px; font-weight: bold; margin-top:18px; margin-left: 3px; float: left;";  >'
                                + r.Cells[x + 1].FormattedValue + '</div>' + '<div style=\"font-size:10px;color:#B1B3B3;margin-top:20px;margin-left: 5px; float: left; \" >'
                                + r.Cells[x + 2].FormattedValue + '</div>',
                        }
                    }


                ]
            }
        }
    },
    rocheBPSPProductsCommentEditGridRow2CommentInput: {
        init: {
            execute: (db) => {
                let l = v('rocheBPSPProductsCommentShowGridTable.cellData.length'), r = {value: ''};
                if (l !== false && l !== 0) {
                    r.value = v('rocheBPSPProductsCommentShowGridTable.cellData')[0][0].title;
                }
                return r;
            }
        }
    },
    rocheBPSPProductsCommentEditGridRow3TextInput: {
        init: {
            execute: (db) => {
                let l = v('rocheBPSPProductsCommentShowGridTableSource.cellData.length'), r = {value: ''};
                if (l !== false && l !== 0) {
                    r.value = v('rocheBPSPProductsCommentShowGridTableSource.cellData')[0][0].title.split('<br/>')[0];
                }
                return r;
            }
        }
    },
    rocheBPSPProductsCommentEditControlPanelSaveButton: {
        launch: {
            url: (db) => `/api/v1/Cubes('Sales Plan by Product')/tm1.Update`,
            type: 'POST',
            body: (db) => {
                let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsGridTableYearly' : 'rocheBPSPProductsGridTableMonthly';
                let productCode = Utils.getGridTableCell(g, 1).title,
                    version = v('systemValueGlobalVersionKey');
                return `
                [
                    {
                        "Cells": [
                            {
                                "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueGlobalSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}')",
                                    "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPProductsReceiverSelector.value')}')",
                                    "Dimensions('LineItems Sales Plan by Product')/Hierarchies('LineItems Sales Plan by Product')/Elements('Final Sales Plan')",
                                    "Dimensions('Measures Sales Plan by Product')/Hierarchies('Measures Sales Plan by Product')/Elements('EditedDateTime')"
                                ]
                            },
                        ],
                         "Value": "${Utils.getFormattedDate(new Date(), '.', true)}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                   "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                   "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueGlobalSegmentedControlRelativeYearValue}')",
                                   "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}')",
                                   "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                   "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPProductsReceiverSelector.value')}')",
                                   "Dimensions('LineItems Sales Plan by Product')/Hierarchies('LineItems Sales Plan by Product')/Elements('Final Sales Plan')",
                                   "Dimensions('Measures Sales Plan by Product')/Hierarchies('Measures Sales Plan by Product')/Elements('EditedBy')"
                               ]
                            },
                        ],
                        "Value": "${Widgets['activeUserName']}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                   "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                   "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueGlobalSegmentedControlRelativeYearValue}')",
                                   "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}')",
                                   "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                   "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPProductsReceiverSelector.value')}')",
                                   "Dimensions('LineItems Sales Plan by Product')/Hierarchies('LineItems Sales Plan by Product')/Elements('Final Sales Plan')",
                                   "Dimensions('Measures Sales Plan by Product')/Hierarchies('Measures Sales Plan by Product')/Elements('CommentSource')"
                               ]
                            },
                        ],
                        "Value": "${v('rocheBPSPProductsCommentEditGridRow3TextInput.value') ? v('rocheBPSPProductsCommentEditGridRow3TextInput.value') : ''}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                   "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                   "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueGlobalSegmentedControlRelativeYearValue}')",
                                   "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductsCompanySelector', 'key')}')",
                                   "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                   "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPProductsReceiverSelector.value')}')",
                                   "Dimensions('LineItems Sales Plan by Product')/Hierarchies('LineItems Sales Plan by Product')/Elements('Final Sales Plan')",
                                   "Dimensions('Measures Sales Plan by Product')/Hierarchies('Measures Sales Plan by Product')/Elements('Comment')"
                               ]
                            },
                        ],
                        "Value": "${v('rocheBPSPProductsCommentEditGridRow2CommentInput.value') ? v('rocheBPSPProductsCommentEditGridRow2CommentInput.value') : ''}"
                    }
                ]
                `;
            }
        }
    },
    rocheBPSPMaterialGridRow1Cell3Button: {
        init: {
            execute: (db) => {
                return {label: Widgets['activeUserName']};
            }
        }
    },
    rocheBPSPMaterialPageInit: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT 
                        {[Versions].[Versions].[Live]} 
                    PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                    NON EMPTY 
                        {[Measures Company Information].[Measures Company Information].[Products Hierarchy]} 
                        PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON ROWS 
                    FROM [Company Information] 
                WHERE 
                (
                    [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}]
                )
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            Utils.setWidgetValue('systemValueGlobalCompanyProductPlanVersion', r.Cells[0].FormattedValue);
                            return true;
                        }
                    }
            }
        }
    },
    rocheBPSPMaterialGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT 
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]} 
                    ON COLUMNS , 
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}  
                    ON ROWS 
                    FROM [}ElementAttributes_Companies] 
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPMaterialGridRow2Cell1SegmentedControl: {
        init: {
            execute: (db) => {
                let s = parseInt(Widgets['systemValueGlobalStartingPlanYear']),
                    sr = Widgets['systemValueGlobalSegmentedControlRelativeYear'];
                return [
                    {label: 'By Product Group'},
                    {label: 'By IP Node'},
                ];
            }
        },

    },
    rocheBPSPAddMaterialGridRow2Cell1SegmentedControl: {
        init: {
            execute: (db) => {
                let s = parseInt(Widgets['systemValueGlobalStartingPlanYear']),
                    sr = Widgets['systemValueGlobalSegmentedControlRelativeYear'];
                return [
                    {label: 'Import List'},
                    {label: 'Search'},
                ];
            }
        },
    },
    rocheBPSPAddMaterialGridRow1Cell3Button: {
        init: {
            execute: (db) => {
                return {label: Widgets['activeUserName']};
            }
        }
    },

    rocheBPSPipPlanningGridRow1Cell9Button: {
        init: {
            execute: (db) => {
                return {label: Widgets['activeUserName']};
            }
        }
    },
    rocheBPSPipPlanningYearSegmentedControl: {
        init: {
            execute: (db) => {
                let s = parseInt(Widgets['systemValueGlobalStartingPlanYear']),
                    sr = Utils.setWidgetValueIfNotExist('systemValueIpPlanningSegmentedControlRelativeYear', 'Y0');
                Utils.setWidgetValueIfNotExist('systemValueIpPlanningSegmentedControlRelativeYearValue', s);
                return [
                    {label: s, selected: 'Y0' === sr},
                    {label: ++s, selected: 'Y1' === sr}
                ];
            }
        },
        switch: {
            execute: (db) => {
                Widgets['systemValueIpPlanningSegmentedControlRelativeYear'] = v('rocheBPSPipPlanningYearSegmentedControl.value');
                Widgets['systemValueIpPlanningSegmentedControlRelativeYearValue'] = v('rocheBPSPipPlanningYearSegmentedControl.selected');
            }
        }
    },

    rocheBPSPipPlanningGridRow2Cell1SegmentedControl: {
        init: {
            execute: (db) => {
                return [
                    {
                        label: 'Cash Sales',
                        selected: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected') === 'Cash Sales' || v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected') === false
                    },
                    {
                        label: 'Lease',
                        selected: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected') === 'Lease'
                    },
                    {
                        label: 'Return',
                        selected: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected') === 'Return'
                    },
                ];
            }
        }
    },
    rocheBPSPipPlanningGridRow2Cell2SegmentedControl: {
        init: {
            execute: (db) => {
                return [
                    {
                        label: 'New',
                        selected: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlTwo.selected') === 'New' || v('rocheBPSPIpPlanningCheckoutGridSegmentedControlTwo.selected') === false
                    },
                    {
                        label: 'Used',
                        selected: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlTwo.selected') === 'Used'
                    },
                ];
            }
        },
    },
    rocheBPSPipPlanningGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
           WITH MEMBER [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Lock IP Planning] AS
           [Company Information].([Versions].[Versions].[Live],[Measures Company Information].[Measures Company Information].[Lock IP Planning])
             SELECT
           {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name]
           ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]
           ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Lock IP Planning]}
             ON COLUMNS ,
           {TM1SubsetToSet([Companies].[Companies], 'All Active')}
              ON ROWS
              FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 3) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    locked: r.Cells[i + 2].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                    //on: '1391' === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPipPlanningPageInit: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPipPlanningGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT 
                        {[Versions].[Versions].[Live]} 
                    PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                    NON EMPTY 
                        {[Measures Company Information].[Measures Company Information].[Products Hierarchy]} 
                        PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON ROWS 
                    FROM [Company Information] 
                WHERE 
                (
                    [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}]
                )
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            Utils.setWidgetValue('systemValueGlobalCompanyProductPlanVersion', r.Cells[0].FormattedValue);
                            return true;
                        }
                    }
            }
        },

    },
    rocheBPSPIpPlanningCheckoutWarningContactEditorButton: {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPipPlanningGridTableMonthly');
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => {
                let g = 'rocheBPSPipPlanningGridTableMonthly',
                    c = Utils.getGridTableCell(g, 0), u = c.checkoutUser;
                u = db.activeUserName.split('/')[0] + '/' + u;
                return `
                      {"MDX":
                        "SELECT
                           {[}ElementAttributes_}Clients].[}ElementAttributes_}Clients].[Email]}
                          ON COLUMNS ,
                           {[}Clients].[}Clients].[${u}]}
                          ON ROWS
                        FROM [}ElementAttributes_}Clients]"}
                    `;
            },
            parsingControl: {
                type: 'object',
                query:
                    {
                        url: (r, x) => {
                            return 'mailto:' + r.Cells[0].FormattedValue;
                        }
                    }
            }
        }
    },
    rocheBPSPIpPlanningCheckoutWarningByUserText: {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPipPlanningGridTableMonthly');
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db) => {
                let g = 'rocheBPSPipPlanningGridTableMonthly',
                    c = Utils.getGridTableCell(g, 0), u = c.checkoutUser, d = c.checkedOutAt;
                return {title: `by<b>${u}</b>since<b>${d}</b>`};
            }
        }
    },
    rocheBPSPIpPlanningCheckoutPopupFocusButton: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueIpPlanningFocusedProduct'] = Utils.getGridTableCell('rocheBPSPipPlanningGridTableMonthly', 2).title;
                }
            }
    },
    rocheBPSPIpPlanningNoCheckoutPopupFocusButton: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueIpPlanningFocusedProduct'] = Utils.getGridTableCell('rocheBPSPipPlanningGridTableMonthly', 2).title;
                }
            }
    },

    rocheBPSPipPlanningLockedPlanningPopupFocusButton: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueIpPlanningFocusedProduct'] = Utils.getGridTableCell('rocheBPSPipPlanningGridTableMonthly', 2).title;
                }
            }
    },
    rocheBPSPIpPlanningCheckoutPopupCheckoutButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Materials GridTable Checkout by User')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return `{
                        "Parameters": [
                                {"Name": "pUserID", "Value": "${db.activeUserName}"},
                                {"Name": "pMaterial", "Value": "${Utils.setAndGetGridTableSystemValueByCurrentRow('rocheBPSPipPlanningGridTableMonthly', 2, 'systemValueIpPlanningCheckoutProduct', 'title')}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell3DropBox', 'key')}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"}
                        ]
                    }`
                }
            },
    },
    rocheBPSPIpPlanningCheckoutGridRow2Cell3Button: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Materials GridTable CheckIn by User')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    Utils.setWidgetValue('systemValueBackFromCheckin', true);
                    return `{
                          "Parameters": [
                                  {"Name": "pUserID", "Value": "${db.activeUserName}"},
                                  {"Name": "pMaterial", "Value": "${Widgets['systemValueIpPlanningCheckoutProduct']}"},
                                  {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}"},
                                  {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell3DropBox', 'key')}"},
                                  {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"}
                          ]
                      }`
                }
            },
    },


    rocheBPSPIpPlanningCheckoutGridSegmentedControlOne: {
        init: {
            execute: (db) => {
                return [
                    {
                        label: 'Cash Sales',
                        selected: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected') === 'Cash Sales' || v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected') === false
                    },
                    {
                        label: 'Lease',
                        selected: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected') === 'Lease'
                    },
                    {
                        label: 'Return',
                        selected: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected') === 'Return'
                    },
                ];
            }

        }
    },
    rocheBPSPIpPlanningCheckoutGridSegmentedControlTwo: {
        init: {
            execute: (db) => {
                return [
                    {
                        label: 'New',
                        selected: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlTwo.selected') === 'New' || v('rocheBPSPIpPlanningCheckoutGridSegmentedControlTwo.selected') === false
                    },
                    {
                        label: 'Used',
                        selected: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlTwo.selected') === 'Used'
                    },
                ];

            },
        },
    },

    rocheBPSPIpPlanningCheckoutSegmentedControlUsed: {
        init: {
            execute: (db) => {
                return [
                    {
                        label: 'All',
                        selected: v('rocheBPSPIpPlanningCheckoutSegmentedControlUsed.selected') === 'All' || v('rocheBPSPIpPlanningCheckoutSegmentedControlUsed.selected') === false
                    },
                    {
                        label: 'New',
                        selected: v('rocheBPSPIpPlanningCheckoutSegmentedControlUsed.selected') === 'New'
                    },
                    {
                        label: 'Used',
                        selected: v('rocheBPSPIpPlanningCheckoutSegmentedControlUsed.selected') === 'Used'
                    },
                ];

            },
        },
    },

    rocheBPSPipPlanningGridRow1Cell3DropBox: {
        initCondition: (db) => {
            return v('rocheBPSPipPlanningGridRow1Cell2DropBox.value');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT 
                      {[}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Member description],
                        [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Receiver - Key]} 
                     ON COLUMNS , 
                        {Tm1SubsetToset([Receivers].[Receivers],'zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')} Plan Receivers')}
                     ON ROWS
                    FROM [}ElementAttributes_Receivers] 

            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [];
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: v('rocheBPSPipPlanningGridRow1Cell3DropBox.value') === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPipPlanningGridTableMonthlyHeaderFocusButton:
        {
            init: {
                execute: (db) => {
                    return {
                        visible: db.systemValueIpPlanningFocusedProduct === db.systemValueIpPlanningFocusedProductDefault
                            && !Repository.rocheBPSPipPlanningGridTableMonthly.isCompareByRowMode()
                            && !Repository.rocheBPSPipPlanningGridTableMonthly.isCompareByColumnMode()
                    };
                }
            },
        },
    rocheBPSPipPlanningGridTableMonthlyHeaderReturnFromFocus:
        {
            init: {
                execute: (db) => {
                    return {
                        visible: db.systemValueIpPlanningFocusedProduct !== db.systemValueIpPlanningFocusedProductDefault
                            && !Repository.rocheBPSPipPlanningGridTableMonthly.isCompareByRowMode()
                            && !Repository.rocheBPSPipPlanningGridTableMonthly.isCompareByColumnMode()
                    };
                }
            },
            launch: {
                execute: (db) => {
                    Widgets['systemValueIpPlanningFocusedProduct'] = db.systemValueIpPlanningFocusedProductDefault;
                }
            }
        },
    rocheBPSPipPlanning: {
        getGridTableMonthlyCell: (r, x, inc) => {
            Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + inc;
            let i = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'];
            return {
                title: r.Cells[i].FormattedValue,
                members: r.Cells[i].Members,
                cellSkin: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                year: r.Cells[i].Members[7].Name,
                applyMeasuresToSection: true,
                width: '100%',
                cellWidth: r.Cells[i].Members[7].Name.length === 6 ? '3.75%' : '4%'
            };
        },
        getGridTableMonthlyCellInRowMode: (r, x, inc) => {
            Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + inc;
            let i = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'];
            return {
                title: r.Cells[i].FormattedValue,
                members: r.Cells[i].Members,
                cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                year: r.Cells[i].Members[7].Name,
                applyMeasuresToSection: true,
                width: '100%',
                cellWidth: '8.5%'
            };
        },
        gridTableHeaderLogicInNormalMode: () => {
            let a = Utils.parseNumber(v('systemValueIpPlanningSegmentedControlRelativeYearValue'));
            let b = Utils.parseNumber(v('systemValueGlobalStartingPlanYear'));
            let result = a === b ? 'T0' : 'Plan';
            return result
        },
        getGridTableMonthlyWideCell: (r, x, inc) => {
            Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + inc;
            let i = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'];
            return {
                title: r.Cells[i].FormattedValue,
                members: r.Cells[i].Members,
                cellSkin: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                year: r.Cells[i].Members[7].Name,
                applyMeasuresToSection: true,
                width: '100%',
                cellWidth: '5%'
            };
        },
        getGridTableMonthlyCellInColumnMode: (r, x, inc) => {
            Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + inc;
            let i = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'];
            return {
                title: r.Cells[i].FormattedValue,
                year: r.Cells[i].Members[5].Name,
                contractType: r.Cells[i].Members[6].Name,
                version: r.Cells[i].Members[7].Name,
                applyMeasuresToSection: true,
                width: '100%',
                cellWidth: '4.25%',
                cellSkin: i % 2 === 0 ? 'readonly_bpsp' : 'readonly_blue_bpsp'
            };
        },
        /*
        getCheckoutGridTableMonthlyCell: (r, x, inc) => {
            Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + inc;
            let c = r.Cells[Widgets['systemValueMonthlyRelativeIndex']],
                editable = c.Consolidated === false && c.RuleDerived === false;

            let result = {
                title: c.FormattedValue,
                cellSkin: editable ? '' : 'readonly_bpsp',
                skin: 'monthly_right_bpsp',
                cellVisible: true,
                editable: editable,
                ordinal: c.Ordinal,
                year: c.Members[7].Name,
                members: c.Members,
                applyMeasuresToSection: true,
                width: '100%'
            };
            if (editable) {
                result['titleFontColor'] = '#A05EB5';
            }
            return result;
        },*/
        getFileName: (db) => {
            let s = [];
            s.push(Utils.getFormattedDate(new Date(), '_', true));
            s.push(db.activeUserName);
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'));
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell3DropBox', 'key'));
            s.push(db.systemValueIpPlanningCheckoutProduct);
            return s.join('_').replaceAll(':', '_').replaceAll(' ', '_').replaceAll('/', '_');
        },
        initCondition: () => {
            let l = v('rocheBPSPipPlanningGridTableMonthly.cellData.length');
            return l !== false && l !== 0;
        },

        gridTableHeaderLogic: () => {
            let result;
            result = v('systemValueIpPlanningCompareBy') === 'Column' || v('systemValueIpPlanningCompareBy') === 'Row';
            return result
        },
        headerWithInCompareMode: () => {
            let b = '8.5%';
            if (Repository.rocheBPSPipPlanningGridTableMonthly.isCompareByRowMode()) {
                return b
                    ;
            } else {
                let a = '4.25%';
                return a;
            }
        },

        titleInCompareModeLevelThree: (index) => {
            if (Repository.rocheBPSPipPlanningGridTableMonthly.isCompareByRowMode()) {
                if (index === 4 || index === 8) {
                    let a = v('rocheBPSPipPlanningGridTableMonthly.cellData')[0][index];
                    let b = a.members[5];
                    return b.Name
                } else {
                    return ''
                }
            } else {
                let cell = v('rocheBPSPipPlanningGridTableMonthly.cellData')[0][index];
                return cell.year +
                    '<br/><div style=\"font-size:13px; float: left;margin-left: -55%;margin-top:62.5%;";  >' + 'All' + '</div>';
            }
        },
        titleInCompareModeLevelTwo: (index) => {
            if (Repository.rocheBPSPipPlanningGridTableMonthly.isCompareByRowMode()) {
                if (index === 4 || index === 8) {
                    let a = v('rocheBPSPipPlanningGridTableMonthly.cellData')[0][index];
                    let b = a.members[5];
                    return b.Name
                } else {
                    return ''
                }
            } else {
                let cell = v('rocheBPSPipPlanningGridTableMonthly.cellData')[0][index];
                return cell.contractType;
            }
        },

        titleInCompareModeVersion: (index) => {
            if (Repository.rocheBPSPipPlanningGridTableMonthly.isCompareByRowMode()) {
                index = index - 1
                if (index < 11) {
                    let a = v('rocheBPSPipPlanningGridTableMonthly.cellData')[0][index];
                    let b = a.members[6];
                    return b.Name
                } else {
                    return ''
                }
            } else {
                let x = v('rocheBPSPipPlanningVersionSelector.value');
                let y = v('rocheBPSPipPlanningGridRow2VersionSelectorTwo.value');
                if (index % 2 === 0) {
                    return x
                } else {
                    return y
                }
            }
        },
        headerSkinInCompareModeVersion: (index) => {
            if (Repository.rocheBPSPipPlanningGridTableMonthly.isCompareByRowMode()) {
                if (index === 4 || index === 8) {
                    let b = 'long_border_bpsp';
                    return b
                } else {
                    return ''
                }
            } else {
                if (index === 4 || index === 12) {
                    let b = 'three_level_border_bpsp';
                    return b
                } else if (index % 2 === 0) {
                    return 'long_border_bpsp'
                } else {
                    return ''
                }
            }
        },
    },

    rocheBPSPipPlanningVersionSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPipPlanningGridRow1Cell2DropBox')
            return b
        },
        initDefault: (db) => {
            return []
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', v('rocheBPSPipPlanningVersionSelector.value'))
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningVersionSelector', 'key'))
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {FILTER(
                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                ,[Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}],
                [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion')
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                })
                            }
                            return result
                        },
                        editable: (r, x) => {
                            if (v('systemValueIpPlanningCompareBy') === 'Column') {
                                return false;
                            }
                            if (v('systemValueIpPlanningCompareBy') === 'Row') {
                                return false;
                            }
                            return true;
                        }
                    }
            }
        }
    },

    rocheBPSPipPlanningGridRow2Cell3SegmentedControlUsed: {
        init: {
            execute: (db) => {
                return [
                    {
                        label: 'All',
                        selected: v('rocheBPSPipPlanningGridRow2Cell3SegmentedControlUsed.selected') === 'All' || v('rocheBPSPipPlanningGridRow2Cell3SegmentedControlUsed.selected') === false
                    },
                    {
                        label: 'New',
                        selected: v('rocheBPSPipPlanningGridRow2Cell3SegmentedControlUsed.selected') === 'New'
                    },
                    {
                        label: 'Used',
                        selected: v('rocheBPSPipPlanningGridRow2Cell3SegmentedControlUsed.selected') === 'Used'
                    },
                ];
            }

        }
    },

    rocheBPSPipPlanningValueSegmentedControl: {
        init: {
            execute: (db) => {
                return {
                    data: [
                        {
                            value: 'VALUE',
                            selected: v('rocheBPSPCustomersPlanningValueSegmentedControl.selected') === 'VALUE' || v('rocheBPSPCustomersPlanningValueSegmentedControl.selected') === false
                        },
                        {
                            selected: v('rocheBPSPCustomersPlanningValueSegmentedControl.selected') === 'PercentVariance',
                            value: 'PercentVariance'
                        },
                        {
                            selected: v('rocheBPSPCustomersPlanningValueSegmentedControl.selected') === 'AbsoluteVariance',
                            value: 'AbsoluteVariance'
                        }
                    ]
                };
            }

        }
    },

    rocheBPSPipPlanningGridRow2Cell3ButtonCompareColumn: {
        init: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningCompareBy', 'None');
            }
        },
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningCompareBy', 'Column');
            }
        }
    },

    rocheBPSPipPlanningCompareByRowPopupGridTable_row_0: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningCompareBy', 'Row');
            }
        }
    },

    rocheBPSPIpPlanningCheckoutPopupVersionCompareButton: {
        init: {
            execute: (db) => {
                return {visible: v('systemValueIpPlanningCompareBy') === 'None'};
            }
        },
        launch: {
            execute: (db) => {
                Repository.rocheBPSPipPlanningGridTableMonthly.setCompareModeToRow(Utils.getGridTableCell('rocheBPSPipPlanningGridTableMonthly', 0));
            }
        }
    },

    rocheBPSPipPlanningGridRow2Cell3ButtonExit: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningCompareBy', 'None');
            }
        }
    },
    rocheBPSPipPlanningGridRow2VersionSelectorTwo: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPipPlanningVersionSelector')
            return b;
        },
        initDefault: (db) => {
            return [];
        },

        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersionCompareByColumn', v('rocheBPSPipPlanningGridRow2VersionSelectorTwo.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {EXCEPT(
                    {FILTER(
                        {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                        , [Version Information by Company].([Companies].[Companies].
                        [${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}],
                        [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                    , {[Versions].[Versions].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningVersionSelector', 'key')}]} )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersionCompareByColumn');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue,
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPipPlanningCompareByRowPopupGridTable: {
        initCondition: (db) => {
            return Repository.rocheBPSPipPlanning.initCondition(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                let g = 'rocheBPSPipPlanningGridTableMonthly';
                let searchString = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPipPlanningCompareByRowPopupCell1SearchBox')) {
                    searchString = v('rocheBPSPipPlanningCompareByRowPopupCell1SearchBox.value').toUpperCase()
                }
                return v(g + '.cellData').filter(e => e[0].label.toUpperCase().includes(searchString)).map(e => {
                    return [{
                        label: e[0].label,
                        skin: 'gridtable_hierarchy_compare_byrow_bpsp_' + e[0].uiLevel,
                        materialCode: e[2].title
                    }];
                });
            }
        },
        launch: {
            execute: (db, cellData) => {
                Repository.rocheBPSPipPlanningGridTableMonthly.setCompareModeToRow(cellData);
            }
        }
    },
    rocheBPSPipPlanningGridTableMonthly:
        {
            initCondition: (db) => {
                let b = Utils.isValueExistingAndNotEmpty('rocheBPSPipPlanningGridRow1Cell3DropBox') &&
                    Utils.isValueExistingAndNotEmpty('rocheBPSPipPlanningVersionSelector') &&
                    Utils.isValueExistingAndNotEmpty('rocheBPSPipPlanningGridRow2Cell1SegmentedControl', 'selected') &&
                    Utils.isValueExistingAndNotEmpty('rocheBPSPipPlanningGridRow2Cell2SegmentedControl', 'selected') &&
                    v('systemValueGlobalCompanyProductPlanVersion') !== false && v('systemValueBackFromCheckin') === false;
                Utils.setWidgetValue('systemValueBackFromCheckin', false);
                return b;
            },
            initDefault: (db) => {
                return [];
            },
            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                    type: 'POST',
                    body: (db, widgetId, object) => {
                        if (object.isCompareByColumnMode()) {
                            return object.getCompareByColumnMDX(object, db);
                        }
                        if (object.isCompareByRowMode()) {
                            return object.getCompareByRowMDX(object, db);
                        }
                        return object.getNormalMDX(object, db);
                    },
                    parsingControl: (db, widgetId, object) => {
                        if (object.isCompareByColumnMode()) {
                            return object.getParsingControlCompareByColumn;
                        }
                        if (object.isCompareByRowMode()) {
                            return object.getParsingControlCompareByRow;
                        }
                        return object.parsingControlNormalMode;
                    }
                },
            isCompareByColumnMode() {
                return v('systemValueIpPlanningCompareBy') === 'Column';
            },
            isCompareByRowMode() {
                return v('systemValueIpPlanningCompareBy') === 'Row';
            },
            setCompareModeToRow(cellData) {
                Utils.setWidgetValue('systemValueIpPlanningCompareBy', 'Row');
                Utils.setWidgetValue('systemValueIpPlanningCompareByRowSelectedProductCode', cellData.materialCode);
            },
            getNormalMDX(object, db) {
                let version = v('systemValueGlobalVersionKey'),
                    productPlanVersion = v('systemValueGlobalCompanyProductPlanVersion'), //Budget
                    company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                    segmentedYear = v('systemValueIpPlanningSegmentedControlRelativeYearValue'),  //2021
                    focusedProduct = v('systemValueIpPlanningFocusedProduct'), //PL1 320 systemValueIpPlanningFocusedProduct
                    systemYear = v('systemValueGlobalStartingPlanYear'),
                    yearMinusOne = Utils.parseNumber(v('systemValueIpPlanningSegmentedControlRelativeYearValue')) - 1,
                    receiver = v('rocheBPSPipPlanningGridRow1Cell3DropBox.value'),
                    contractType = v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected'),
                    instrumentTypes = v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')
                ;
                return `{"MDX":"
                                  With
                         Set DefaultProductRows AS
                          {TM1SubsetToSet([Materials].[BPSP ${productPlanVersion} IP], '${company}')}
                    --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                         Set FocusedOnProductRows AS 
                          {Intersect({TM1DRILLDOWNMEMBER({[Materials].[BPSP ${productPlanVersion} IP].[${focusedProduct}]}, ALL, RECURSIVE )},{DefaultProductRows})}
                    --Decide which rowSet to use
                         MEMBER [Materials].[BPSP ${productPlanVersion} IP].[ProductIsFocused] AS 
                         IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                    -- Decide 1st column element
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[FirstColumn] As
                         IIF('${segmentedYear}'='${systemYear}', '([Periods].[Periods].[${yearMinusOne}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Actual Quantity])',
                                            '([Periods].[Periods].[${segmentedYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan])')
                         Set FirstColumn As
                         {StrToSet('{'+[LineItems Sales Plan IP].[LineItems Sales Plan IP].[FirstColumn]+'}')}
                    -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)     
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName] as 
                                [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('BPSP ${productPlanVersion} IP Caption')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode] as 
                                [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('Element')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel] as 
                                [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('Product Level - Name')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[DIS] as 
                                [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('IP DIS Relevant Flag ${productPlanVersion}')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat] as 
                                [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('BPSP ${productPlanVersion} IP UI Level Format')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[HasComment] as
                                [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan],
                                [Measures Sales Plan IP].[Measures Sales Plan IP].[Comment Flag])
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser] as 
                                [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],
                                [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedBy])
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime] as 
                                [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],
                                [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedDateTime])
                    -- Create the first 5 column with information
                         Set FixColumns AS
                         {([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName]),
                          ([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel]),
                          ([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode]),
                          ([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutFlag]),
                          ([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser]),
                          ([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime]),
                          ([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat])}
                         Set FinalColumns AS
                         {([Periods].[Periods].[${segmentedYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[DIS]),
                          ([Periods].[Periods].[${segmentedYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[HasComment])}
                    -- column Tuple Create
                         Set ColumnSelection As
                            Union({FirstColumn},
                            {([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Last Submitted Plan]),
                             ([Periods].[Periods].[${segmentedYear}01],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}02],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}03],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}04],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}05],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}06],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}07],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}08],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}09],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}10],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}11],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}12],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             ([Periods].[Periods].[${segmentedYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                             
                              ([Periods].[Periods].[${segmentedYear} - ${segmentedYear - 1}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                              ([Periods].[Periods].[${segmentedYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Variance Final vs Last Submitted Plan])},All)
                    SELECT 
                         Union(Union({FixColumns},{ColumnSelection},All),{FinalColumns},All)
                      ON COLUMNS , 
                    -- rows
                      {StrToSet([Materials].[BPSP ${productPlanVersion} IP].[ProductIsFocused])} ON ROWS 
                    FROM [Sales Plan IP] 
                    WHERE 
                      (
                       [Versions].[Versions].[${version}],
                       [Measures Sales Plan IP].[Measures Sales Plan IP].[Value],
                       [Receivers].[Receivers].[${receiver}],
                       [Companies].[Companies].[${company}],
                       [Contract Types].[Contract Types].[${contractType}],
                       [Instrument Types].[Instrument Types].[${instrumentTypes}]
                      )                               
                                  "}`;


            },

            getCompareByColumnMDX(object, db) {
                let version = v('systemValueGlobalVersionKey'),
                    productPlanVersion = v('systemValueGlobalCompanyProductPlanVersion'), //Budget
                    company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                    focusedProduct = v('systemValueIpPlanningFocusedProduct'),
                    systemYear = v('systemValueGlobalStartingPlanYear'),
                    systemYearPlusOne = parseInt(v('systemValueGlobalStartingPlanYear')) + 1,
                    receiver = v('rocheBPSPipPlanningGridRow1Cell3DropBox.value'),
                    instrumentTypes = v('rocheBPSPipPlanningGridRow2Cell3SegmentedControlUsed.selected'),
                    versionCompare = Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow2VersionSelectorTwo', 'key'),
                    value = v('rocheBPSPipPlanningValueSegmentedControl.value') === 'VALUE' ? Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow2VersionSelectorTwo', 'key')
                        : v('rocheBPSPipPlanningValueSegmentedControl.value')
                ;
                return `{"MDX":"             
                    With
                    --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion
                         Set DefaultProductRows AS
                          {TM1SubsetToSet([Materials].[BPSP ${productPlanVersion} IP], '${company}')}
                    --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                         Set FocusedOnProductRows AS 
                          {Intersect({TM1DRILLDOWNMEMBER({[Materials].[BPSP ${productPlanVersion} IP].[${focusedProduct}]}, ALL, RECURSIVE )},{DefaultProductRows})}
                    --Decide which rowSet to use
                         MEMBER [Materials].[BPSP ${productPlanVersion} IP].[ProductIsFocused] AS 
                         IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                    -- Lookup Product Attributes and checkout information 
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName] as 
                                [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('BPSP ${productPlanVersion} IP Caption')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode] as 
                                [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('Element')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel] as 
                                [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('Product Level - Name')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[DIS] as 
                                [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('IP DIS Relevant Flag ${productPlanVersion}')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat] as 
                                [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('BPSP ${productPlanVersion} IP UI Level Format')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[HasComment] as
                                [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan],
                                [Measures Sales Plan IP].[Measures Sales Plan IP].[Comment Flag])
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser] as 
                                [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],
                                [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedBy])
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime] as 
                                [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],
                                [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedDateTime])
                    -- Calculated versions for reporting
                        MEMBER [Versions].[Versions].[AbsoluteVariance] AS
                            ([Versions].[Versions].[${versionCompare}] - [Versions].[Versions].[${version}])
                        MEMBER [Versions].[Versions].[PercentVariance] AS
                            ([Versions].[Versions].[${versionCompare}] - [Versions].[Versions].[${version}] )/[Versions].[Versions].[${version}]
                            , FORMAT_STRING='#0.00%'
                    -- Create the fixed information columns
                        Set FixColumns AS
                            {
                            -- Base tuple for fixed info
                            { ([Periods].[Periods].[${systemYear}],[Contract Types].[Contract Types].[Cash Sales],[Versions].[Versions].[${version}]) }
                            *
                            {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutFlag],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat]}
                            }
                        Set FinalColumns AS
                            {
                            { ([Periods].[Periods].[${systemYear}],[Contract Types].[Contract Types].[Cash Sales],[Versions].[Versions].[${version}]) }
                            *
                            {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[DIS]}
                            }
                    -- Create main reporting column set
                        SET ReportColumns AS
                            {
                            {[Periods].[Periods].[${systemYear}],
                            [Periods].[Periods].[${systemYearPlusOne}]}
                            *
                            {TM1DRILLDOWNMEMBER( {[Contract Types].[Contract Types].[All Contract Types]}, All, Recursive)}
                            *
                            {[Versions].[Versions].[${version}],
                            [Versions].[Versions].[${value}]}
                            *
                            {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]}
                            }
                    SELECT
                        {UNION( UNION( {FixColumns}, {ReportColumns}, All), {FinalColumns}, All)}
                        ON COLUMNS ,
                        {StrToSet([Materials].[BPSP ${productPlanVersion} IP].[ProductIsFocused])}
                        ON ROWS
                    FROM [Sales Plan IP] 
                    WHERE 
                      ([Receivers].[Receivers].[${receiver}],
                       [Companies].[Companies].[${company}],
                       [Instrument Types].[Instrument Types].[${instrumentTypes === 'All' || instrumentTypes === false ? 'All Instrument Types' : instrumentTypes}],
                       [Measures Sales Plan IP].[Measures Sales Plan IP].[Value])
                    "}`;

            },

            getCompareByRowMDX(object, db) {
                let version = v('systemValueGlobalVersionKey'),
                    yearPlusOne = Utils.parseNumber(v('systemValueGlobalStartingPlanYear')) + 1,
                    receiver = v('rocheBPSPipPlanningGridRow1Cell3DropBox.value'),
                    instrumentTypes = v('rocheBPSPipPlanningGridRow2Cell3SegmentedControlUsed.selected'),
                    systemYear = v('systemValueGlobalStartingPlanYear'),
                    productPlanVersion = v('systemValueGlobalCompanyProductPlanVersion'), //Budget
                    company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                    focusedProduct = v('systemValueIpPlanningCompareByRowSelectedProductCode'), //focusedProduct = v('systemValueIpPlanningFocusedProduct'),
                    value = v('rocheBPSPipPlanningValueSegmentedControl.value')
                ;
                return ` {
                        "MDX" :"
                With
                -- Comparison query control elements
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[ReportType] AS \\"${value}\\"
                -- Lookup Product Attributes and checkout information
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName] as 
                            [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('BPSP ${productPlanVersion} IP Caption')
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode] as 
                            [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('Element')
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel] as 
                            [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('Product Level - Name')
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[DIS] as 
                            [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('IP DIS Relevant Flag ${productPlanVersion}')
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionCode] AS
                        [Versions].[Versions].CurrentMember.Name
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionName] AS
                        [Version Information by Company].([Versions].[Versions].CurrentMember,[Companies].[Companies].[${company}],
                        [Measures Version Information by Company].[Measures Version Information by Company].[Name])
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionMonth] AS
                        [Version Information by Company].([Versions].[Versions].CurrentMember,[Companies].[Companies].[${company}],
                        [Measures Version Information by Company].[Measures Version Information by Company].[Actuals Month])
                -- Reuse standard PH based formatting
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat] AS
                        IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${version}], \\"01C\\", \\"02C\\")
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionCaption] AS
                        IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${version}],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName] + \\" (\\" + [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionName] + \\")\\",
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionName] + \\" (\\" + [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionMonth] + \\")\\")
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[HasComment] as
                            [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan],
                            [Measures Sales Plan IP].[Measures Sales Plan IP].[Comment Flag])
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser] as 
                            [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],
                            [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedBy])
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime] as 
                            [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],
                            [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedDateTime])
                -- Offset for reporting
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[FirstDataColumn] AS
                             IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${version}], 0, COUNT({CompareColumns}) )
                -- Calcuated measures for variances
                    MEMBER [Measures Sales Plan IP].[Measures Sales Plan IP].[AbsoluteVariance] AS
                        ([Versions].[Versions].CurrentMember,[Measures Sales Plan IP].[Measures Sales Plan IP].[Value])
                        - ([Versions].[Versions].[${version}],[Measures Sales Plan IP].[Measures Sales Plan IP].[Value])
                    MEMBER [Measures Sales Plan IP].[Measures Sales Plan IP].[PercentVariance] AS
                        [Measures Sales Plan IP].[Measures Sales Plan IP].[AbsoluteVariance]/[Measures Sales Plan IP].[Measures Sales Plan IP].[Value]
                        , FORMAT_STRING='#0.00%'
                -- Final aggregation of values for reporting view.
                    MEMBER [Measures Sales Plan IP].[Measures Sales Plan IP].[ReportingMeasure] AS
                        IIF([LineItems Sales Plan IP].[LineItems Sales Plan IP].[ReportType] = \\"AbsoluteVariance\\", \\"[Measures Sales Plan IP].[Measures Sales Plan IP].[AbsoluteVariance]\\",
                            IIF([LineItems Sales Plan IP].[LineItems Sales Plan IP].[ReportType] = \\"PercentVariance\\", \\"[Measures Sales Plan IP].[Measures Sales Plan IP].[PercentVariance]\\",
                            \\"[Measures Sales Plan IP].[Measures Sales Plan IP].[Value]\\"))
                -- Required sets of versions
                    SET ReportVersions AS
                        {EXCEPT( {FILTER(
                            {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                            , [Version Information by Company].([Companies].[Companies].[${company}],
                            [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                            , {[Versions].[Versions].[${version}]} )}
                -- Create the fixed information columns
                    Set FixColumns AS
                        {
                        -- Base tuple for fixed info
                        { ([Periods].[Periods].[${systemYear}],[Contract Types].[Contract Types].[Cash Sales]) }
                        *
                        {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionCode],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionCaption],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutFlag],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[FirstDataColumn]}
                        *
                        {[Measures Sales Plan IP].[Measures Sales Plan IP].[Value]} }
                    Set FinalColumns AS
                        { { ([Periods].[Periods].[${systemYear}],[Contract Types].[Contract Types].[Cash Sales]) }
                        *
                        {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Has Comment]}
                        *
                        {[Measures Sales Plan IP].[Measures Sales Plan IP].[Value]} }
                -- Create main reporting column set
                    SET CompareColumns AS
                        {
                        {[Periods].[Periods].[${systemYear}],
                        [Periods].[Periods].[${yearPlusOne}]}
                        *
                        {TM1DRILLDOWNMEMBER( {[Contract Types].[Contract Types].[All Contract Types]}, All, Recursive)}
                        *
                        {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]}
                        }
                SELECT
                    {UNION( {UNION( UNION( {FixColumns}, 
                      {CompareColumns}*{[Measures Sales Plan IP].[Measures Sales Plan IP].[Value]}, All), 
                        {CompareColumns}  * {STRTOMEMBER([Measures Sales Plan IP].[Measures Sales Plan IP].[ReportingMeasure]) }, All )}, 
                            {FinalColumns}, All)}
                    ON COLUMNS ,
                    {[Versions].[Versions].[${version}], {ReportVersions}}
                    ON ROWS
                FROM [Sales Plan IP]
                WHERE
                    ([Receivers].[Receivers].[${receiver}],
                   [Companies].[Companies].[${company}],
                    [Materials].[BPSP ${productPlanVersion} IP].[${focusedProduct}],
                   [Instrument Types].[Instrument Types].[${instrumentTypes === 'All' || instrumentTypes === false ? 'All Instrument Types' : instrumentTypes}])
                            "
                    }
               `;
            },

            parsingControlNormalMode: {
                type: 'matrix',
                length: 26,
                query: [
                    (r, x) => {
                        let planningLock = Utils.parseNumber(Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'locked')) > 0 ? true : false;

                        let result, pl, materialCode,
                            checkoutUser = r.Cells[x + 4].FormattedValue, skin,
                            uiLevel = r.Cells[x + 6].FormattedValue;
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = x;
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 1;
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 2 || Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked'];
                        Widgets['systemValueRocheBPSPipPlanningGridTableYearIsChildrenLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 3;

                        pl = r.Cells[x + 1].FormattedValue.replace('a', '');
                        skin = 'gridtable_hierarchy_bpsp_' + uiLevel;
                        if (Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked']) {
                            skin += '_locked';
                        }
                        result = {
                            label: r.Cells[x].FormattedValue,
                            materialCode: r.Cells[x + 2].FormattedValue,
                            isMainLocked: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked'],
                            isLockedByMe: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] && Widgets.activeUserName.indexOf(checkoutUser) !== -1,
                            isLocked: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'],
                            isChildrenLocked: Widgets['systemValueRocheBPSPipPlanningGridTableYearIsChildrenLocked'],
                            isPlanningLocked: planningLock,
                            checkoutUser: checkoutUser,
                            checkedOutAt: r.Cells[x + 5].FormattedValue,
                            productLevel: pl,
                            uiLevel: uiLevel,
                            skin: skin,
                            cellSkin: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] ? 'locked' : '',
                            icon: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked'] ? 'icon-lock' : 'icon-badge',
                            openPopUpConditional: true

                        };
                        if (Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked']) {
                            result['iconColor'] = '#d12d4a';
                        }
                        return result;
                    },

                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            title: c.FormattedValue.replace('PL', ''),
                            cellSkin: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] ? 'locked' : '',
                        }
                    },

                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            title: c.FormattedValue,
                            cellSkin: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] ? 'locked' : '',
                        }
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyWideCell(r, x, 5);
                    },
                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyWideCell(r, x, 1);
                    },
                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCell(r, x, 1);
                    },

                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            title: c.FormattedValue,
                            members: c.Members,
                            cellSkin: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                            year: c.Members[7].Name,
                            applyMeasuresToSection: true,
                            width: '100%',
                            cellWidth: '3%'
                        }
                    },

                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            icon: c.FormattedValue === '0' ? 'icon-x' : (c.FormattedValue === '1' ? 'icon-check' : ''),
                            cellSkin: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] ? 'locked' : 'readonly_bpsp',
                        }
                    },

                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            icon: c.FormattedValue === '' ? 'icon-comment-off' : 'icon-comment-on',
                            iconColor: c.FormattedValue === '' ? '#C5C6C6' : '#0066cc',
                            cellSkin: Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] ? 'locked' : '',
                            hasComment: c.FormattedValue !== ''
                        }
                    },


                ]
            },

            getParsingControlCompareByColumn: {
                type: 'matrix',
                length: 24,
                query: [
                    (r, x) => {
                        let result, pl, checkoutUser = r.Cells[x + 4].FormattedValue, skin,
                            uiLevel = r.Cells[x + 6].FormattedValue;
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = x;
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 1;
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 2 || Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked'];
                        Widgets['systemValueRocheBPSPipPlanningGridTableYearIsChildrenLocked'] = Utils.parseNumber(r.Cells[x + 3].FormattedValue) === 3;
                        pl = r.Cells[x + 1].FormattedValue.replace('a', '');
                        skin = 'gridtable_hierarchy_bpsp_' + uiLevel;
                        result = {
                            label: r.Cells[x].FormattedValue,
                            productLevel: pl,
                            uiLevel: uiLevel,
                            skin: skin,
                            cellSkin: '',
                            icon: 'icon-badge',
                            openPopUpConditional: false
                        };
                        return result;
                    },

                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            title: c.FormattedValue.replace('PL', ''),
                            cellSkin: '',
                        }
                    },

                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            title: c.FormattedValue,
                            cellSkin: ''
                        }
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 5);
                    },
                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },
                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInColumnMode(r, x, 1);
                    },

                    (r, x) => {
                        return {cellVisible: false};
                    },

                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            icon: c.FormattedValue === '0' ? 'icon-x' : (c.FormattedValue === '1' ? 'icon-check' : ''),
                            cellSkin: 'readonly_bpsp',
                            cellVisible: false
                        }
                    },

                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            cellVisible: false
                        }
                    },


                ]
            },
            getParsingControlCompareByRow: {
                type: 'matrix',
                length: 26,
                query: [
                    (r, x) => {
                        let result,
                            versionKey = r.Cells[x].FormattedValue,
                            checkoutUser = r.Cells[x + 5].FormattedValue,
                            pl = r.Cells[x + 2].FormattedValue.replace('a', ''),
                            uiLevel = r.Cells[x + 7].FormattedValue,
                            productCode = r.Cells[x + 3].FormattedValue,
                            colOffset = r.Cells[x + 8].FormattedValue,
                            skin;
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = x;
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked'] = Utils.parseNumber(r.Cells[x + 4].FormattedValue) === 1;
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] = Utils.parseNumber(r.Cells[x + 4].FormattedValue) === 2 || Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked'];
                        Widgets['systemValueRocheBPSPipPlanningGridTableYearIsChildrenLocked'] = Utils.parseNumber(r.Cells[x + 4].FormattedValue) === 3;
                        Widgets['systemValueRocheBPSPipPlanningCompareColumnOffset'] = colOffset;
                        skin = 'gridtable_hierarchy_bpsp_' + uiLevel;
                        result = {
                            label: r.Cells[x + 1].FormattedValue,
                            productCode: productCode,
                            productLevel: pl,
                            uiLevel: uiLevel,
                            skin: skin,
                            cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                            icon: x > 0 ? 'icon-rectangle-stack' : 'icon-badge',
                            versionKey: versionKey,
                            openPopUpConditional: false
                        };
                        if (Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked']) {
                            result['iconColor'] = '#d12d4a';
                        }
                        return result;
                    },
                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 2;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            title: x > 2 ? '' : c.FormattedValue.replace('PL', ''),
                            cellSkin: x < 13 ? 'selected' : 'readonly_bpsp'
                        }
                    },

                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            title: x > 3 ? '' : c.FormattedValue,
                            cellSkin: x < 13 ? 'selected' : 'readonly_bpsp'
                        }
                    },

                    (r, x) => {
                        let incCols = 6 + parseInt(Widgets['systemValueRocheBPSPipPlanningCompareColumnOffset']);
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInRowMode(r, x, incCols);
                    },
                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInRowMode(r, x, 1);
                    },
                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInRowMode(r, x, 1);
                    },

                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInRowMode(r, x, 1);
                    },
                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInRowMode(r, x, 1);
                    },
                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInRowMode(r, x, 1);
                    },
                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInRowMode(r, x, 1);
                    },
                    (r, x) => {
                        return Repository.rocheBPSPipPlanning.getGridTableMonthlyCellInRowMode(r, x, 1);
                    },
                    (r, x) => { // ez a 12.
                        return {
                            cellVisible: false
                        }
                    },
                    (r, x) => {
                        return {
                            cellVisible: false
                        }
                    },
                    (r, x) => {
                        return {
                            cellVisible: false
                        }
                    },
                    (r, x) => {
                        return {
                            cellVisible: false
                        }
                    },
                    (r, x) => {
                        return {
                            cellVisible: false
                        }
                    },
                    (r, x) => {
                        return {
                            cellVisible: false
                        }
                    },
                    (r, x) => {
                        return {
                            cellVisible: false
                        }
                    },
                    (r, x) => {
                        return {
                            cellVisible: false
                        }
                    },
                    (r, x) => {
                        return {
                            cellVisible: false
                        }
                    },
                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            icon: c.FormattedValue === '0' ? 'icon-x' : (c.FormattedValue === '1' ? 'icon-check' : ''),
                            cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                            cellVisible: false
                        }
                    },
                    (r, x) => {
                        Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                        let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                        return {
                            cellVisible: false
                        }
                    },
                ]
            },

        },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-04': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let b = Utils.parseNumber(v('systemValueIpPlanningSegmentedControlRelativeYearValue')) - 1;
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeLevelThree(index)
                        : b,
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : 'Actual'
                }
            }
        }
    },
    'rocheBPSPipPlanningGridTableMonthlyHeaderText-05': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let b = Utils.parseNumber(db.systemValueIpPlanningSegmentedControlRelativeYearValue);
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? ''
                        : b,
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index)
                        : Repository.rocheBPSPipPlanning.gridTableHeaderLogicInNormalMode()
                }
            }
        }
    },
    'rocheBPSPipPlanningGridTableMonthlyHeaderText-06': {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPipPlanningGridTableMonthly');
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let b = v('systemValueIpPlanningSegmentedControlRelativeYearValue');
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '01'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-07': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? ''
                        : '',
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '02'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-08': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '03'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-09': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '04'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-10': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '05'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-11': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '06'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-12': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeLevelThree(index)
                        : '',
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '07'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-13': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '08'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-14': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '09'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-15': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '10'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-16': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '11'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-17': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : '12'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-18': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) : 'Total'
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-19': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? ''
                        : 'Variance',
                    body: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.titleInCompareModeVersion(index) :
                        'YEND vs Act ' + Utils.getGridTableCellByRowAndColumn('rocheBPSPipPlanningGridTableMonthly', 0, 18, 'year')
                };
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderText-20': {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPipPlanningGridTableMonthly');
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db) => {
                return {body: 'YEND vs T3 ' + Utils.getGridTableCellByRowAndColumn('rocheBPSPipPlanningGridTableMonthly', 0, 19, 'year')};
            }
        }
    },
    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-04': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    width: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.headerWithInCompareMode() : '5%',
                    cellHeaderSkin: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.headerSkinInCompareModeVersion(index) : 'long_border_bpsp'
                }
            }
        }
    },
    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-05': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    width: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.headerWithInCompareMode() : '5%',
                    cellHeaderSkin: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.headerSkinInCompareModeVersion(index) : 'long_border_bpsp'
                }
            }
        }
    },
    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    width: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.headerWithInCompareMode() : '3.75%',
                    cellHeaderSkin: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPipPlanning.headerSkinInCompareModeVersion(index) : ''
                }
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-07': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-08': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-09': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-10': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-11': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-12': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-13': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-14': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-15': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-16': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-17': {
        reference: 'rocheBPSPipPlanningGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-18': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                return {
                    width: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? '4.25%' : '4%'
                }
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-19': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                return {
                    width: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? '4.25%' : '4%'
                }
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-20': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                return {
                    width: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? '4.25%' : '3%',
                    cellVisible: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? false : true
                }
            }
        }
    },

    'rocheBPSPipPlanningGridTableMonthlyHeaderCell-22': {
        initCondition: () => {
            return Repository.rocheBPSPipPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                return {
                    cellVisible: Repository.rocheBPSPipPlanning.gridTableHeaderLogic() ? false : true
                }
            }
        }
    },


    rocheBPSPipPlanningMaterialSelectorShortcutPopupGridTable: {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPipPlanningGridTableMonthly')
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return v('rocheBPSPipPlanningGridTableMonthly.cellData').filter(e => ['01C', '02C', '03C', '01N', '02N', '03N'].includes(e[0].uiLevel)).map(e => {
                    return [{
                        label: e[0].label,
                        skin: 'gridtable_hierarchy_shortcut_bpsp_' + e[0].uiLevel,
                        productCode: e[2].title
                    }];
                });
            }
        }
    },
    rocheBPSPipPlanningMaterialSelectorShortcutPopupGridTableButton01: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueIpPlanningFocusedProduct'] = Utils.getGridTableCell('rocheBPSPipPlanningMaterialSelectorShortcutPopupGridTable', 0).productCode;
                }
            },
    },

    rocheBPSPIpPlanningCheckout: {
        getCheckoutGridTableMonthlyCell: (r, x, inc) => {
            Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + inc;
            let c = r.Cells[Widgets['systemValueMonthlyRelativeIndex']],
                editable = c.Consolidated === false && c.RuleDerived === false;

            let result = {
                title: c.FormattedValue,
                cellSkin: editable ? '' : 'readonly_bpsp',
                skin: 'monthly_right_bpsp',
                cellVisible: true,
                editable: editable,
                ordinal: c.Ordinal,
                year: c.Members[7].Name,
                members: c.Members,
                applyMeasuresToSection: true,
                width: '100%',
                cellWidth: '3.75%'
            };
            if (editable) {
                result['titleFontColor'] = '#A05EB5';
            }
            return result;
        },
        getGridTableMonthlyCellInRowMode: (r, x, inc) => {
            Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + inc;
            let i = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'];
            return {
                title: r.Cells[i].FormattedValue,
                members: r.Cells[i].Members,
                cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                year: r.Cells[i].Members[7].Name,
                applyMeasuresToSection: true,
                cellWidth: '8.5%'
            };
        },
        getGridTableMonthlyWideCell: (r, x, inc) => {
            Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + inc;
            let i = Widgets['systemValueMonthlyRelativeIndex'];
            return {
                title: r.Cells[i].FormattedValue,
                members: r.Cells[i].Members,
                cellSkin: 'readonly_bpsp',
                year: r.Cells[i].Members[7].Name,
                applyMeasuresToSection: true,
                width: '100%',
                cellWidth: '5%'
            };
        },

        getGridTableMonthlyCellInColumnMode: (r, x, inc) => {
            Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + inc;
            let i = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'];
            return {
                title: r.Cells[i].FormattedValue,
                year: r.Cells[i].Members[5].Name,
                contractType: r.Cells[i].Members[6].Name,
                version: r.Cells[i].Members[7].Name,
                applyMeasuresToSection: true,
                //width: '100%',
                cellWidth: '4.25%',
                cellSkin: i % 2 === 0 ? 'readonly_bpsp' : 'readonly_blue_bpsp'
            };
        },
        initCondition: () => {
            let l = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData.length');
            return l !== false && l !== 0;
        },

        gridTableHeaderLogic: () => {
            let result;
            result = v('systemValueIpPlanningCheckedOutCompareBy') === 'Column' || v('systemValueIpPlanningCheckedOutCompareBy') === 'Row';
            return result
        },
        gridTableHeaderLogicInNormalMode: () => {
            let a = Utils.parseNumber(v('systemValueIpPlanningSegmentedControlRelativeYearValue'));
            let b = Utils.parseNumber(v('systemValueGlobalStartingPlanYear'));
            let result = a === b ? 'T0' : 'Plan';
            return result
        },
        headerWithInCompareMode: () => {
            let b = '8.5%';
            if (Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode()) {
                return b
                    ;
            } else {
                let a = '4.25%';
                return a;
            }
        },

        titleInCompareModeLevelThree: (index) => {
            if (Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode()) {
                if (index === 4 || index === 8) {
                    let a = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData')[0][index];
                    let b = a.members[5];
                    return b.Name
                } else {
                    return ''
                }
            } else {
                let cell = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData')[0][index];
                return cell.year +
                    '<br/><div style=\"font-size:13px; float: left;margin-left: -65%;margin-top:62.5%;";  >' + 'All' + '</div>';
            }
        },
        titleInCompareModeLevelTwo: (index) => {
            if (Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode()) {
                if (index === 4 || index === 8) {
                    let a = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData')[0][index];
                    let b = a.members[5];
                    return b.Name
                } else {
                    return ''
                }
            } else {
                let cell = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData')[0][index];
                return cell.contractType;
            }
        },

        titleInCompareModeVersion: (index) => {
            if (Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode()) {
                index = index - 1
                if (index < 11) {
                    let a = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData')[0][index];
                    let b = a.members[6];
                    return b.Name
                } else {
                    return ''
                }
            } else {
                let x = v('rocheBPSPIpPlanningCheckoutVersionSelector.value');
                let y = v('rocheBPSPIpPlanningCheckoutVersionSelectorTwo.value');
                if (index % 2 === 0) {
                    return x
                } else {
                    return y
                }
            }
        },
        headerSkinInCompareModeVersion: (index) => {
            if (Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode()) {
                if (index === 4 || index === 8) {
                    let b = 'long_border_bpsp';
                    return b
                } else {
                    return ''
                }
            } else {
                if (index === 4 || index === 12) {
                    let b = 'three_level_border_bpsp';
                    return b
                } else if (index % 2 === 0) {
                    return 'long_border_bpsp'
                } else {
                    return ''
                }
            }
        },
    },

    rocheBPSPIpPlanningCheckoutInfoPopupText2: {
        initCondition: (db) => {
            return v('rocheBPSPipPlanningGridRow1Cell2DropBox.value.length') !== false;
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
              {"MDX":
                "SELECT 
                    {[Versions].[Versions].[Live]} 
                    PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                    {[Measures Company Information].[Measures Company Information].[Current Planning Event]} 
                    PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON ROWS 
                FROM [Company Information] 
                WHERE 
                  (
                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}]
                  )"}
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        title: (r, x) => {
                            return '<li>' + r.Cells[0].FormattedValue + '</li>';
                        }
                    }
            }
        }
    },
    rocheBPSPIpPlanningCheckoutInfoPopupText1: {
        initCondition: (db) => {
            return v('rocheBPSPipPlanningGridRow1Cell2DropBox.value.length') !== false;
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                    {"MDX":
                    "SELECT 
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Currency - Key]} 
                    ON COLUMNS , 
                        {[Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}]} 
                    ON ROWS 
                    FROM [}ElementAttributes_Companies] "}
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        title: (r, x) => {
                            return '<li>' + r.Cells[0].FormattedValue + '</li>';
                        }
                    }
            }
        }
    },
    rocheBPSPIpPlanningCheckoutGridRow1Cell9Button: {
        reference: 'rocheBPSPProductsGridRow1Cell9Button'
    },
    rocheBPSPIpPlanningCheckoutGridRow1Cell2CompanyText: {
        init: {
            execute: (db) => {
                return {title: v('rocheBPSPipPlanningGridRow1Cell2DropBox.value')};
            }
        }
    },
    rocheBPSPIpPlanningCheckoutGridRow1Cell3ReceiverText: {
        init: {
            execute: (db) => {
                return {title: v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')};
            }
        }
    },

    rocheBPSPIpPlanningCheckoutGridTableMonthly: {
        initCondition: (db) => {
            let b =
                Utils.isValueExistingAndNotEmpty('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne', 'selected') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPIpPlanningCheckoutGridSegmentedControlTwo', 'selected');
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        pastelast: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `{"Ordinal": ${widgetValue.ordinal},"Value": \"${widgetValue.value}\"}`
            }
        },
        paste: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `{"Ordinal": ${widgetValue.ordinal},"Value": \"${widgetValue.value}\"}`
            }
        },
        write: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `{"Ordinal": ${widgetValue.ordinal},"Value": \"${widgetValue.value}\"}`
            }
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Consolidated,RuleDerived,Updateable;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db, widgetId, object) => {
                    if (object.isCompareByColumnMode()) {
                        return object.getCompareByColumnMDX(object, db);
                    }
                    if (object.isCompareByRowMode()) {
                        return object.getCompareByRowMDX(object, db);
                    }
                    return object.getNormalMDX(object, db);
                },
                parsingControl: (db, widgetId, object) => {
                    if (object.isCompareByColumnMode()) {
                        return object.getParsingControlCompareByColumn;
                    }
                    if (object.isCompareByRowMode()) {
                        return object.getParsingControlCompareByRow;
                    }
                    return object.parsingControlNormalMode;
                }

            },
        isCompareByColumnMode() {
            return v('systemValueIpPlanningCheckedOutCompareBy') === 'Column';
        },
        isCompareByRowMode() {
            return v('systemValueIpPlanningCheckedOutCompareBy') === 'Row';
        },
        getNormalMDX(object, db) {
            let
                contractType = v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected'),
                instrumentTypes = v('rocheBPSPIpPlanningCheckoutGridSegmentedControlTwo.selected')
                //8463735001
                //${db.systemValueIpPlanningCheckoutProduct}
            ;
            return `{"MDX":"
                                   With
                                --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion
                                     Set DefaultProductRows AS
                                      {TM1SubsetToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP],'${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}')}
                                --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                                     Set FocusedOnProductRows AS 
                                      {Intersect({TM1DRILLDOWNMEMBER({[Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].[${v('systemValueIpPlanningCheckoutProduct')}]}, ALL, RECURSIVE )},
                                      {DefaultProductRows})}
                                --Decide which rowSet to use
                                     MEMBER [Materials].[BPSP Budget IP].[ProductIsFocused] AS 
                                     IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                                -- Decide 1st column element
                                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[FirstColumn] As
                                     IIF('${db.systemValueIpPlanningSegmentedControlRelativeYearValue}'='${db.systemValueGlobalStartingPlanYear}',
                                     '([Periods].[Periods].[${Utils.parseNumber(db.systemValueGlobalStartingPlanYear) - 1}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Actual Quantity])',
                                       '([Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Actual Quantity])')
                                     Set FirstColumn As
                                     {StrToSet('{'+[LineItems Sales Plan IP].[LineItems Sales Plan IP].[FirstColumn]+'}')}
                                -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)     
                                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName] as 
                                            [Materials].[BPSP Budget IP].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP Caption')
                                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode] as 
                                            [Materials].[BPSP Budget IP].CurrentMember.Properties('Element')
                                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel] as 
                                            [Materials].[BPSP Budget IP].CurrentMember.Properties('Product Level - Name')
                                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat] as 
                                            --[Materials].[BPSP Budget IP].CurrentMember.Properties('UI Level Format')
                                            [Materials].[BPSP Budget IP].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP UI Level Format')
                                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[DIS] as 
                                            [Materials].[BPSP Budget IP].CurrentMember.Properties('IP DIS Relevant Flag Budget')
                                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[HasComment] as
                                            [Sales Plan IP].([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan],[Measures Sales Plan IP].[Measures Sales Plan IP].[Comment Flag])
                                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser] as 
                                            [Sales Plan IP].([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],[Measures Sales Plan IP].[Measures Sales Plan IP].[EditedBy])
                                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime] as 
                                            [Sales Plan IP].([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],[Measures Sales Plan IP].[Measures Sales Plan IP].[EditedDateTime])
                                -- Create the first 5 column with information
                                     Set FixColumns AS
                                     {([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName]),
                                      ([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel]),
                                      ([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode]),
                                      ([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutFlag]),
                                      ([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser]),
                                      ([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime]),
                                      ([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat])}
                                     Set FinalColumns AS
                                     {([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[DIS]),
                                      ([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[HasComment])}
                                -- column Tuple Create
                                     Set ColumnSelection As
                                        Union({FirstColumn},
                                        {([Periods].[Periods].[${db.systemValueGlobalStartingPlanYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Last Submitted Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}01],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}02],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}03],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}04],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}05],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}06],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}07],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}08],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}09],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}10],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}11],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}12],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                         ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                          --([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue} - ${db.systemValueIpPlanningSegmentedControlRelativeYearValue - 1}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                          ([Periods].[Periods].[2021],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]),
                                          ([Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Variance Final vs Last Submitted Plan])},All)
                                SELECT 
                                     Union(Union({FixColumns},{ColumnSelection},All),{FinalColumns},All)
                                  ON COLUMNS , 
                                -- rows
                                  {StrToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].[ProductIsFocused])} ON ROWS 
                                FROM [Sales Plan IP] 
                                WHERE 
                                  (
                                   [Versions].[Versions].[${v('systemValueGlobalVersionKey')}],
                                   [Measures Sales Plan IP].[Measures Sales Plan IP].[Value],
                                   [Receivers].[Receivers].[${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}],
                                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}],
                                   [Contract Types].[Contract Types].[${v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected')}],
                                   [Instrument Types].[Instrument Types].[${v('rocheBPSPIpPlanningCheckoutGridSegmentedControlTwo.selected')}]
                                  )
                                  "}`;


        },

        getCompareByColumnMDX(object, db) {
            let version = v('systemValueGlobalVersionKey'),
                budget = v('systemValueGlobalCompanyProductPlanVersion'),
                company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                segmentedYear = v('systemValueIpPlanningSegmentedControlRelativeYearValue'),  //2021
                selectedProduct = v('systemValueIpPlanningCheckoutProduct'),
                systemYear = v('systemValueGlobalStartingPlanYear'),
                yearPlusOne = Utils.parseNumber(v('systemValueGlobalStartingPlanYear')) + 1,
                receiver = v('rocheBPSPipPlanningGridRow1Cell3DropBox.value'),
                contractTypes = v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected'),
                instrumentTypes = v('rocheBPSPIpPlanningCheckoutSegmentedControlUsed.selected'),
                versionCompare = Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningCheckoutVersionSelectorTwo', 'key'),
                value = v('rocheBPSPIpPlanningCheckoutValueSegmentedControl.value') === 'VALUE' ? Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningCheckoutVersionSelectorTwo', 'key')
                    : v('rocheBPSPIpPlanningCheckoutValueSegmentedControl.value')
            ;
            return `{"MDX":"             
                                          With
                    --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion
                         Set DefaultProductRows AS
                          {TM1SubsetToSet([Materials].[BPSP ${budget} IP], '${company}')}
                    --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                         Set FocusedOnProductRows AS 
                          {Intersect({TM1DRILLDOWNMEMBER({[Materials].[BPSP ${budget} IP].[${db.systemValueIpPlanningCheckoutProduct}]}, ALL, RECURSIVE )},{DefaultProductRows})}
                    --Decide which rowSet to use
                         MEMBER [Materials].[BPSP ${budget} IP].[ProductIsFocused] AS 
                         IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                    -- Lookup Product Attributes and checkout information 
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName] as 
                                [Materials].[BPSP ${budget} IP].CurrentMember.Properties('BPSP ${budget} IP Caption')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode] as 
                                [Materials].[BPSP ${budget} IP].CurrentMember.Properties('Element')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel] as 
                                [Materials].[BPSP ${budget} IP].CurrentMember.Properties('Product Level - Name')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[DIS] as 
                                [Materials].[BPSP ${budget} IP].CurrentMember.Properties('IP DIS Relevant Flag ${budget}')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat] as 
                                [Materials].[BPSP ${budget} IP].CurrentMember.Properties('BPSP ${budget} IP UI Level Format')
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[HasComment] as
                                [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan],
                                [Measures Sales Plan IP].[Measures Sales Plan IP].[Comment Flag])
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser] as 
                                [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],
                                [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedBy])
                         MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime] as 
                                [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],
                                [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedDateTime])
                    -- Calculated versions for reporting
                        MEMBER [Versions].[Versions].[AbsoluteVariance] AS
                            ([Versions].[Versions].[${versionCompare}] - [Versions].[Versions].[${version}])
                        MEMBER [Versions].[Versions].[PercentVariance] AS
                            ([Versions].[Versions].[${versionCompare}] - [Versions].[Versions].[${version}] )/[Versions].[Versions].[${version}]
                            , FORMAT_STRING='#0.00%'
                    -- Create the fixed information columns
                        Set FixColumns AS
                            {
                            -- Base tuple for fixed info
                            { ([Periods].[Periods].[${systemYear}],[Contract Types].[Contract Types].[${contractTypes}],[Versions].[Versions].[${version}]) }
                            *
                            {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutFlag],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat]}
                            }
                        Set FinalColumns AS
                            {
                            { ([Periods].[Periods].[${systemYear}],[Contract Types].[Contract Types].[${contractTypes}],[Versions].[Versions].[${version}]) }
                            *
                            {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[DIS]}
                            }
                    -- Create main reporting column set
                        SET ReportColumns AS
                            {
                            {[Periods].[Periods].[${systemYear}],
                            [Periods].[Periods].[${yearPlusOne}]}
                            *
                            {TM1DRILLDOWNMEMBER( {[Contract Types].[Contract Types].[All Contract Types]}, All, Recursive)}
                            *
                            {[Versions].[Versions].[${version}],
                            [Versions].[Versions].[${value}]}
                            *
                            {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]}
                            }
                    SELECT
                        {UNION( UNION( {FixColumns}, {ReportColumns}, All), {FinalColumns}, All)}
                        ON COLUMNS ,
                        {StrToSet([Materials].[BPSP Budget IP].[ProductIsFocused])}
                        ON ROWS
                    FROM [Sales Plan IP] 
                    WHERE 
                      (
                       [Receivers].[Receivers].[${receiver}],
                       [Companies].[Companies].[${company}],
                       [Instrument Types].[Instrument Types].[${instrumentTypes === 'All' || instrumentTypes === false ? 'All Instrument Types' : instrumentTypes}],
                       [Measures Sales Plan IP].[Measures Sales Plan IP].[Value]
                      )
                    "}`;

        },

        getCompareByRowMDX(object, db) {
            let version = v('systemValueGlobalVersionKey'),
                productPlanVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                segmentedYear = v('systemValueIpPlanningSegmentedControlRelativeYearValue'),  //2021
                focusedProduct = v('systemValueCompareByRowSelectedMaterial'),
                //focusedProduct = v('systemValueIpPlanningCheckoutProduct'),
                systemYear = v('systemValueGlobalStartingPlanYear'),
                yearPlusOne = Utils.parseNumber(v('systemValueGlobalStartingPlanYear')) + 1,
                receiver = v('rocheBPSPipPlanningGridRow1Cell3DropBox.value'),
                contractTypes = v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected'),
                instrumentTypes = v('rocheBPSPIpPlanningCheckoutSegmentedControlUsed.selected'),
                value = v('rocheBPSPIpPlanningCheckoutValueSegmentedControl.value')
            ;
            return `{"MDX":"
             With
                -- Comparison query control elements
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[ReportType] AS \\"${value}\\"
                -- Lookup Product Attributes and checkout information
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName] as 
                            [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('BPSP ${productPlanVersion} IP Caption')
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode] as 
                            [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('Element')
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel] as 
                            [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('Product Level - Name')
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[DIS] as 
                            [Materials].[BPSP ${productPlanVersion} IP].CurrentMember.Properties('IP DIS Relevant Flag ${productPlanVersion}')
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionCode] AS
                        [Versions].[Versions].CurrentMember.Name
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionName] AS
                        [Version Information by Company].([Versions].[Versions].CurrentMember,[Companies].[Companies].[${company}],
                        [Measures Version Information by Company].[Measures Version Information by Company].[Name])
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionMonth] AS
                        [Version Information by Company].([Versions].[Versions].CurrentMember,[Companies].[Companies].[${company}],
                        [Measures Version Information by Company].[Measures Version Information by Company].[Actuals Month])
                -- Reuse standard PH based formatting
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat] AS
                        IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${version}], \\"01C\\", \\"02C\\")
                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionCaption] AS
                        IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${version}],
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName] + \\" (\\" + [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionName] + \\")\\",
                            [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionName] + \\" (\\" + [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionMonth] + \\")\\")
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[HasComment] as
                            [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan],
                            [Measures Sales Plan IP].[Measures Sales Plan IP].[Comment Flag])
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser] as 
                            [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],
                            [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedBy])
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime] as 
                            [Sales Plan IP].([Periods].[Periods].[${systemYear}],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI Checkout Flag],
                            [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedDateTime])
                -- Offset for reporting
                     MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[FirstDataColumn] AS
                             IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${version}], 0, COUNT({CompareColumns}) )
                -- Calcuated measures for variances
                    MEMBER [Measures Sales Plan IP].[Measures Sales Plan IP].[AbsoluteVariance] AS
                        ([Versions].[Versions].CurrentMember,[Measures Sales Plan IP].[Measures Sales Plan IP].[Value])
                        - ([Versions].[Versions].[${version}],[Measures Sales Plan IP].[Measures Sales Plan IP].[Value])
                    MEMBER [Measures Sales Plan IP].[Measures Sales Plan IP].[PercentVariance] AS
                        [Measures Sales Plan IP].[Measures Sales Plan IP].[AbsoluteVariance]/[Measures Sales Plan IP].[Measures Sales Plan IP].[Value]
                        , FORMAT_STRING='#0.00%'
                -- Final aggregation of values for reporting view.
                    MEMBER [Measures Sales Plan IP].[Measures Sales Plan IP].[ReportingMeasure] AS
                      IIF([LineItems Sales Plan IP].[LineItems Sales Plan IP].[ReportType] = \\"AbsoluteVariance\\", \\"[Measures Sales Plan IP].[Measures Sales Plan IP].[AbsoluteVariance]\\",
                          IIF([LineItems Sales Plan IP].[LineItems Sales Plan IP].[ReportType] = \\"PercentVariance\\", \\"[Measures Sales Plan IP].[Measures Sales Plan IP].[PercentVariance]\\",
                          \\"[Measures Sales Plan IP].[Measures Sales Plan IP].[Value]\\"))
                -- Required sets of versions
                    SET ReportVersions AS
                        {EXCEPT( {FILTER(
                            {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                                , [Version Information by Company].([Companies].[Companies].[${company}],
                                [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                            , {[Versions].[Versions].[${version}]} )}
                -- Create the fixed information columns
                    Set FixColumns AS
                        {
                        -- Base tuple for fixed info
                        { ([Periods].[Periods].[${systemYear}],[Contract Types].[Contract Types].[Cash Sales]) }
                        *
                        {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionCode],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[VersionCaption],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialCode],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutFlag],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutUser],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[zUI CheckOutDateTime],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UILevelFormat],
                        [LineItems Sales Plan IP].[LineItems Sales Plan IP].[FirstDataColumn]}
                        *
                        {[Measures Sales Plan IP].[Measures Sales Plan IP].[Value]} }
                    Set FinalColumns AS
                        { { ([Periods].[Periods].[${systemYear}],[Contract Types].[Contract Types].[Cash Sales]) }
                        *
                        {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Has Comment]}
                        *
                        {[Measures Sales Plan IP].[Measures Sales Plan IP].[Value]} }
                -- Create main reporting column set
                    SET CompareColumns AS
                        {
                        {[Periods].[Periods].[${systemYear}],
                        [Periods].[Periods].[${yearPlusOne}]}
                        *
                        {TM1DRILLDOWNMEMBER( {[Contract Types].[Contract Types].[All Contract Types]}, All, Recursive)}
                        *
                        {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]}
                        }
                SELECT
                    {UNION( {UNION( UNION( 
                        {FixColumns}, 
                        {CompareColumns} * {[Measures Sales Plan IP].[Measures Sales Plan IP].[Value]}, All), 
                            {CompareColumns}  * {STRTOMEMBER([Measures Sales Plan IP].[Measures Sales Plan IP].[ReportingMeasure]) }, All )}, 
                                {FinalColumns}, All)}
                    ON COLUMNS ,
                    {[Versions].[Versions].[${version}], {ReportVersions}}
                    ON ROWS
                FROM [Sales Plan IP]
                WHERE
                    ([Receivers].[Receivers].[${receiver}],
                   [Companies].[Companies].[${company}],
                    [Materials].[BPSP ${productPlanVersion} IP].[${focusedProduct}],
                   [Instrument Types].[Instrument Types].[${instrumentTypes === 'All' || instrumentTypes === false ? 'All Instrument Types' : instrumentTypes}])  
            "}`;
        },

        parsingControlNormalMode: {
            type: 'matrix',
            length: 26,
            query: [
                (r, x) => {
                    let result, pl, uiLevel = r.Cells[x + 6].FormattedValue;
                    Widgets['systemValueMonthlyRelativeIndex'] = x;

                    pl = r.Cells[x + 1].FormattedValue.replace('a', '');
                    result = {
                        label: r.Cells[x].FormattedValue,
                        skin: 'gridtable_checkout_hierarchy_bpsp_' + uiLevel,
                        cellVisible: true,
                        icon: 'icon-badge',
                        members: r.Cells[x].Members,
                        uiLevel: uiLevel,
                        productLevel: pl
                    };
                    return result;
                },
                (r, x) => {
                    Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue.replace('PL', ''),
                        cellSkin: '',
                        cellVisible: true,
                        members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].FormattedValue,
                        cellSkin: '',
                        cellVisible: true,
                        members: r.Cells[Widgets['systemValueMonthlyRelativeIndex']].Members
                    };
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyWideCell(r, x, 5);
                },
                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyWideCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getCheckoutGridTableMonthlyCell(r, x, 1);
                },

                (r, x) => {
                    Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueMonthlyRelativeIndex']],
                        editable = c.Consolidated === false && c.RuleDerived === false;

                    let result = {
                        title: c.FormattedValue,
                        cellSkin: editable ? '' : 'readonly_bpsp',
                        skin: 'monthly_right_bpsp',
                        cellVisible: true,
                        editable: editable,
                        ordinal: c.Ordinal,
                        year: c.Members[7].Name,
                        members: c.Members,
                        applyMeasuresToSection: true,
                        width: '100%',
                        cellWidth: '4%'
                    };
                    if (editable) {
                        result['titleFontColor'] = '#A05EB5';
                    }
                    return result;
                },

                (r, x) => {
                    Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueMonthlyRelativeIndex']],
                        editable = c.Consolidated === false && c.RuleDerived === false;

                    let result = {
                        title: c.FormattedValue,
                        cellSkin: editable ? '' : 'readonly_bpsp',
                        skin: 'monthly_right_bpsp',
                        cellVisible: true,
                        editable: editable,
                        ordinal: c.Ordinal,
                        year: c.Members[7].Name,
                        members: c.Members,
                        applyMeasuresToSection: true,
                        width: '100%',
                        cellWidth: '4%'
                    };
                    if (editable) {
                        result['titleFontColor'] = '#A05EB5';
                    }
                    return result;
                },
                (r, x) => {
                    Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueMonthlyRelativeIndex']],
                        editable = c.Consolidated === false && c.RuleDerived === false;
                    let result = {
                        title: c.FormattedValue,
                        cellSkin: editable ? '' : 'readonly_bpsp',
                        skin: 'monthly_right_bpsp',
                        cellVisible: true,
                        editable: editable,
                        ordinal: c.Ordinal,
                        year: c.Members[7].Name,
                        members: c.Members,
                        applyMeasuresToSection: true,
                        width: '100%',
                        cellWidth: '3%'
                    };
                    if (editable) {
                        result['titleFontColor'] = '#A05EB5';
                    }
                    return result;
                },

                (r, x) => {
                    Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueMonthlyRelativeIndex']];
                    return {
                        icon: c.FormattedValue === '0' ? 'icon-x' : (c.FormattedValue === '1' ? 'icon-check' : ''),
                    }
                },

                (r, x) => {
                    Widgets['systemValueMonthlyRelativeIndex'] = Widgets['systemValueMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueMonthlyRelativeIndex']];
                    return {
                        icon: c.FormattedValue === '' ? 'icon-comment-off' : 'icon-comment-on',
                        iconColor: c.FormattedValue === '' ? '#C5C6C6' : '#0066cc',
                        hasComment: c.FormattedValue !== ''
                    }
                }
            ]
        },

        getParsingControlCompareByColumn: {
            type: 'matrix',
            length: 24,
            query: [
                (r, x) => {
                    let result, pl, uiLevel = r.Cells[x + 6].FormattedValue;
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = x;

                    pl = r.Cells[x + 1].FormattedValue.replace('a', '');
                    result = {
                        label: r.Cells[x].FormattedValue,
                        skin: 'gridtable_checkout_hierarchy_bpsp_' + uiLevel,
                        cellVisible: true,
                        icon: 'icon-badge',
                        members: r.Cells[x].Members,
                        uiLevel: uiLevel,
                        productLevel: pl
                    };
                    return result;
                },

                (r, x) => {
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                    return {
                        title: c.FormattedValue.replace('PL', ''),
                        cellSkin: ''
                    }
                },

                (r, x) => {
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                    return {
                        title: c.FormattedValue,
                        cellSkin: ''
                    }
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 5);
                },
                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => { //8
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInColumnMode(r, x, 1);
                },

                (r, x) => {
                    return {cellVisible: false};
                },

                (r, x) => {
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                    return {
                        icon: c.FormattedValue === '0' ? 'icon-x' : (c.FormattedValue === '1' ? 'icon-check' : ''),
                        cellSkin: 'readonly_bpsp',
                        cellVisible: false
                    }
                },

                (r, x) => {
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                    return {
                        cellVisible: false
                    }
                },


            ]
        },

        getParsingControlCompareByRow: {
            type: 'matrix',
            length: 26,
            query: [
                (r, x) => {
                    let result,
                        versionKey = r.Cells[x].FormattedValue,
                        pl = r.Cells[x + 2].FormattedValue.replace('a', ''),
                        uiLevel = r.Cells[x + 7].FormattedValue,
                        colOffset = r.Cells[x + 8].FormattedValue,
                        productCode = r.Cells[x + 3].FormattedValue,
                        skin;
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = x;
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked'] = Utils.parseNumber(r.Cells[x + 4].FormattedValue) === 1;
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked'] = Utils.parseNumber(r.Cells[x + 4].FormattedValue) === 2 || Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsMainLocked'];
                    Widgets['systemValueRocheBPSPipPlanningGridTableYearIsChildrenLocked'] = Utils.parseNumber(r.Cells[x + 4].FormattedValue) === 3;
                    Widgets['systemValueRocheBPSPipPlanningCompareColumnOffset'] = colOffset;
                    skin = 'gridtable_hierarchy_bpsp_' + uiLevel;
                    if (Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyIsLocked']) {
                        skin += '_locked';
                    }
                    result = {
                        label: r.Cells[x + 1].FormattedValue,
                        productCode: productCode,
                        productLevel: pl,
                        uiLevel: uiLevel,
                        skin: skin,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        icon: x > 0 ? 'icon-rectangle-stack' : 'icon-badge',
                        versionKey: versionKey,
                        iconColor: '#ED8B00'
                    };
                    return result;
                },
                (r, x) => {
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 2;
                    let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                    return {
                        title: x > 2 ? '' : c.FormattedValue.replace('PL', ''),
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp'
                    }
                },

                (r, x) => {
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                    return {
                        title: x > 3 ? '' : c.FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp'
                    }
                },

                (r, x) => {
                    let incCols = 6 + parseInt(Widgets['systemValueRocheBPSPipPlanningCompareColumnOffset']);
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInRowMode(r, x, incCols);
                },
                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInRowMode(r, x, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInRowMode(r, x, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInRowMode(r, x, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInRowMode(r, x, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInRowMode(r, x, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInRowMode(r, x, 1);
                },
                (r, x) => {
                    return Repository.rocheBPSPIpPlanningCheckout.getGridTableMonthlyCellInRowMode(r, x, 1);
                },
                (r, x) => { // ez a 12.
                    return {
                        cellVisible: false
                    }
                },
                (r, x) => {
                    return {
                        cellVisible: false
                    }
                },
                (r, x) => {
                    return {
                        cellVisible: false
                    }
                },
                (r, x) => {
                    return {
                        cellVisible: false
                    }
                },
                (r, x) => {
                    return {
                        cellVisible: false
                    }
                },
                (r, x) => {
                    return {
                        cellVisible: false
                    }
                },
                (r, x) => {
                    return {
                        cellVisible: false
                    }
                },
                (r, x) => {
                    return {
                        cellVisible: false
                    }
                },
                (r, x) => {
                    return {
                        cellVisible: false
                    }
                },
                (r, x) => {
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                    return {
                        icon: c.FormattedValue === '0' ? 'icon-x' : (c.FormattedValue === '1' ? 'icon-check' : ''),
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        cellVisible: false
                    }
                },
                (r, x) => {
                    Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] = Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex'] + 1;
                    let c = r.Cells[Widgets['systemValueRocheBPSPipPlanningGridTableMonthlyRelativeIndex']];
                    return {
                        cellVisible: false
                    }
                },
            ]
        },

        getCopyVersionSource() {
            const b = Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode();
            if (b) {
                let r = Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.getRowsForCopyVersion('label');
                r.items.shift();
                return r;
            } else {
                return {
                    editable: false,
                    items: v('rocheBPSPIpPlanningCheckoutVersionSelectorTwo.items')
                };
            }
        },

        getRowsForCopyVersion(attribute = 'label') {
            const i = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.row');
            const l = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData')[i][0].versionKey;
            return {
                editable: true,
                items: v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData').map(e => {
                    return {
                        name: e[0].label,
                        key: e[0].versionKey,
                        on: e[0].versionKey === l
                    }
                })
            };
        },

        getCopyVersionTarget() {
            return {
                editable: false,
                items: v('rocheBPSPIpPlanningCheckoutVersionSelector.items')
            };
        },
        getCopyVersionRows() {
            const b = Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode();
            if (b) {
                return {
                    editable: false,
                    items: [{
                        name: v('systemValueIpPlanningCheckoutProduct'),
                        //name: v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData')[0][0].members[4].Name,
                        on: true
                    }]
                };
            } else {
                return Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.getRowsForCopyVersionInColumnsCompare();
            }
        },
        getRowsForCopyVersionInColumnsCompare(attribute = 'label') {
            const i = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.row');
            const l = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData')[i][0][attribute];
            return {
                items: v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData').map(e => {
                    return {
                        name: e[0][attribute],
                        key: e[0].members[4].Name,
                        on: e[0][attribute] === l
                    }
                })
            };
        },

        getCopyVersionColumns() {
            const b = Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode();
            return {
                editable: false,
                items: [
                    {
                        name: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected'),
                        on: true
                    }
                ]
            };
        },

        getCopyProcessParameters() {
            const b = Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode();
            if (b) {
                return {
                    pScope: 'cube:Sales Plan IP',
                    pElementFrom: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupSourceVersionDropbox', 'key'),
                    pElementTo: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupTargetVersionDropbox', 'key'),
                    pMaterial: v('systemValueCompareByRowSelectedMaterial'),
                    pYear: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupYearsDropbox', 'key'),
                    pCompany: Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                    receiver: v('rocheBPSPipPlanningGridRow1Cell3DropBox.value'),
                    contractTypes: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected'),
                    instrumentTypes: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupUsedDropbox', 'key'),
                    pMeasure: 'Value'
                };
            } else {   //compreByColumn
                return {
                    pScope: 'cube:Sales Plan IP',
                    pElementFrom: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupSourceVersionDropbox', 'key'),
                    pElementTo: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupTargetVersionDropbox', 'key'),
                    pMaterial: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupRowsDropbox', 'key'),
                    pYear: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupYearsDropbox', 'key'),
                    pCompany: Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                    receiver: v('rocheBPSPipPlanningGridRow1Cell3DropBox.value'),
                    contractTypes: v('rocheBPSPIpPlanningCheckoutGridSegmentedControlOne.selected'),
                    instrumentTypes: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupUsedDropbox', 'key'),
                    pMeasure: 'Value'
                };
            }
        },
        getCopyVersionYears() {
            let s = Utils.parseNumber(v('systemValueGlobalStartingPlanYear'));
            const currentCell = Utils.getGridTableCurrentCell('rocheBPSPIpPlanningCheckoutGridTableMonthly'),
                b = Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode(),
                selected = b ? Utils.parseNumber(currentCell.members[6].Name)
                    : Utils.parseNumber(currentCell.year);
            let g = (year, inc, selected) => {
                const s = year + inc;
                return {name: s.toString(), key: s, on: s === selected};
            };
            return {
                items: [
                    {name: 'All', key: '', on: false},
                    g(s, 0, selected),
                    g(s, 1, selected),
                    g(s, 2, selected),
                    g(s, 3, selected)
                ]
            };
        },

        getCopyVersionUsed() {
            let selected = v('rocheBPSPIpPlanningCheckoutSegmentedControlUsed.selected');
            return {
                items: [
                    {name: 'All', key: 'All', on: 'All' === selected},
                    {name: 'New', key: 'New', on: 'New' === selected},
                    {name: 'Used', key: 'Used', on: 'Used' === selected}
                ]
            };
        },

        getCopyProcessName() {
            return 'MODULE - UI - Input Copy';
        },
        text_click: {
            execute: (db, cell, widgetValue, row, col, event, element) => {
                if (Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByColumnMode() ||
                    Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.isCompareByRowMode()) {
                    Repository.rocheBPSPVersionsCopyDataTemplatePopup.setSource('rocheBPSPIpPlanningCheckoutGridTableMonthly');
                    Repository.rocheBPSPVersionsCopyDataTemplatePopup.refresh();
                    Api.openPopup('rocheBPSPVersionsCopyDataTemplatePopup', event, element);
                }
            }
        },

        refreshCopyVersionRelatedWidgets() {
            Api.forceRefresh('rocheBPSPIpPlanningCheckoutGridTableMonthly');
        },

        setCompareModeToRow(cellData) {
            Utils.setWidgetValue('systemValueCompareByRowSelectedMaterial', cellData.productCode);
        },

    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-04': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let b = Utils.parseNumber(v('systemValueIpPlanningSegmentedControlRelativeYearValue')) - 1;
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeLevelThree(index)
                        : b,
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : 'Actual'
                }
            }
        }
    },
    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-05': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let a = Utils.parseNumber(db.systemValueIpPlanningSegmentedControlRelativeYearValue);
                let b = Utils.parseNumber(db.systemValueIpPlanningSegmentedControlRelativeYearValue);
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? ''
                        : b,
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index)
                        : Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogicInNormalMode()
                }
            }
        }
    },
    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-06': {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPIpPlanningCheckoutGridTableMonthly');
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let b = v('systemValueIpPlanningSegmentedControlRelativeYearValue');
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '01'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-07': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? ''
                        : '',
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '02'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-08': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '03'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-09': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '04'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-10': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '05'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-11': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '06'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-12': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeLevelThree(index)
                        : '',
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '07'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-13': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '08'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-14': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '09'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-15': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '10'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-16': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '11'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-17': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : '12'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-18': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeLevelTwo(index)
                        : '',
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) : 'Total'
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-19': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? ''
                        : 'Variance',
                    body: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.titleInCompareModeVersion(index) :
                        'YEND vs Act ' + Utils.getGridTableCellByRowAndColumn('rocheBPSPIpPlanningCheckoutGridTableMonthly', 0, 18, 'year')
                };
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderText-20': {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPIpPlanningCheckoutGridTableMonthly');
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            execute: (db) => {
                return {body: 'YEND vs T3 ' + Utils.getGridTableCellByRowAndColumn('rocheBPSPIpPlanningCheckoutGridTableMonthly', 0, 19, 'year')};
            }
        }
    },
    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-04': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    width: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.headerWithInCompareMode() : '5%',
                    cellHeaderSkin: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.headerSkinInCompareModeVersion(index) : 'long_border_bpsp'
                }
            }
        }
    },
    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-05': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    width: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.headerWithInCompareMode() : '5%',
                    cellHeaderSkin: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.headerSkinInCompareModeVersion(index) : 'long_border_bpsp'
                }
            }
        }
    },
    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    width: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.headerWithInCompareMode() : '3.75%',
                    cellHeaderSkin: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? Repository.rocheBPSPIpPlanningCheckout.headerSkinInCompareModeVersion(index) : ''
                }
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-07': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-08': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-09': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-10': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-11': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-12': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-13': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-14': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-15': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-16': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-17': {
        reference: 'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-06'
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-18': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                return {
                    width: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? '4.25%' : '4%'
                }
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-19': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                return {
                    width: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? '4.25%' : '4%'
                }
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-20': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                return {
                    width: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? '4.25%' : '3%',
                    cellVisible: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? false : true
                }
            }
        }
    },

    'rocheBPSPIpPlanningCheckoutGridTableMonthlyHeaderCell-22': {
        initCondition: () => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                return {
                    cellVisible: Repository.rocheBPSPIpPlanningCheckout.gridTableHeaderLogic() ? false : true
                }
            }
        }
    },

    rocheBPSPIpPlanningCheckoutPageInit: {
        initCondition: (db) => {
            return v('systemValueIpPlanningUploadTargetPath') === false;
        },
        initDefault: (db) => {
            return true;
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                {
                    "MDX" : "
                        SELECT
                            {[Value Type].[Value Type].[String]}
                         ON COLUMNS ,
                            {[Measures Control].[Measures Control].[UI Excel upload path IP]}
                        ON ROWS
                        FROM [Control]
                    "
                }
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            Utils.setWidgetValue('systemValueIpPlanningUploadTargetPath', r.Cells[0].FormattedValue)
                            return true;
                        }
                    }
            }
        }
    },
    rocheBPSPIpPlanningCheckoutClearPopupClearSelectionButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Input Clear')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let scope = 'IP Planning',
                    lineItem = 'Final Quantity Plan',
                    company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                    receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell3DropBox', 'key'),
                    version = v('systemValueGlobalVersionKey'),
                    product = v('systemValueIpPlanningCheckoutProduct'),
                    year = v('systemValueIpPlanningSegmentedControlRelativeYearValue'),
                    contractType = v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected'),
                    instrumentType = v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')
                ;
                return `{
                        "Parameters": [
                                {"Name": "pScope", "Value": "${scope}"},
                                {"Name": "pVersion", "Value": "${version}"},
                                {"Name": "pCompany", "Value": "${company}"},
                                {"Name": "pLineItem", "Value": "${lineItem}"},
                                {"Name": "pYear", "Value": "${year}"},
                                {"Name": "pMaterial", "Value": "${product}"},
                                {"Name": "pReceiver", "Value": "${receiver}"},
                                {"Name": "pContractType", "Value": "${contractType}"},
                                {"Name": "pInstrumentType", "Value": "${instrumentType}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPIpPlanningCheckoutClearPopupClearAllButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Input Clear')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let scope = 'IP Planning',
                    lineItem = 'Final Quantity Plan',
                    company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                    receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell3DropBox', 'key'),
                    version = v('systemValueGlobalVersionKey'),
                    product = v('systemValueIpPlanningCheckoutProduct'),
                    year = v('systemValueIpPlanningSegmentedControlRelativeYearValue'),
                    contractType = v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected'),
                    instrumentType = v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')
                ;
                return `{
                        "Parameters": [
                                {"Name": "pScope", "Value": "${scope}"},
                                {"Name": "pVersion", "Value": "${version}"},
                                {"Name": "pCompany", "Value": "${company}"},
                                {"Name": "pLineItem", "Value": "${lineItem}"},
                                {"Name": "pMaterial", "Value": "${product}"},
                                {"Name": "pReceiver", "Value": "${receiver}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPIpPlanningCheckoutUploadPopupPlDropbox: {
        initCondition: (db) => {
            let l = v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData.length');
            return l !== false && l !== 0;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return [{name: 'PL8', key: 'PL8', on: true}]
                /*return v('rocheBPSPIpPlanningCheckoutGridTableMonthly.cellData').map(function (e) {
                    return {name: e[1].title === 'IP Node' ? e[1].title : 'PL' + e[1].title, key: e[1].title, on: false}
                }).reduce((acc, current) => {
                    const x = acc.find(item => item.name === current.name);
                    if (!x) {
                        return acc.concat([current]);
                    } else {
                        return acc;
                    }
                }, []);*/
            }
        }
    },
    rocheBPSPIpPlanningCheckoutUploadPopupUpload: {
        upload: (db) => {
            let fileName = Repository.rocheBPSPipPlanning.getFileName(db);
            Utils.modifyFileName('rocheBPSPIpPlanningCheckoutUploadPopupUpload', fileName);
            Utils.setWidgetValue('systemValueUploadFileName', fileName + '.csv');
            return {
                staging: app.defaultUploadStagingFolder,
                target: v('systemValueIpPlanningUploadTargetPath'),
                productLevel: v('rocheBPSPIpPlanningCheckoutUploadPopupPlDropbox.value'),
                validation: 'validateIpPlanningExcelImport',
                validationUser: db.activeUserName,
                validationCompany: Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                validationReceiver: v('rocheBPSPipPlanningGridRow1Cell3DropBox.value'),
                validationGlobalVersion: v('systemValueGlobalVersionKey'),
                validationVersion: db.systemValueGlobalCompanyProductPlanVersion,
                validationProduct: db.systemValueIpPlanningCheckoutProduct,
                validationMessage: 'First row of excel does not match'
            };
        },
        request: {
            url: (db) => `/api/v1/Processes('MODULE - UI - CSV Upload Post Processing IP')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let fileName = v('systemValueUploadFileName');
                return `{
                        "Parameters": [
                                {"Name": "pUser", "Value": "${db.activeUserName}"},
                                {"Name": "pProduct", "Value": "${db.systemValueIpPlanningCheckoutProduct}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell3DropBox', 'key')}"},
                                {"Name": "pTargetCube", "Value": "Sales Plan IP"},
                                {"Name": "pSelectedMaterialLevel", "Value": "${v('rocheBPSPIpPlanningCheckoutUploadPopupPlDropbox.value')}"},
                                {"Name": "pVersion", "Value": "${v('systemValueGlobalVersionKey')}"},
                                {"Name": "pFileName", "Value": "${fileName}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPIpPlanningCheckoutCommentShowGridTable: {
        initCondition: (db) => {
            let g = 'rocheBPSPIpPlanningCheckoutGridTableMonthly';
            return Utils.isGridTableLoaded(g) && Utils.getGridTableCell(g, 2).title;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let g = 'rocheBPSPIpPlanningCheckoutGridTableMonthly';
                let productCode = Utils.getGridTableCell(g, 2).title;
                return `{"MDX":"
                      SELECT 
                   {[Measures Sales Plan IP].[Measures Sales Plan IP].[Comment]} 
                  ON COLUMNS , 
                   {[Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}]} 
                            ON ROWS 
                        FROM [Sales Plan IP] 
                        WHERE 
                          (
                           [Versions].[Versions].[${v('systemValueGlobalVersionKey')}],
                           [LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan],
                           [Receivers].[Receivers].[${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}],
                           [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].[${productCode}],
                           [Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}],
                           [Contract Types].[Contract Types].[${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}],
                           [Instrument Types].[Instrument Types].[${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}]
                          )
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 1,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue,
                        }
                    }]
            }
        }
    },
    rocheBPSPIpPlanningCheckoutCommentShowGridTableSource: {
        initCondition: (db) => {
            let g = 'rocheBPSPIpPlanningCheckoutGridTableMonthly';
            return Utils.isGridTableLoaded(g) && Utils.getGridTableCell(g, 2).title;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let g = 'rocheBPSPIpPlanningCheckoutGridTableMonthly';
                let productCode = Utils.getGridTableCell(g, 2).title;
                return `{"MDX":"
                      SELECT 
                   {[Measures Sales Plan IP].[Measures Sales Plan IP].[CommentSource],
                   [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedBy],
                   [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedDateTime]} 
                  ON COLUMNS , 
                   {[Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}]} 
                            ON ROWS 
                        FROM [Sales Plan IP] 
                        WHERE 
                          (
                           [Versions].[Versions].[${v('systemValueGlobalVersionKey')}],
                           [LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan],
                           [Receivers].[Receivers].[${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}],
                           [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].[${productCode}],
                           [Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}],
                           [Contract Types].[Contract Types].[${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}],
                           [Instrument Types].[Instrument Types].[${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}]
                          )
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 3,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue + '<br/><div style=\"margin-top:20px; float: left; font-size: 10px;  ";  >'
                                + 'Edited by ' + '</div>' + '<div style=\"font-size:12px; font-weight: bold; margin-top:18px; margin-left: 3px; float: left;";  >'
                                + r.Cells[x + 1].FormattedValue + '</div>' + '<div style=\"font-size:10px;color:#B1B3B3;margin-top:20px;margin-left: 5px; float: left; \" >'
                                + r.Cells[x + 2].FormattedValue + '</div>',
                        }
                    }


                ]
            }
        }
    },
    rocheBPSPIpPlanningCheckoutCommentEditGridRow2CommentInput: {
        init: {
            execute: (db) => {
                let l = v('rocheBPSPIpPlanningCheckoutCommentShowGridTable.cellData.length'), r = {value: ''};
                if (l !== false && l !== 0) {
                    r.value = v('rocheBPSPIpPlanningCheckoutCommentShowGridTable.cellData')[0][0].title;
                }
                return r;
            }
        }
    },
    rocheBPSPIpPlanningCheckoutCommentEditGridRow3TextInput: {
        init: {
            execute: (db) => {
                let l = v('rocheBPSPIpPlanningCheckoutCommentShowGridTableSource.cellData.length'), r = {value: ''};
                if (l !== false && l !== 0) {
                    r.value = v('rocheBPSPIpPlanningCheckoutCommentShowGridTableSource.cellData')[0][0].title.split('<br/>')[0];
                }
                return r;
            }
        }
    },
    rocheBPSPIpPlanningCheckoutGridRow2Cell1aButton: {

        launch: {
            download: (db) => {
                let y1 = parseInt(db.systemValueGlobalStartingPlanYear),
                    fileName = Repository.rocheBPSPipPlanning.getFileName(db);
                return {
                    url: 'export?export_key=rocheIpPlanningMonthly&file_name=' + fileName + '.xlsx',
                    activeUserName: db.activeUserName,
                    fileName: fileName + '.xlsx',
                    companyVersion: v('systemValueGlobalVersionKey'), //Live
                    productPlanVersion: db.systemValueGlobalCompanyProductPlanVersion, //Budget
                    company: Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key'),
                    receiver: v('rocheBPSPipPlanningGridRow1Cell3DropBox.value'),
                    material: db.systemValueIpPlanningCheckoutProduct,
                    globalVersion: db.systemValueGlobalCompanyVersion,
                    version: v('systemValueGlobalVersionKey'),
                    year1: y1,
                    year2: y1 + 1,
                    key: 'exportIpPlanningMonthly'
                };
            }
        }
    },


    // IP PLanning Checked out versioning
    rocheBPSPIpPlanningCheckoutVersionSelector: {
        init: {
            execute: (db) => {
                return {
                    items: [{
                        name: v('systemValueGlobalVersion'),
                        key: v('systemValueGlobalVersionKey'),
                        on: true
                    }],
                    editable: false
                };
            }
        }
    },
    rocheBPSPIpPlanningCheckoutVersionSelectorTwo: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersionCompareByColumn', v('rocheBPSPIpPlanningCheckoutVersionSelectorTwo.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {EXCEPT(
                    {FILTER(
                        {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                        , [Version Information by Company].([Companies].[Companies].
                        [${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}],
                        [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                    , {[Versions].[Versions].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningVersionSelector', 'key')}]} )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersionCompareByColumn');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue,
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPIpPlanningCheckoutValueSegmentedControl: {
        init: {
            execute: (db) => {
                return {
                    data: [
                        {
                            value: 'VALUE',
                            selected: v('rocheBPSPIpPlanningCheckoutValueSegmentedControl.selected') === 'VALUE' || v('rocheBPSPIpPlanningCheckoutValueSegmentedControl.selected') === false
                        },
                        {
                            selected: v('rocheBPSPIpPlanningCheckoutValueSegmentedControl.selected') === 'PercentVariance',
                            value: 'PercentVariance'
                        },
                        {
                            selected: v('rocheBPSPIpPlanningCheckoutValueSegmentedControl.selected') === 'AbsoluteVariance',
                            value: 'AbsoluteVariance'
                        }
                    ]
                };
            }

        }
    },
    rocheBPSPIpPlanningCheckoutVersioningColumnButton: {
        init: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningCheckedOutCompareBy', 'None');
            }
        },
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningCheckedOutCompareBy', 'Column');
            }
        }
    },
    rocheBPSPIpPlanningCheckoutVersioningExitButton: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningCheckedOutCompareBy', 'None');
            }
        }
    },

    rocheBPSPIpPlanningCheckoutCompareByRowPopupGridTable_row_0: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningCheckedOutCompareBy', 'Row');
            }
        }
    },


    rocheBPSPIpPlanningCheckoutCompareByRowPopupGridTable: {
        initCondition: (db) => {
            return Repository.rocheBPSPIpPlanningCheckout.initCondition(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                let g = 'rocheBPSPIpPlanningCheckoutGridTableMonthly';
                let searchString = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPIpPlanningCheckoutCompareByRowPopupCell1SearchBox')) {
                    searchString = v('rocheBPSPIpPlanningCheckoutCompareByRowPopupCell1SearchBox.value').toUpperCase()
                }
                return v(g + '.cellData').filter(e => e[0].label.toUpperCase().includes(searchString)).map(e => {
                    return [{
                        label: e[0].label,
                        skin: 'gridtable_hierarchy_compare_byrow_bpsp_' + e[0].uiLevel,
                        productCode: e[2].title
                    }];
                });
            }
        },
        launch: {
            execute: (db, cellData) => {
                Repository.rocheBPSPIpPlanningCheckoutGridTableMonthly.setCompareModeToRow(cellData),
                    Utils.setWidgetValue('systemValueIpPlanningCheckedOutCompareBy', 'Row');
            }
        }
    },


    rocheBPSPAddMaterialGridRow1Cell0Button: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueMaterialReturnFromSearch', true);
            }
        }

    },
    rocheBPSPSettingsGridRow2Cell3Button: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueMaterialReturnFromSearch', true);
            }
        }

    },
    rocheBPSPMaterialGridTable:
        {

            initCondition: (db) => {
                let a = Utils.setWidgetValueIfNotExist('systemValueMaterialReturnFromSearch', false);
                let b = a === false && Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') && db.systemValueGlobalCompanyProductPlanVersion;
                Utils.setWidgetValue('systemValueMaterialReturnFromSearch', false);
                return b;
            },
            initDefault: (db) => {
                return [];
            },

            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
                    type: 'POST',
                    body: (db) => {
                        let searchString = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow3Cell1SearchBox')) {
                            searchString = v('rocheBPSPMaterialGridRow3Cell1SearchBox.value').toUpperCase();


                        }
                        return `{"MDX":"
                                    
                                    With 
                                    Member[}ElementAttributes_Materials].[}ElementAttributes_Materials].[AddDummyFlag] As
                                    IIF([}ElementAttributes_Materials].[}ElementAttributes_Materials].[Product Level - Name]='PL6',1,0)
                                    -- IP Node and has no pland Data then deletable
                                    Member[}ElementAttributes_Materials].[}ElementAttributes_Materials].[DeleteFlag] As
                                    IIF([}ElementAttributes_Materials].[}ElementAttributes_Materials].[Product Level - Name]='PL8' AND
                                        [Material Information by Company].([ Companies].[ Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}],
                                        [Measures Material Information by Company].[Measures Material Information by Company].[Flag - Has plan data]) = 0,1,0)
                                    -- IP Node and has pland Data then go to plan
                                    Member[}ElementAttributes_Materials].[}ElementAttributes_Materials].[NextFlag] As
                                    IIF([}ElementAttributes_Materials].[}ElementAttributes_Materials].[Product Level - Name]='PL8' AND
                                        [Material Information by Company].([ Companies].[ Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}],
                                        [Measures Material Information by Company].[Measures Material Information by Company].[Flag - Has plan data]) <> 0,1,0)
                                    Member[}ElementAttributes_Materials].[}ElementAttributes_Materials].[EditFlag] As
                                    IIF([}ElementAttributes_Materials].[}ElementAttributes_Materials].[Product Level - Name]='PL8' AND
                                        [}ElementAttributes_Materials].[}ElementAttributes_Materials].[Dummy Flag]=1,1,0)
                                    SELECT 
                                       {[}ElementAttributes_Materials].[}ElementAttributes_Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Name],
                                        [}ElementAttributes_Materials].[}ElementAttributes_Materials].[Product Level - Name],
                                         [}ElementAttributes_Materials].[}ElementAttributes_Materials].[Element],
                                         [}ElementAttributes_Materials].[}ElementAttributes_Materials].[AddDummyFlag],
                                         [}ElementAttributes_Materials].[}ElementAttributes_Materials].[DeleteFlag],
                                         [}ElementAttributes_Materials].[}ElementAttributes_Materials].[NextFlag],
                                         [}ElementAttributes_Materials].[}ElementAttributes_Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} UI Level Format], 
                                         [}ElementAttributes_Materials].[}ElementAttributes_Materials].[EditFlag]}
                                      ON COLUMNS , 
                                      -- {TM1SubsetToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}],'${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')} MM')}
                                          {Filter({TM1SubsetToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}], '${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')} MM')},
                                                 Instr(UCASE([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Name]), '${searchString}') > 0)}
                                      ON ROWS 
                                    FROM [}ElementAttributes_Materials] 
                                    "}`;

                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 8,
                        query: [


                            (r, x) => {
                                return {
                                    label: r.Cells[x].FormattedValue,
                                    skin: 'gridtable_hierarchy_bpsp_' + r.Cells[x + 6].FormattedValue
                                }
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 1].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 2].FormattedValue}
                            },

                            (r, x) => {
                                return {
                                    icon: parseInt(r.Cells[x + 3].FormattedValue) === 1 ? 'icon-plus-circle-outline' : '',
                                    cellSkin: parseInt(r.Cells[x + 3].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                }
                            },

                            (r, x) => {
                                return {
                                    icon: parseInt(r.Cells[x + 4].FormattedValue) === 1 ? 'icon-trash' : '',
                                    cellSkin: parseInt(r.Cells[x + 4].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                }
                            },
                            (r, x) => {
                                return {
                                    icon: parseInt(r.Cells[x + 5].FormattedValue) === 1 ? 'icon-copy' : '',
                                    cellSkin: parseInt(r.Cells[x + 5].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                }
                            },
                            (r, x) => {
                                return {
                                    icon: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? 'icon-edit' : '',
                                    cellSkin: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                }
                            },
                        ]
                    }
                },
        },
    rocheBPSPMaterialDeleteDataPopupControlPanelAddButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Maintenance Remove Material From Subset')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                        
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pMaterial", "Value": "${Utils.getGridTableCell('rocheBPSPMaterialGridTable', 2).title}"},
                        
                        ]


                    }`
            },
    },
    rocheBPSPMaterialMoveDataPopupControlPanelAddButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Maintenance Move IP plan')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                        
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pMaterialFrom", "Value": "${Utils.getGridTableCell('rocheBPSPMaterialGridTable', 2).title}"},
                                {"Name": "pMaterialTo", "Value": "${v('rocheBPSPMaterialMoveDataPopupGridRow2Cell1Dropbox.value')}"},
                        ]


                    }`
            },
    },
    rocheBPSPMaterialIPNodeGridTable:
        {
            initCondition: (db) => {
                return Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') && db.systemValueGlobalCompanyProductPlanVersion;
            },
            initDefault: (db) => {
                return [];
            },
            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
                    type: 'POST',
                    body: (db) => {
                        let searchString = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow3Cell1SearchBox')) {
                            searchString = v('rocheBPSPMaterialGridRow3Cell1SearchBox.value').toUpperCase();
                        }
                        return `{"MDX":"                     
								With 
								-- IP Node then add dummy flag
								Member[}ElementAttributes_Materials].[}ElementAttributes_Materials].[AddDummyFlag] As
								IIF([}ElementAttributes_Materials].[}ElementAttributes_Materials].[Product Level - Name]='IP Node',1,0)
								-- IP Node and has no pland Data then deletable
								Member[}ElementAttributes_Materials].[}ElementAttributes_Materials].[DeleteFlag] As
								IIF([}ElementAttributes_Materials].[}ElementAttributes_Materials].[Product Level - Name]='PL8' AND
								    [Material Information by Company].([ Companies].[ Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}],
								    [Measures Material Information by Company].[Measures Material Information by Company].[Flag - Has plan data]) = 0,1,0)
								-- IP Node and has pland Data then go to plan
								Member[}ElementAttributes_Materials].[}ElementAttributes_Materials].[NextFlag] As
								IIF([}ElementAttributes_Materials].[}ElementAttributes_Materials].[Product Level - Name]='PL8' AND
								    [Material Information by Company].([ Companies].[ Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}],
								    [Measures Material Information by Company].[Measures Material Information by Company].[Flag - Has plan data]) <> 0,1,0)
                                Member[}ElementAttributes_Materials].[}ElementAttributes_Materials].[EditFlag] As
                                IIF([}ElementAttributes_Materials].[}ElementAttributes_Materials].[Product Level - Name]='PL8' AND
                                    [}ElementAttributes_Materials].[}ElementAttributes_Materials].[Dummy Flag]=1,1,0)
								SELECT 
								   {[}ElementAttributes_Materials].[}ElementAttributes_Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP Name],
								   [}ElementAttributes_Materials].[}ElementAttributes_Materials].[Product Level - Name],
								   [}ElementAttributes_Materials].[}ElementAttributes_Materials].[Element],
								   [}ElementAttributes_Materials].[}ElementAttributes_Materials].[AddDummyFlag],
								   [}ElementAttributes_Materials].[}ElementAttributes_Materials].[DeleteFlag],
								   [}ElementAttributes_Materials].[}ElementAttributes_Materials].[NextFlag],
								   [}ElementAttributes_Materials].[}ElementAttributes_Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP UI Level Format], 
                                   [}ElementAttributes_Materials].[}ElementAttributes_Materials].[EditFlag]}
								  ON COLUMNS , 
								  {Filter({TM1SubsetToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP], '${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')} MM')},
								   Instr(UCASE([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP Name]), '${searchString}') > 0)}
								   PROPERTIES [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].[Caption]  ON ROWS 
								FROM [}ElementAttributes_Materials]
                                    "}`;
                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 8,
                        query: [
                            (r, x) => {
                                return {
                                    label: r.Cells[x].FormattedValue,
                                    skin: 'gridtable_hierarchy_bpsp_' + r.Cells[x + 6].FormattedValue
                                }
                            },
                            (r, x) => {
                                return {title: r.Cells[x + 1].FormattedValue}
                            },
                            (r, x) => {
                                return {title: r.Cells[x + 2].FormattedValue}
                            },
                            (r, x) => {
                                return {
                                    icon: parseInt(r.Cells[x + 3].FormattedValue) === 1 ? 'icon-plus-circle-outline' : '',
                                    cellSkin: parseInt(r.Cells[x + 3].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                }
                            },
                            (r, x) => {
                                return {
                                    icon: parseInt(r.Cells[x + 4].FormattedValue) === 1 ? 'icon-trash' : '',
                                    cellSkin: parseInt(r.Cells[x + 4].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                }
                            },
                            (r, x) => {
                                return {
                                    icon: parseInt(r.Cells[x + 5].FormattedValue) === 1 ? 'icon-copy' : '',
                                    cellSkin: parseInt(r.Cells[x + 5].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                }
                            },
                            (r, x) => {
                                return {
                                    icon: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? 'icon-edit' : '',
                                    cellSkin: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                }
                            },
                        ]
                    }
                },
        },
    rocheBPSPAddMaterialCompanyInfo: {
        init: {
            execute: (db) => {
                return {title: v('rocheBPSPMaterialGridRow1Cell2DropBox.value')};
            }
        }
    },
    RocheBPSPMaterialsAddMaterialSearchSelectAll: {
        init: {
            execute: (db) => {
                return {visible: Utils.isGridTableLoaded('RocheBPSPMaterialsAddMaterialSearch')};
            }
        },
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Material Search Table Select All Filtered')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let dbV = v('rocheBPSPAddMaterialGridRow4Cell3Dropbox.value');
                dbV = dbV === false ? '' : dbV;

                let IDsearch = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPAddMaterialGridRow4Cell1Search')) {
                    IDsearch = v('rocheBPSPAddMaterialGridRow4Cell1Search.value');
                }

                let DescriptionSearch = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPAddMaterialGridRow4Cell2Search')) {
                    DescriptionSearch = v('rocheBPSPAddMaterialGridRow4Cell2Search.value');
                }

                let ProfitCenterSearch = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPAddMaterialGridRow4Cell4Search')) {
                    ProfitCenterSearch = v('rocheBPSPAddMaterialGridRow4Cell4Search.value');
                }

                let IpNodeSearch = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPAddMaterialGridRow4Cell5Search')) {
                    IpNodeSearch = v('rocheBPSPAddMaterialGridRow4Cell5Search.value');
                }
                return `{
                        "Parameters": [
                                {"Name": "pMaterialCategory", "Value": "${dbV}"},
                                {"Name": "pProfitCenterBudget", "Value": "${ProfitCenterSearch}"},
                                {"Name": "pIPProfitCenterBudget", "Value": "${IpNodeSearch}"},
                                {"Name": "pElement", "Value": "${IDsearch}"},
                                {"Name": "pMediumName", "Value": "${DescriptionSearch}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPMateralsAddMaterialSearchPagerInfoText: {
        init: {
            execute: (db) => {
                if (v('RocheBPSPMaterialsAddMaterialSearch.cellData.length') === false) {
                    return {visible: false};
                }
                return {title: Utils.getGridTablePagerText('RocheBPSPMaterialsAddMaterialSearch')};
            }
        }
    },
    rocheBPSPMateralsAddMaterialSearchPagerPreviousButton: {
        init: {
            execute: (db) => {
                if (v('RocheBPSPMaterialsAddMaterialSearch.cellData.length') === false) {
                    return {visible: false};
                }
                return {visible: Utils.isGridTablePagerPreviousButtonVisible('RocheBPSPMaterialsAddMaterialSearch')};
            }
        }
    },
    rocheBPSPMateralsAddMaterialSearchPagerFirstPageButton: {
        init: {
            execute: (db) => {
                if (v('RocheBPSPMaterialsAddMaterialSearch.cellData.length') === false) {
                    return {visible: false};
                }
                return Repository.rocheBPSPMateralsAddMaterialSearchPagerPreviousButton.init.execute(db);
            }
        }
    },
    rocheBPSPMateralsAddMaterialSearchPagerNextButton: {
        init: {
            execute: (db) => {
                if (v('RocheBPSPMaterialsAddMaterialSearch.cellData.length') === false) {
                    return {visible: false};
                }
                return {visible: Utils.isGridTablePagerNextButtonVisible('RocheBPSPMaterialsAddMaterialSearch')};
            }
        }
    },
    rocheBPSPMateralsAddMaterialSearchPagerLastPageButton: {
        init: {
            execute: (db) => {
                if (v('RocheBPSPMaterialsAddMaterialSearch.cellData.length') === false) {
                    return {visible: false};
                }
                return Repository.rocheBPSPMateralsAddMaterialSearchPagerNextButton.init.execute(db);
            }
        }
    },
    RocheBPSPMaterialsAddMaterialSearch:
        {
            switch: {
                url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
                type: 'PATCH',
                body: (db, cell, widgetValue, row, col) => {
                    Widgets['RocheBPSPMaterialsAddMaterialSearch']['cellData'][row][col].value = widgetValue.value;
                    return `{"Ordinal": ${widgetValue.ordinal},"Value": \"${widgetValue.value}\"}`
                }
            },


            refresh_col_0: {
                execute: (db) => {
                    return {value: v('RocheBPSPMaterialsAddMaterialSearchSelectAll.switch.value')};
                }
            },
            initCondition: (db) => {
                let l = v('rocheBPSPAddMaterialGridRow4Cell1Search.value') != '' ||
                    v('rocheBPSPAddMaterialGridRow4Cell2Search.value') != '' || v('rocheBPSPAddMaterialGridRow4Cell3Dropbox.value') != ''
                    || v('rocheBPSPAddMaterialGridRow4Cell4Search.value') != '' || v('rocheBPSPAddMaterialGridRow4Cell5Search.value') != '';
                return l;
            },
            initDefault: (db) => {
                return [];
            },
            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Consolidated,RuleDerived,Updateable;$expand=Members($select=Name, Attributes/Caption))`,
                    type: 'POST',

                    body: (db) => {

                        let dbV = v('rocheBPSPAddMaterialGridRow4Cell3Dropbox.value');
                        dbV = dbV === false ? '' : dbV;

                        let IDsearch = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPAddMaterialGridRow4Cell1Search')) {
                            IDsearch = v('rocheBPSPAddMaterialGridRow4Cell1Search.value');
                        }

                        let DescriptionSearch = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPAddMaterialGridRow4Cell2Search')) {
                            DescriptionSearch = v('rocheBPSPAddMaterialGridRow4Cell2Search.value');
                        }

                        let ProfitCenterSearch = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPAddMaterialGridRow4Cell4Search')) {
                            ProfitCenterSearch = v('rocheBPSPAddMaterialGridRow4Cell4Search.value');
                        }

                        let IpNodeSearch = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPAddMaterialGridRow4Cell5Search')) {
                            IpNodeSearch = v('rocheBPSPAddMaterialGridRow4Cell5Search.value');
                        }
                        return `{"MDX":"

                                With 
                                Member [Measures Material Information by Company].[Measures Material Information by Company].[ID] As
                                   [Materials].[Materials].CurrentMember.Properties('Element')
                                Member [Measures Material Information by Company].[Measures Material Information by Company].[Description] As
                                   [Materials].[Materials].CurrentMember.Properties('Medium Name')   
                                Member [Measures Material Information by Company].[Measures Material Information by Company].[Status] As
                                   [Materials].[Materials].CurrentMember.Properties('Material Status - Key')
                                Member [Measures Material Information by Company].[Measures Material Information by Company].[Instrument Category] As
                                   [Materials].[Materials].CurrentMember.Properties('Material Category - Key')
                                Member [Measures Material Information by Company].[Measures Material Information by Company].[Current Profit Center] As
                                   [Materials].[Materials].CurrentMember.Properties('Profit Center Actual - Key')
                                Member [Measures Material Information by Company].[Measures Material Information by Company].[Budget Profit Center] As
                                   [Materials].[Materials].CurrentMember.Properties('Profit Center Budget - Key')
                                Member [Measures Material Information by Company].[Measures Material Information by Company].[Product Type] As
                                   [Materials].[Materials].CurrentMember.Properties('Material Type - Key')
                                Member [Measures Material Information by Company].[Measures Material Information by Company].[Current IP Node] As
                                   [Materials].[Materials].CurrentMember.Properties('IP Profit Center Actual - Key')
                                Member [Measures Material Information by Company].[Measures Material Information by Company].[Budget IP Node] As
                                   [Materials].[Materials].CurrentMember.Properties('IP Profit Center Budget - Key')
                                Member [Measures Material Information by Company].[Measures Material Information by Company].[IP Reporting Relevant] As
                                   [Materials].[Materials].CurrentMember.Properties('IP DIS Relevant Flag')
                                Set ColumnSelection As
                                  {
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Shopping Basket],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[ID],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Description],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Status],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Instrument Category],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Current Profit Center],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Budget Profit Center],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Product Type],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Current IP Node],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Budget IP Node],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Last Modified],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[IP Reporting Relevant],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Status Message]
                                  }
                                SELECT 
                                   {ColumnSelection} 
                                   PROPERTIES [Measures Material Information by Company].[Measures Material Information by Company].[Caption]  ON COLUMNS ,
                                   Subset(
                                   Filter({
                                     FILTER({
                                      FILTER({
                                       FILTER({
                                        FILTER({
                                         TM1FILTERBYLEVEL({
                                           FILTER({TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[Materials].[Materials].[All Materials]}, ALL, RECURSIVE )}, 0)}, [Materials].[Materials].[Dummy Flag] = 0 )
                                         }, 0)
                                }, InStr([Materials].[Materials].CurrentMember.Properties('Material Category - Key') , '${dbV}') <> 0)
                                }, InStr([Materials].[Materials].CurrentMember.Properties('Profit Center Budget - Key') ,'${ProfitCenterSearch}')<>0)
                                }, InStr([Materials].[Materials].CurrentMember.Properties('IP Profit Center Budget - Key'), '${IpNodeSearch}')<>0)
                                }, InStr([Materials].[Materials].CurrentMember.Properties('Element'), '${IDsearch}' ) <> 0 AND
                                   InStr([Materials].[Materials].CurrentMember.Properties('Medium Name'), '${DescriptionSearch}' ) <> 0 )
                                   } 
                                   ,[Material Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}],
                                   [Measures Material Information by Company].[Measures Material Information by Company].[Status flag])${v('rocheBPSPAddMaterialGridRow4Cell5ValidToggle.switch.value') ? '=' : '>='}0)
                                   ,0,1000)  
                                   PROPERTIES [Materials].[Materials].[Caption]  ON ROWS 
                                FROM [Material Information by Company] 
                                WHERE 
                                  (
                                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}]
                                  )
                                    "}`;

                    },

                    parsingControl: {
                        type: 'matrix',
                        length: 13,
                        query: [


                            (r, x) => {
                                let editable = r.Cells[x].Consolidated === false && r.Cells[x].RuleDerived === false;
                                return {
                                    ordinal: r.Cells[x].Ordinal,
                                    value: r.Cells[x].FormattedValue,
                                    editable: editable,
                                    visible: editable,
                                }
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 1].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 2].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 3].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 4].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 5].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 6].FormattedValue}
                            },
                            (r, x) => {
                                return {title: r.Cells[x + 7].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 8].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 9].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 10].FormattedValue}
                            },

                            (r, x) => {
                                return {icon: r.Cells[x + 11].FormattedValue === '' ? 'icon-x' : 'icon-check',}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 12].FormattedValue}
                            },

                            (r, x) => {
                                let editable = r.Cells[x].Consolidated === false && r.Cells[x].RuleDerived === false;
                                return {
                                    visible: editable ? '' : false,
                                }
                            },


                        ]
                    }

                },
        },
    rocheBPSPAddMaterialRemoveClipBoard: {
        launch: {
            url: (db) => `/api/v1/Cellsets('${Repository.rocheBPSPAddMaterialGridRow3Cell2Button.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db) => {
                let values = Utils.getOrdinalValuePairsAndEmptyFilledValues([], v('rocheBPSPAddMaterialGridRow3Cell2Button.data.cells'));
                let selectedElements = v('rocheBPSPAddMaterialGridRow3Cell2Button.data.selectedElements'),
                    selectedValues = Utils.getArrayWithValues(v('rocheBPSPAddMaterialGridRow3Cell2Button.data.cells').filter((e) => e.FormattedValue !== '').length, 0);
                let ordinalValuePairs = Utils.getOrdinalValuePairs(selectedElements, selectedValues), patch = [];
                if (ordinalValuePairs !== '') {
                    patch.push(ordinalValuePairs);
                }
                if (values !== '') {
                    patch.push(values);
                }
                return patch.length === 0 ? '[]' : `[${patch.join(',')}]`;
            }
        }
    },
    rocheBPSPAddMaterialGridRow3Cell2Button: {
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `{"MDX":"
                SELECT 
                    {[Measures Material Import by Company].[Measures Material Import by Company].[Materials],
                    [Measures Material Import by Company].[Measures Material Import by Company].[Selected for Basket Input]} 
                ON COLUMNS , 
                    {TM1FILTERBYLEVEL({[Items].[Items].Members}, 0)} 
                ON ROWS 
                FROM [Material Import by Company] 
                WHERE 
                (
                    [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}]
                )
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        cells: (r, x) => {
                            return Utils.getEvenElements(r.Cells);
                        },
                        selectedElements: (r, x) => {
                            return Utils.getOddElements(r.Cells);
                        }
                    }
            }
        },
        launchpaste: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db) => {
                return Repository.rocheBPSPAddMaterialRemoveClipBoard.launch.body(db);
            }
        },
        request: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db) => {
                let values = Utils.getCellsByColumnsFromClipboard('rocheBPSPAddMaterialGridRow3Cell2Button', 0);
                let existingValues = v('rocheBPSPAddMaterialGridRow3Cell2Button.data.cells'),
                    selectedElements = v('rocheBPSPAddMaterialGridRow3Cell2Button.data.selectedElements'),
                    selectedValues = Utils.getArrayWithValues(values.length, 1);
                return `[${Utils.getOrdinalValuePairs(selectedElements, selectedValues)}, ${Utils.getOrdinalValuePairsAndEmptyFilledValues(values, existingValues)}]`;
            }
        }
    },
    RocheBPSPMaterialsAddMaterialClipboardSelectAll: {
        init: {
            execute: (db) => {
                return {
                    value: v('RocheBPSPMaterialsAddMaterialClipboardSelectAll.switch.value')
                }
            }
        }
    },
    RocheBPSPMaterialsAddMaterialClipboard:
        {

            switch: {
                url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
                type: 'PATCH',
                body: (db, cell, widgetValue, row, col) => {
                    return `{"Ordinal": ${widgetValue.ordinal},"Value": \"${widgetValue.value}\"}`
                }
            },

            refresh_col_0: {
                execute: (db) => {
                    return {value: v('RocheBPSPMaterialsAddMaterialClipboardSelectAll.switch.value')};
                }
            },
            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Consolidated,RuleDerived,Updateable;$expand=Members($select=Name, Attributes/Caption))`,
                    type: 'POST',
                    body: (db) => `{"MDX":"
                                SELECT 
                                   {[Measures Material Import by Company].[Measures Material Import by Company].[Selected for Basket],
                                    [Measures Material Import by Company].[Measures Material Import by Company].[Materials],
                                    [Measures Material Import by Company].[Measures Material Import by Company].[Medium Name],
                                    [Measures Material Import by Company].[Measures Material Import by Company].[Material Type - Key],
                                    [Measures Material Import by Company].[Measures Material Import by Company].[Material Status - Key],
                                    [Measures Material Import by Company].[Measures Material Import by Company].[Material Category - Key],
                                    [Measures Material Import by Company].[Measures Material Import by Company].[Profit Center Current - Key],
                                    [Measures Material Import by Company].[Measures Material Import by Company].[Profit Center Budget - Key],
                                    [Measures Material Import by Company].[Measures Material Import by Company].[IP Profit Center Current - Key],
                                    [Measures Material Import by Company].[Measures Material Import by Company].[IP Profit Center Budget - Key],
                                    [Measures Material Import by Company].[Measures Material Import by Company].[Status Message]} 
                                  ON COLUMNS , 
                                  NON EMPTY  {TM1FILTERBYLEVEL({[Items].[Items].Members}, 0)} 
                                  ON ROWS 
                                FROM [Material Import by Company] 
                                WHERE 
                                  (
                                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}]
                                  )

            "}`,
                    parsingControl: {
                        type: 'matrix',
                        length: 11,
                        query: [

                            (r, x) => {
                                let value = Utils.parseNumber(r.Cells[x].FormattedValue), editable = value !== -1;
                                return {
                                    ordinal: r.Cells[x].Ordinal,
                                    value: r.Cells[x].FormattedValue,
                                    //value: v('RocheBPSPMaterialsAddMaterialClipboardSelectAll.switch.value'),
                                    cellSkin: editable ? '' : 'locked',
                                    editable: editable
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 1].FormattedValue,
                                    cellSkin: r.Cells[x + 10].FormattedValue === '' ? '' : 'locked',
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 2].FormattedValue,
                                    cellSkin: r.Cells[x + 10].FormattedValue === '' ? '' : 'locked',
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 3].FormattedValue,
                                    cellSkin: r.Cells[x + 10].FormattedValue === '' ? '' : 'locked',
                                }
                            },


                            (r, x) => {
                                return {
                                    title: r.Cells[x + 4].FormattedValue,
                                    cellSkin: r.Cells[x + 10].FormattedValue === '' ? '' : 'locked',
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 5].FormattedValue,
                                    cellSkin: r.Cells[x + 10].FormattedValue === '' ? '' : 'locked',
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 6].FormattedValue,
                                    cellSkin: r.Cells[x + 10].FormattedValue === '' ? '' : 'locked',
                                }
                            },
                            (r, x) => {
                                return {
                                    title: r.Cells[x + 7].FormattedValue,
                                    cellSkin: r.Cells[x + 10].FormattedValue === '' ? '' : 'locked',
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 8].FormattedValue,
                                    cellSkin: r.Cells[x + 10].FormattedValue === '' ? '' : 'locked',
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 9].FormattedValue,
                                    cellSkin: r.Cells[x + 10].FormattedValue === '' ? '' : 'locked',
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 10].FormattedValue,
                                    cellSkin: r.Cells[x + 10].FormattedValue === '' ? '' : 'locked'
                                }
                            },


                        ]
                    }

                },
        },
    rocheBPSPAddMaterialGridRow4Cell3Dropbox: {
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "

                        SELECT
                           {[}ElementAttributes_zSYS UI Material Category].[}ElementAttributes_zSYS UI Material Category].[Caption]}
                          ON COLUMNS ,
                           {[zSYS UI Material Category].[zSYS UI Material Category].Members}
                          ON ROWS
                        FROM [}ElementAttributes_zSYS UI Material Category]



            "}`,
            parsingControl: {
                type: 'list',
                query:
                    (r, x) => {
                        return {name: r.Cells[x].FormattedValue, on: false};
                    }
            }
        }
    },
    rocheBPSPMaterialMoveDataPopupGridRow2Cell1Dropbox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') && db.systemValueGlobalCompanyProductPlanVersion;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "

                            SELECT 
                               {[}ElementAttributes_Materials].[}ElementAttributes_Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP Caption]} 
                              ON COLUMNS , 
                               {Filter(
                                  {TM1SubsetToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP], '${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')} MM')}, 
                                [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].CurrentMember.Properties('Product Level - Name') = 'PL8')} 
                              ON ROWS 
                            FROM [}ElementAttributes_Materials] 

            "}`,
            parsingControl: {
                type: 'list',
                query:
                    (r, x) => {
                        let selected = v('rocheBPSPMaterialMoveDataPopupGridRow2Cell1Dropbox.value');
                        return {name: r.Cells[x].FormattedValue, on: selected === r.Cells[x].FormattedValue};
                    }
            }
        }
    },
    rocheBPSPMaterialEditDummyPopupMaterialNewNameTextBox: {
        initCondition:
            (db) => {
                return Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridTable', 'row');
            },
        initDefault:
            (db) => {
                return [];
            },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => `{"MDX":"
                    SELECT (
                        {[}ElementAttributes_Materials].[}ElementAttributes_Materials].[Name]}
                    ) ON COLUMNS
                    FROM 
                        [}ElementAttributes_Materials]
                    WHERE 
                    ([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${db.systemValueMaterialToEdit}])
                "}`,
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            value: (r, x) => {
                                return r.Cells[x].FormattedValue;
                            }
                        }
                }

            },
    },
    rocheBPSPMaterialEditDummyPopupControlPanelAddButton: {
        launch:
            {
                validation: (db) => {
                    if (db.rocheBPSPMaterialEditDummyPopupMaterialNewNameTextBox.value === "") {
                        return {success: false, message: 'Material name cannot be empty.'};
                    }
                    return {success: true};
                },
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Maintenance Edit Dummy Material')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                        
                                {"Name": "pMaterial", "Value": "${db.systemValueMaterialToEdit}"},
                                {"Name": "pNewName", "Value": "${v('rocheBPSPMaterialEditDummyPopupMaterialNewNameTextBox.value')}"},
                        ]


                    }`
            },
    },

    rocheBPSPMaterialAddDummyPopupGridRow3Cell1Dropbox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') && db.systemValueGlobalCompanyProductPlanVersion;
        },
        initDefault: (db) => {
            return [];
        },

        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
                            "MDX" : "

                            SELECT 
                               {[}ElementAttributes_Materials].[}ElementAttributes_Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption],
                                [}ElementAttributes_Materials].[}ElementAttributes_Materials].[Element]} 
                              ON COLUMNS , 
                               {Filter(
                                  {TM1SubsetToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}], '${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')} MM')}, 
                                [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('Product Level - Name') = 'PL6')} 
                              ON ROWS 
                            FROM [}ElementAttributes_Materials]

            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [];
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: false
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPMaterialAddDummyPopupGridRow4Cell1Dropbox: {

        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') &&
                db.systemValueGlobalCompanyProductPlanVersion &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialAddDummyPopupGridRow3Cell1Dropbox');
            return b;
        },
        initDefault: (db) => {
            return [];
        },

        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                {
                                "MDX" : "
                                     SELECT
                                   {[}ElementAttributes_Materials].[}ElementAttributes_Materials].[BPSP Budget IP Caption],
                                    [}ElementAttributes_Materials].[}ElementAttributes_Materials].[Element]}
                                  ON COLUMNS ,
                                   {Filter(
                                     {Filter(
                                      {TM1SubsetToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP], '${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')} MM')},
                                       [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].CurrentMember.Properties('Product Level - Name') = 'IP Node')},
                                       [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].CurrentMember.Properties('BA ${db.systemValueGlobalCompanyProductPlanVersion}') =
                                       [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialAddDummyPopupGridRow3Cell1Dropbox', 'key')}].Properties('BA ${db.systemValueGlobalCompanyProductPlanVersion}')
                                        )}
                                  ON ROWS
                                FROM [}ElementAttributes_Materials]
                "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [];
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: false
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPMaterialAddDummyPopupGridRow5Cell1Dropbox: {

        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                        {
                    "MDX" :"
                            SELECT
                               {[}ElementAttributes_zSYS UI Material Category].[}ElementAttributes_zSYS UI Material Category].[Caption]}
                              ON COLUMNS ,
                               {[zSYS UI Material Category].[zSYS UI Material Category].Members}
                              ON ROWS
                            FROM [}ElementAttributes_zSYS UI Material Category]
                     "}`,
            parsingControl: {
                type: 'list',
                query:
                    (r, x) => {
                        return {name: r.Cells[x].FormattedValue, on: false};
                    }
            }
        }
    },
    rocheBPSPMaterialAddDummyGridTablePopupGridRow3Cell1Dropbox: {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPMaterialGridTable');
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                execute: (db) => {
                    return [{name: Utils.getGridTableCell('rocheBPSPMaterialGridTable', 0).label}];
                }
            }
    },
    rocheBPSPMaterialAddDummyGridTablePopupGridRow4Cell1Dropbox: {

        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') && db.systemValueGlobalCompanyProductPlanVersion
                && Utils.getGridTableCell('rocheBPSPMaterialGridTable', 2).title;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                            SELECT 
                               {[}ElementAttributes_Materials].[}ElementAttributes_Materials].[BPSP Budget IP Caption],
                                [}ElementAttributes_Materials].[}ElementAttributes_Materials].[Element]} 
                              ON COLUMNS , 
                               {Filter(
                                 {Filter(
                                  {TM1SubsetToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP], '${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')} MM')}, 
                                   [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].CurrentMember.Properties('Product Level - Name') = 'IP Node')},
                                   [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].CurrentMember.Properties('BA ${db.systemValueGlobalCompanyProductPlanVersion}') = 
                                   [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${Utils.getGridTableCell('rocheBPSPMaterialGridTable', 2).title}].Properties('BA ${db.systemValueGlobalCompanyProductPlanVersion}')
                                    )}
                              ON ROWS 
                            FROM [}ElementAttributes_Materials] 
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [];
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: false
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPMaterialAddDummyGridTablePopupGridRow5Cell1Dropbox: {
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `{
            "MDX" : "
					SELECT
					{[}ElementAttributes_zSYS UI Material Category].[}ElementAttributes_zSYS UI Material Category].[Caption]}
					ON COLUMNS ,
					{[zSYS UI Material Category].[zSYS UI Material Category].Members}
					ON ROWS
					FROM [}ElementAttributes_zSYS UI Material Category]
            "}`,
            parsingControl: {
                type: 'list',
                query:
                    (r, x) => {
                        return {name: r.Cells[x].FormattedValue, on: false};
                    }
            }
        }
    },
    rocheBPSPMaterialAddDummyGridTableIPpopupGridRow3Cell1Dropbox: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') &&
                db.systemValueGlobalCompanyProductPlanVersion &&
                Utils.getGridTableCell('rocheBPSPMaterialIPNodeGridTable', 2).title
            return b;
        },
        initDefault: (db) => {
            return [];
        },

        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `{
                            "MDX" : "
                            SELECT 
                                {[}ElementAttributes_Materials].[}ElementAttributes_Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption],
                                [}ElementAttributes_Materials].[}ElementAttributes_Materials].[Element]} 
                              ON COLUMNS , 
                               {Filter(
                                 {Filter(
                                  {TM1SubsetToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}], '${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')} MM')}, 
                                   [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('Product Level - Name') = 'PL6')},
                                   [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BA ${db.systemValueGlobalCompanyProductPlanVersion}') = 
                                   [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].[${Utils.getGridTableCell('rocheBPSPMaterialIPNodeGridTable', 2).title}].Properties('BA ${db.systemValueGlobalCompanyProductPlanVersion}')
                                    )}
                              ON ROWS 
                            FROM [}ElementAttributes_Materials]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [];
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: false
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPMaterialAddDummyGridTableIPpopupGridRow4Cell1Dropbox: {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPMaterialIPNodeGridTable');
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                execute: (db) => {
                    return [{name: Utils.getGridTableCell('rocheBPSPMaterialIPNodeGridTable', 0).label}];
                }
            }
    },
    rocheBPSPMaterialAddDummyGridTableIPpopupGridRow5Cell1Dropbox: {
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                        {
                    "MDX" :"
                    SELECT
                       {[}ElementAttributes_zSYS UI Material Category].[}ElementAttributes_zSYS UI Material Category].[Caption]}
                      ON COLUMNS ,
                       {[zSYS UI Material Category].[zSYS UI Material Category].Members}
                      ON ROWS
                    FROM [}ElementAttributes_zSYS UI Material Category]
                     "}`,
            parsingControl: {
                type: 'list',
                query:
                    (r, x) => {
                        return {name: r.Cells[x].FormattedValue, on: false};
                    }
            }
        }
    },
    rocheBPSPMaterialAddDummyPopupControlPanelAddButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Maintenance Add Dummy Material')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pProductPL6", "Value": " ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialAddDummyPopupGridRow3Cell1Dropbox', 'key')} "},
                                {"Name": "pProductIPNode", "Value":"${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialAddDummyPopupGridRow4Cell1Dropbox', 'key')}"},
                                {"Name": "pMaterialName", "Value": "${v('rocheBPSPMaterialAddDummyPopupGridRow2Cell1TextInput.value')}"},
                                {"Name": "pMaterialCategory", "Value": "${v('rocheBPSPMaterialAddDummyPopupGridRow5Cell1Dropbox.value')}"}
                        ]
                    }`
            },
    },
    rocheBPSPMaterialAddDummyGridTablePopupControlPanelAddButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Maintenance Add Dummy Material')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pProductPL6", "Value": " ${Utils.getGridTableCell('rocheBPSPMaterialGridTable', 2).title} "},
                                {"Name": "pProductIPNode", "Value":"${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialAddDummyGridTablePopupGridRow4Cell1Dropbox', 'key')}"},
                                {"Name": "pMaterialName", "Value": "${v('rocheBPSPMaterialAddDummyGridTablePopupGridRow2Cell1TextInput.value')}"},
                                {"Name": "pMaterialCategory", "Value": " ${v('rocheBPSPMaterialAddDummyGridTablePopupGridRow5Cell1Dropbox.value')}"},
                        ]}`
            },
    },
    rocheBPSPMaterialDeleteDataIPGridTablePopupControlPanelAddButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Maintenance Remove Material From Subset')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pMaterial", "Value": "${Utils.getGridTableCell('rocheBPSPMaterialIPNodeGridTable', 2).title}"},
                        ]
                    }`
            },
    },
    rocheBPSPMaterialMoveDataIPNodePopupGridRow2Cell1Dropbox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') && db.systemValueGlobalCompanyProductPlanVersion;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `{
            "MDX" : "
                            SELECT 
                               {[}ElementAttributes_Materials].[}ElementAttributes_Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP Caption]} 
                              ON COLUMNS , 
                               {Filter(
                                  {TM1SubsetToSet([Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP], '${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')} MM')}, 
                                [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].CurrentMember.Properties('Product Level - Name') = 'PL8')} 
                              ON ROWS 
                            FROM [}ElementAttributes_Materials]
            "}`,
            parsingControl: {
                type: 'list',
                query:
                    (r, x) => {
                        let selected = v('rocheBPSPMaterialMoveDataIPNodePopupGridRow2Cell1Dropbox.value');
                        return {name: r.Cells[x].FormattedValue, on: selected === r.Cells[x].FormattedValue};
                    }
            }
        }
    },
    rocheBPSPMaterialMoveDataIPNodePopupControlPanelAddButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Maintenance Move IP plan')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pMaterialFrom", "Value": "${Utils.getGridTableCell('rocheBPSPMaterialIPNodeGridTable', 2).title}"},
                                {"Name": "pMaterialTo", "Value": "${v('rocheBPSPMaterialMoveDataIPNodePopupGridRow2Cell1Dropbox.value')}"},
                        ]}`
            },
    },
    rocheBPSPMaterialAddDummyGridTableIPpopupGridRow3Cell1Text: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') && db.systemValueGlobalCompanyProductPlanVersion;
        },
        initDefault: (db) => {
            return [];
        },
    },
    rocheBPSPMaterialAddDummyGridTableIPpopupControlPanelAddButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Maintenance Add Dummy Material')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pProductPL6", "Value": " ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialAddDummyGridTableIPpopupGridRow3Cell1Dropbox', 'key')}"},
                                {"Name": "pProductIPNode", "Value":"${Utils.getGridTableCell('rocheBPSPMaterialIPNodeGridTable', 2).title}"},
                                {"Name": "pMaterialName", "Value": "${v('rocheBPSPMaterialAddDummyGridTableIPpopupGridRow2Cell1TextInput.value')}"},
                                {"Name": "pMaterialCategory", "Value": " ${v('rocheBPSPMaterialAddDummyGridTableIPpopupGridRow5Cell1Dropbox.value')}"},
                        ] }`
            },
    },
    rocheBPSPMaterialAddDummyIpPopupGridRow3Cell1Dropbox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') && db.systemValueGlobalCompanyProductPlanVersion;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => {
                let productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                    hierarchy = 'BPSP ' + productVersion,
                    baKey = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialAddDummyIpPopupGridRow4Cell1Dropbox')) {
                    baKey = Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialAddDummyIpPopupGridRow4Cell1Dropbox', 'ba');
                } else {
                    baKey = 'PL1';
                }

                return `{"MDX" : "
                    WITH
                      SET ValidProducts AS
                       {FILTER(
                         {TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[Products].[${hierarchy}].[${baKey}]},All, Recursive)}, 0)}
                         ,[Products].[${hierarchy}].[${hierarchy} Product Type - Key] = 'INST'
                         OR [Products].[${hierarchy}].[${hierarchy} Product Type - Key] = 'IT&WF' 
                         OR [Products].[${hierarchy}].[${hierarchy} Product Type - Key] = 'ES' 
                         OR [Products].[${hierarchy}].[${hierarchy} Product Type - Key] = 'OTHER' )}
                    SELECT
                      {[}ElementAttributes_Products].[}ElementAttributes_Products].[${hierarchy} Caption],
                      [}ElementAttributes_Products].[}ElementAttributes_Products].[Element],
                      [}ElementAttributes_Products].[}ElementAttributes_Products].[${hierarchy} BA],
                      [}ElementAttributes_Products].[}ElementAttributes_Products].[${hierarchy} Product Type - Key]}
                    ON COLUMNS ,
                      {ValidProducts}
                    ON ROWS
                    FROM [}ElementAttributes_Products]
                "}`;
            },
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [];
                            for (let i = 0; i < r.Cells.length; i = i + 4) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    ba: r.Cells[i + 2].FormattedValue,
                                    prodType: r.Cells[i + 3].FormattedValue,
                                    on: false
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
// Add Dummy IP - IP Node
    rocheBPSPMaterialAddDummyIpPopupGridRow4Cell1Dropbox: {

        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialGridRow1Cell2DropBox') &&
                db.systemValueGlobalCompanyProductPlanVersion &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPMaterialAddDummyPopupGridRow3Cell1Dropbox');
            return b;
        },
        initDefault: (db) => {
            return [];
        },

        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => {
                let productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                    hierarchy = 'BPSP ' + productVersion + ' IP';
                return `{"MDX" : "
                    SELECT
                      {[}ElementAttributes_IP Nodes].[}ElementAttributes_IP Nodes].[${hierarchy} Caption],
                      [}ElementAttributes_IP Nodes].[}ElementAttributes_IP Nodes].[Element],
                      [}ElementAttributes_IP Nodes].[}ElementAttributes_IP Nodes].[IP BA ${productVersion} - Key]
                      }
                    ON COLUMNS ,
                       {FILTER(
                         {TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[IP Nodes].[${hierarchy}].[PL1]},All, Recursive)}, 0)}
                         ,[IP Nodes].[${hierarchy}].[${hierarchy} DIS Relevant Flag] = '1'
                               OR LEFT ([IP Nodes].[${hierarchy} ].[Element], 2) = 'UA')}
                    ON ROWS
                    FROM [}ElementAttributes_IP Nodes]
                "}`;
            },

            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [];
                            for (let i = 0; i < r.Cells.length; i = i + 3) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    ba: r.Cells[i + 2].FormattedValue,
                                    on: false
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
// Add Dummy - Category
    rocheBPSPMaterialAddDummyIpPopupGridRow5Cell1Dropbox: {

        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                        {
                    "MDX" :"
                            SELECT
                               {[}ElementAttributes_zSYS UI Material Category].[}ElementAttributes_zSYS UI Material Category].[Caption]}
                              ON COLUMNS ,
                               {[zSYS UI Material Category].[zSYS UI Material Category].Members}
                              ON ROWS
                            FROM [}ElementAttributes_zSYS UI Material Category]
                     "}`,
            parsingControl: {
                type: 'list',
                query:
                    (r, x) => {
                        return {name: r.Cells[x].FormattedValue, on: false};
                    }
            }
        }
    },
    rocheBPSPMaterialAddDummyIpPopupControlPanelAddButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Maintenance Add Dummy Material')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                    "Parameters": [
                        {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},
                        {"Name": "pProductPL6", "Value": " ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialAddDummyIpPopupGridRow3Cell1Dropbox', 'key')}"},
                        {"Name": "pProductIPNode", "Value":"${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialAddDummyIpPopupGridRow4Cell1Dropbox', 'key')}"},
                        {"Name": "pMaterialName", "Value": "${v('rocheBPSPMaterialAddDummyIpPopupGridRow2Cell1TextInput.value')}"},
                        {"Name": "pMaterialCategory", "Value": " ${v('rocheBPSPMaterialAddDummyIpPopupGridRow5Cell1Dropbox.value')}"},
                    ]}`
            },
    },
    RocheBPSPMaterialsAddMaterialSearchButton14: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Search Add Single Material')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pMaterial", "Value":"${Utils.getGridTableCell('RocheBPSPMaterialsAddMaterialSearch', 1).title}"},                        
                        ]}`
            },
    },
    rocheBPSPMaterialsAddMaterialSearchTruncatedWarning: {
        initCondition: (db) => {
            return Repository.RocheBPSPMaterialsAddMaterialSearchSelectAll.init.execute(db);
        },
        initDefault: (db) => {
            return {visible: false};
        },
        init: {
            execute: (db) => {
                return {visible: v('RocheBPSPMaterialsAddMaterialSearch.cellData.length') === 1000};
            }
        }
    },
    rocheBPSPAddMaterialGridRow4Cell7Button: {
        init: {
            execute: (db) => {
                return Repository.RocheBPSPMaterialsAddMaterialSearchSelectAll.init.execute(db);
            }
        },
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Search Add Selected Materials')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},                        
                        ]
                    }`
            },
    },
    rocheBPSPAddMaterialGridRow4Cell6Button: {
        init: {
            execute: (db) => {
                return Repository.RocheBPSPMaterialsAddMaterialSearchSelectAll.init.execute(db);
            }
        },
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Clear All Inputs')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                        
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"}, 
                                {"Name": "pCube", "Value": "Material Information by Company"},                       
                        ]}`
            },
    },
    rocheBPSPAddMaterialGridRow3Cell3Button: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Material Import Add Materials')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key')}"},                        
                        ]
                    }`
            },
    },
    rocheBPSPIpPlanningCommentShowGridTable: {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPipPlanningGridTableMonthly') &&
                Utils.getGridTableCell('rocheBPSPipPlanningGridTableMonthly', 2).title;
        },

        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {

                let productCode = Utils.getGridTableCell('rocheBPSPipPlanningGridTableMonthly', 2).title;
                let version = v('systemValueGlobalVersionKey');
                return `{"MDX":"
                        SELECT 
                           {[Measures Sales Plan IP].[Measures Sales Plan IP].[Comment]} 
                          ON COLUMNS , 
                           {[Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}]} 
                            ON ROWS 
                        FROM [Sales Plan IP] 
                        WHERE 
                          (
                           [Versions].[Versions].[${version}],
                           [LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan],
                           [Receivers].[Receivers].[${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}],
                           [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].[${productCode}],
                           [Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}],
                           [Contract Types].[Contract Types].[${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}],
                           [Instrument Types].[Instrument Types].[${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}]
                          )
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 1,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue,
                        }
                    }]
            }
        }
    },
    rocheBPSPIpPlanningCommentShowGridTableSource: {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPipPlanningGridTableMonthly') && Utils.getGridTableCell('rocheBPSPipPlanningGridTableMonthly', 2).title;
        },

        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let version = v('systemValueGlobalVersionKey');
                let productCode = Utils.getGridTableCell('rocheBPSPipPlanningGridTableMonthly', 2).title;
                return `{"MDX":"
                      SELECT 
                   {[Measures Sales Plan IP].[Measures Sales Plan IP].[CommentSource],
                   [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedBy],
                   [Measures Sales Plan IP].[Measures Sales Plan IP].[EditedDateTime]} 
                  ON COLUMNS , 
                   {[Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}]} 
                            ON ROWS 
                        FROM [Sales Plan IP] 
                        WHERE 
                          (
                           [Versions].[Versions].[${version}],
                           [LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan],
                           [Receivers].[Receivers].[${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}],
                           [Materials].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP].[${productCode}],
                           [Periods].[Periods].[${db.systemValueIpPlanningSegmentedControlRelativeYearValue}],
                           [Contract Types].[Contract Types].[${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}],
                           [Instrument Types].[Instrument Types].[${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}]
                          )
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 3,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue + '<br/><div style=\"margin-top:20px; float: left; font-size: 10px;  ";  >' +
                                'Edited by ' + '</div>' + '<div style=\"font-size:12px; font-weight: bold; margin-top:18px; margin-left: 3px; float: left;";  >'
                                + r.Cells[x + 1].FormattedValue + '</div>' + '<div style=\"font-size:10px;color:#B1B3B3;margin-top:20px;margin-left: 5px; float: left; \" >'
                                + r.Cells[x + 2].FormattedValue + '</div>',
                        }
                    }

                ]
            }
        }
    },
    rocheBPSPIpPlanningCommentEditGridRow2CommentInput: {
        init: {
            execute: (db) => {
                let l = v('rocheBPSPIpPlanningCommentShowGridTable.cellData.length'), r = {value: ''};
                if (l !== false && l !== 0) {
                    r.value = v('rocheBPSPIpPlanningCommentShowGridTable.cellData')[0][0].title;
                }
                return r;
            }
        }
    },
    rocheBPSPIpPlanningCommentEditGridRow3TextInput: {
        init: {
            execute: (db) => {
                let l = v('rocheBPSPIpPlanningCommentShowGridTableSource.cellData.length'), r = {value: ''};
                if (l !== false && l !== 0) {
                    r.value = v('rocheBPSPIpPlanningCommentShowGridTableSource.cellData')[0][0].title.split('<br/>')[0];
                }
                return r;
            }
        }
    },
    rocheBPSPIpPlanningCheckoutCommentEditControlPanelSaveButton: {
        launch: {
            url: (db) => `/api/v1/Cubes('Sales Plan IP')/tm1.Update`,
            type: 'POST',
            body: (db) => {
                let g = 'rocheBPSPIpPlanningCheckoutGridTableMonthly';
                let productCode = Utils.getGridTableCell(g, 2).title;
                let version = v('systemValueGlobalVersionKey');
                return `
                [
                    {
                        "Cells": [
                            {
                                "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueIpPlanningSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}')",
                                    "Dimensions('Materials')/Hierarchies('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP')/Elements('${productCode}')",
                                    "Dimensions('Contract Types')/Hierarchies('Contract Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}')",
                                    "Dimensions('Instrument Types')/Hierarchies('Instrument Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}')",
                                    "Dimensions('LineItems Sales Plan IP')/Hierarchies('LineItems Sales Plan IP')/Elements('Final Quantity Plan')",
                                    "Dimensions('Measures Sales Plan IP')/Hierarchies('Measures Sales Plan IP')/Elements('EditedDateTime')"
                                ]
                            },
                        ],
                         "Value": "${Utils.getFormattedDate(new Date(), '.', true)}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueIpPlanningSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}')",
                                    "Dimensions('Materials')/Hierarchies('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP')/Elements('${productCode}')",
                                    "Dimensions('Contract Types')/Hierarchies('Contract Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}')",
                                     "Dimensions('Instrument Types')/Hierarchies('Instrument Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}')",
                                    "Dimensions('LineItems Sales Plan IP')/Hierarchies('LineItems Sales Plan IP')/Elements('Final Quantity Plan')",
                                    "Dimensions('Measures Sales Plan IP')/Hierarchies('Measures Sales Plan IP')/Elements('EditedBy')"
                               ]
                            },
                        ],
                        "Value": "${Widgets['activeUserName']}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueIpPlanningSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}')",
                                    "Dimensions('Materials')/Hierarchies('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP')/Elements('${productCode}')",
                                    "Dimensions('Contract Types')/Hierarchies('Contract Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}')",
                                    "Dimensions('Instrument Types')/Hierarchies('Instrument Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}')",
                                    "Dimensions('LineItems Sales Plan IP')/Hierarchies('LineItems Sales Plan IP')/Elements('Final Quantity Plan')",
                                    "Dimensions('Measures Sales Plan IP')/Hierarchies('Measures Sales Plan IP')/Elements('CommentSource')"
                               ]
                            },
                        ],
                        "Value": "${v('rocheBPSPIpPlanningCheckoutCommentEditGridRow3TextInput.value') ? v('rocheBPSPIpPlanningCheckoutCommentEditGridRow3TextInput.value') : ''}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueIpPlanningSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}')",
                                    "Dimensions('Materials')/Hierarchies('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP')/Elements('${productCode}')",
                                    "Dimensions('Contract Types')/Hierarchies('Contract Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}')",
                                    "Dimensions('Instrument Types')/Hierarchies('Instrument Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}')",
                                    "Dimensions('LineItems Sales Plan IP')/Hierarchies('LineItems Sales Plan IP')/Elements('Final Quantity Plan')",
                                    "Dimensions('Measures Sales Plan IP')/Hierarchies('Measures Sales Plan IP')/Elements('Comment')"
                               ]
                            },
                        ],
                        "Value": "${v('rocheBPSPIpPlanningCheckoutCommentEditGridRow2CommentInput.value') ? v('rocheBPSPIpPlanningCheckoutCommentEditGridRow2CommentInput.value') : ''}"
                    }
                ]
                `;
            }
        }
    },
    rocheBPSPIpPlanningCommentEditControlPanelSaveButton: {
        launch: {
            url: (db) => `/api/v1/Cubes('Sales Plan IP')/tm1.Update`,
            type: 'POST',
            body: (db) => {
                let g = 'rocheBPSPipPlanningGridTableMonthly';
                let productCode = Utils.getGridTableCell(g, 2).title;
                let version = v('systemValueGlobalVersionKey');
                return `
                [
                    {
                        "Cells": [
                            {
                                "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueIpPlanningSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}')",
                                    "Dimensions('Materials')/Hierarchies('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP')/Elements('${productCode}')",
                                    "Dimensions('Contract Types')/Hierarchies('Contract Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}')",
                                    "Dimensions('Instrument Types')/Hierarchies('Instrument Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}')",
                                    "Dimensions('LineItems Sales Plan IP')/Hierarchies('LineItems Sales Plan IP')/Elements('Final Quantity Plan')",
                                    "Dimensions('Measures Sales Plan IP')/Hierarchies('Measures Sales Plan IP')/Elements('EditedDateTime')"
                                ]
                            },
                        ],
                         "Value": "${Utils.getFormattedDate(new Date(), '.', true)}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueIpPlanningSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}')",
                                    "Dimensions('Materials')/Hierarchies('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP')/Elements('${productCode}')",
                                    "Dimensions('Contract Types')/Hierarchies('Contract Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}')",
                                    "Dimensions('Instrument Types')/Hierarchies('Instrument Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}')",
                                    "Dimensions('LineItems Sales Plan IP')/Hierarchies('LineItems Sales Plan IP')/Elements('Final Quantity Plan')",
                                    "Dimensions('Measures Sales Plan IP')/Hierarchies('Measures Sales Plan IP')/Elements('EditedBy')"
                               ]
                            },
                        ],
                        "Value": "${Widgets['activeUserName']}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueIpPlanningSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}')",
                                    "Dimensions('Materials')/Hierarchies('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP')/Elements('${productCode}')",
                                    "Dimensions('Contract Types')/Hierarchies('Contract Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}')",
                                    "Dimensions('Instrument Types')/Hierarchies('Instrument Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}')",
                                    "Dimensions('LineItems Sales Plan IP')/Hierarchies('LineItems Sales Plan IP')/Elements('Final Quantity Plan')",
                                    "Dimensions('Measures Sales Plan IP')/Hierarchies('Measures Sales Plan IP')/Elements('CommentSource')"
                               ]
                            },
                        ],
                        "Value": "${v('rocheBPSPIpPlanningCommentEditGridRow3TextInput.value') ? v('rocheBPSPIpPlanningCommentEditGridRow3TextInput.value') : ''}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${db.systemValueIpPlanningSegmentedControlRelativeYearValue}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${Utils.getDropBoxSelectedItemAttribute('rocheBPSPipPlanningGridRow1Cell2DropBox', 'key')}')",
                                    "Dimensions('Materials')/Hierarchies('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} IP')/Elements('${productCode}')",
                                    "Dimensions('Contract Types')/Hierarchies('Contract Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell1SegmentedControl.selected')}')",
                                    "Dimensions('Instrument Types')/Hierarchies('Instrument Types')/Elements('${v('rocheBPSPipPlanningGridRow2Cell2SegmentedControl.selected')}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${v('rocheBPSPipPlanningGridRow1Cell3DropBox.value')}')",
                                    "Dimensions('LineItems Sales Plan IP')/Hierarchies('LineItems Sales Plan IP')/Elements('Final Quantity Plan')",
                                    "Dimensions('Measures Sales Plan IP')/Hierarchies('Measures Sales Plan IP')/Elements('Comment')"
                               ]
                            },
                        ],
                        "Value": "${v('rocheBPSPIpPlanningCommentEditGridRow2CommentInput.value') ? v('rocheBPSPIpPlanningCommentEditGridRow2CommentInput.value') : ''}"
                    }
                ]
                `;
            }
        }
    },
    rocheBPSPReportsGridRow1Cell5Button: {
        init: {
            execute: (db) => {
                return {label: Widgets['activeUserName']};
            }
        }
    },
    rocheBPSPProductReportGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "

                        SELECT
                        {
                        [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],
                        [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key],
                        [}ElementAttributes_Companies].[}ElementAttributes_Companies].[NextGen - Flag]}
                          ON COLUMNS ,
                           {TM1SubsetToSet([Companies].[Companies], 'All Active')}
                          ON ROWS
                        FROM [}ElementAttributes_Companies]



            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 3) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    flag: Utils.parseNumber(r.Cells[i + 2].FormattedValue),
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPProductReportPageInit: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT 
                        {[Versions].[Versions].[Live]} 
                    PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                    NON EMPTY 
                        {[Measures Company Information].[Measures Company Information].[Products Hierarchy]} 
                        PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON ROWS 
                    FROM [Company Information] 
                WHERE 
                (
                    [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')}]
                )
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            Utils.setWidgetValue('systemValueGlobalCompanyProductPlanVersion', r.Cells[0].FormattedValue);
                            return true;
                        }
                    }
            }
        }
    },
    rocheBPSPProductReportGridRow1Cell3DropBox: {
        initCondition: (db) => {
            return v('rocheBPSPProductReportGridRow1Cell2DropBox.value');
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueReportSelectedReceiver', v('rocheBPSPProductReportGridRow1Cell3DropBox.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "

            SELECT
               {
                [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Member description],
                [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Receiver - Key]}
              ON COLUMNS ,
               {TM1SubsetToSet([Receivers].[Receivers], 'zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')} Report Receivers')}
              ON ROWS
            FROM [}ElementAttributes_Receivers]

            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [],
                                selectedReceiver = v('systemValueReportSelectedReceiver'),
                                selected = selectedReceiver ? selectedReceiver : v('rocheBPSPProductReportGridRow1Cell3DropBox.value');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPProductReportGridRow1Cell5DropBox: {
        initCondition: (db) => {
            return v('rocheBPSPProductReportGridRow1Cell2DropBox.value');
        },

        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueReportSelectedCurrency', v('rocheBPSPProductReportGridRow1Cell5DropBox.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "

                SELECT
                   {[}ElementAttributes_Currency Keys].[}ElementAttributes_Currency Keys].Members}
                  ON COLUMNS ,
                   {TM1SubsetToSet([Currency Keys].[Currency Keys],
                    '${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')} Reporting Currencies')}
                  ON ROWS
                FROM [}ElementAttributes_Currency Keys]

            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [],
                                selectedCurrency = v('systemValueReportSelectedCurrency'),
                                selected = selectedCurrency ? selectedCurrency : v('rocheBPSPReportKPIGridRow1Cell5DropBox.value');
                            for (let i = 0; i < r.Cells.length; i = i + 1) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPProductReportGridRow1Cell9Button: {
        init: {
            execute: (db) => {
                return {label: Widgets['activeUserName']};
            }
        }
    },

    rocheBPSPProductReportGridVersionSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridRow1Cell2DropBox')
            return b
        },
        initDefault: (db) => {
            return []
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', v('rocheBPSPProductReportGridVersionSelector.value'))
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridVersionSelector', 'key'))
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {FILTER(
                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                ,[Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')}],
                [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion')
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                })
                            }
                            return result
                        }
                    }
            }
        }
    },

    rocheBPSPProductReportGridTable:
        {
            initCondition: (db) => {
                let b = Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridRow1Cell3DropBox') &&
                    Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridVersionSelector') &&
                    Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridRow1Cell5DropBox')
                return b;
            },


            initDefault: (db) => {
                return [];
            },

            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                    type: 'POST',
                    body: (db) => {

                        let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                            YearMinusOne = yearzero - 1,
                            YearMinusTwo = yearzero - 2,
                            YearPlusOne = yearzero + 1,
                            YearPlusTwo = yearzero + 2,
                            YearPlusThree = yearzero + 3,
                            yearPlusFour = yearzero + 4,
                            version = v('systemValueGlobalVersionKey');

                        return `{"MDX":"    
                                                
                    With
                    --Create deault subset for the Rows by systemValueGlobalCompanyProductPlanVersion
                         Set DefaultProductRows AS
                         {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[PL1]}, ALL, RECURSIVE )}
                    --Create deault subset for the Rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                         Set FocusedOnProductRows AS
                         {TM1DRILLDOWNMEMBER({[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${db.systemValueCustomerReportFocusedProduct}]}, ALL, RECURSIVE )}
                    --Decide which rowSet to use
                         MEMBER [Products].[BPSP Budget].[ProductIsFocused] AS 
                         IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                    -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)     
                         MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[ProductName] as 
                                [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description')
                         MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[ProductCaption] as 
                                [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
                         MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[ProductLevel] as 
                                [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name')
                         MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[UILevelFormat] as 
                                [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} UI Level Format')
                         -- New Product type
                         MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[ProductType] as 
                    [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Type')                   
                    SELECT 
                    
                       {([Periods].[Periods].[${YearMinusOne}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[ProductName]),
                        ([Periods].[Periods].[${YearMinusOne}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[ProductCaption]),
                        ([Periods].[Periods].[${YearMinusOne}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[ProductLevel]),
                        ([Periods].[Periods].[${YearMinusOne}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[UILevelFormat]),
                        -- product type
                        ([Periods].[Periods].[${YearMinusOne}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[ProductType]),
                        -- 2019 Actual
                         ([Periods].[Periods].[${YearMinusTwo}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                         ([Periods].[Periods].[${YearMinusOne}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                         ([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice YTD]),
                         -- 2021 T0
                         ([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW T0]),
                         ([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                         ([Periods].[Periods].[${YearPlusOne}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                         ([Periods].[Periods].[${YearPlusTwo}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                         ([Periods].[Periods].[${YearPlusThree}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                         ([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Growth Final Sales Plan]),
                         ([Periods].[Periods].[${YearPlusOne}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Growth Final Sales Plan]),
                         ([Periods].[Periods].[${YearPlusTwo}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Growth Final Sales Plan]),
                         ([Periods].[Periods].[${YearPlusThree}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Growth Final Sales Plan])
                         
                       }
                       PROPERTIES [Periods].[Periods].[Caption] ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Caption]  ON COLUMNS , 
                       StrToSet([Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused])
                       PROPERTIES [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption]  ON ROWS 
                    FROM [Sales Report by Product] 
                    WHERE 
                      (
                       [Versions].[Versions].[${version}],
                       [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')}],
                       [Receivers].[Receivers].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell3DropBox', 'key')}],
                       [Currency Keys].[Currency Keys].[${v('rocheBPSPProductReportGridRow1Cell5DropBox.value')}],
                       [Measures Sales Report by Product].[Measures Sales Report by Product].[Value]
                      )

                    "}`;
                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 17,
                        query: [

                            (r, x) => {
                                let uiLevel = r.Cells[x + 3].FormattedValue;
                                return {
                                    label: r.Cells[x].FormattedValue,
                                    productLevel: r.Cells[x + 2].FormattedValue.replace('a', ''),
                                    uiLevel: uiLevel,
                                    skin: 'gridtable_hierarchy_bpsp_' + uiLevel
                                }
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 1].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 2].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 4].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 5].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 6].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 7].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 8].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 9].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 10].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 11].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 12].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 13].FormattedValue}
                            },
                            (r, x) => {
                                return {title: r.Cells[x + 14].FormattedValue}
                            },
                            (r, x) => {
                                return {title: r.Cells[x + 15].FormattedValue}
                            },
                            (r, x) => {
                                return {title: r.Cells[x + 16].FormattedValue}
                            }
                        ]
                    }

                },
        },
    rocheBPSPProductReportMaterialSelectorShortcutPopupGridTable: {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPProductReportGridTable')
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return v('rocheBPSPProductReportGridTable.cellData').filter(e => ['01C', '02C', '03C', '01N', '02N', '03N'].includes(e[0].uiLevel)).map(e => {
                    return [{
                        label: e[0].label,
                        skin: 'gridtable_hierarchy_shortcut_bpsp_' + e[0].uiLevel,
                        productCode: e[1].title
                    }];
                });
            }
        }
    },
    rocheBPSPProductReportInfoPopupText1: {
        initCondition: (db) => {
            return v('rocheBPSPProductReportGridRow1Cell2DropBox.value.length') !== false;
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                    {"MDX":
                    "SELECT 
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Currency - Key]} 
                    ON COLUMNS , 
                        {[Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')}]} 
                    ON ROWS 
                    FROM [}ElementAttributes_Companies] "}
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        title: (r, x) => {
                            return '<li>' + r.Cells[0].FormattedValue + '</li>';
                        }
                    }
            }
        }
    },
    rocheBPSPProductReportInfoPopupText2: {
        initCondition: (db) => {
            return v('rocheBPSPProductReportGridRow1Cell2DropBox.value.length') !== false;
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
              {"MDX":
                "SELECT 
                    {[Versions].[Versions].[Live]} 
                    PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                    {[Measures Company Information].[Measures Company Information].[Current Planning Event]} 
                    PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON ROWS 
                FROM [Company Information] 
                WHERE 
                  (
                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')}]
                  )"}
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        title: (r, x) => {
                            return '<li>' + r.Cells[0].FormattedValue + '</li>';
                        }
                    }
            }
        }
    },

    rocheBPSPProductReportGridTableHeaderFocusButton:
        {
            init: {
                execute: (db) => {
                    return {visible: db.systemValueCustomerReportFocusedProduct === db.systemValueCustomerReportFocusedProductDefault};
                }
            }
        },
    rocheBPSPProductReportGridTableHeaderReturnFromFocus:
        {
            init: {
                execute: (db) => {
                    return {visible: db.systemValueCustomerReportFocusedProduct !== db.systemValueCustomerReportFocusedProductDefault};
                }
            },
            launch: {
                execute: (db) => {
                    Utils.setWidgetValue('systemValueCustomerReportFocusedProduct', db.systemValueCustomerReportFocusedProductDefault);
                    Utils.setWidgetValue('systemValueCustomerReportFocusedProductName', db.systemValueCustomerReportFocusedProductNameDefault);
                }
            }
        },
    rocheBPSPProductReportCheckoutPopupFocusButton: {
        launch:
            {
                execute: (db) => {
                    Utils.setWidgetValue('systemValueCustomerReportFocusedProduct', Utils.getGridTableCell('rocheBPSPProductReportGridTable', 1).title);
                    Utils.setWidgetValue('systemValueCustomerReportFocusedProductName', Utils.getGridTableCell('rocheBPSPProductReportGridTable', 0).label);
                }
            }
    },
    rocheBPSPProductReportMaterialSelectorShortcutPopupGridTableButton01: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueCustomerReportFocusedProduct'] = Utils.getGridTableCell('rocheBPSPProductReportMaterialSelectorShortcutPopupGridTable', 0).productCode;
                    Widgets['systemValueCustomerReportFocusedProductName'] = Utils.getGridTableCell('rocheBPSPProductReportMaterialSelectorShortcutPopupGridTable', 0).label;
                }
            },
    },

    rocheBPSPProductReportChartLabel: {
        initCondition: (db) => {

            let b = Utils.isGridTableLoaded('rocheBPSPProductReportGridTable');
            return b;
        },

        initDefault: (db) => {
            return [];
        },

        init:
            {
                execute: (db) => {
                    return {
                        title: v('rocheBPSPProductReportGridTable').cellData[0][0].label
                    };
                }
            },
    },
    rocheBPSPProductReportChart: {

        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridRow1Cell3DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridVersionSelector') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridRow1Cell5DropBox');

            return b;
        },
        initDefault: (db) => {
            return [];
        },

        init: [
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
                type: 'POST',
                body: (db) => {
                    let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                        YearMinusOne = yearzero - 1,
                        YearPlusOne = yearzero + 1,
                        YearPlusTwo = yearzero + 2,
                        YearPlusThree = yearzero + 3,
                        yearPlusFour = yearzero + 4,
                        version = v('systemValueGlobalVersionKey')

                    return `{"MDX":"         
                    With
                    --Create deault subset for the Rows by systemValueGlobalCompanyProductPlanVersion
                         Set DefaultProductRows AS
                         {[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[PL1]}
                    --Create deault subset for the Rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                         Set FocusedOnProductRows AS
                         {[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${db.systemValueCustomerReportFocusedProduct}]}
                    --Decide which rowSet to use
                         MEMBER [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused] AS 
                         IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                    -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)     
                         MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[ProductCaption] as 
                                [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
               
                                SELECT
                               StrToSet([Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused])
                               PROPERTIES [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption]
                          
                               ON COLUMNS ,
                                     {
                                         ([Periods].[Periods].[${YearMinusOne + '01'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '02'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '03'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '04'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '05'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '06'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '07'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '08'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '09'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '10'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '11'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '12'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${yearzero + '01'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '02'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '03'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '04'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '05'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '06'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '07'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '08'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '09'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '10'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '11'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '12'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '01'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '02'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '03'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '04'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '05'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '06'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '07'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '08'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '09'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '10'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '11'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '12'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '01'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '02'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '03'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '04'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '05'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '06'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '07'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '08'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '09'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '10'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '11'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '12'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '01'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '02'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '03'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '04'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '05'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '06'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '07'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '08'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '09'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '10'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '11'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '12'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan])
                                       }
                                       PROPERTIES [Periods].[Periods].[Caption] ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Caption]  ON ROWS
                                    FROM [Sales Report by Product]
                                    WHERE
                                      (
                                       [Versions].[Versions].[${version}],
                                       [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')}],
                                       [Receivers].[Receivers].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell3DropBox', 'key')}],
                                       [Currency Keys].[Currency Keys].[${v('rocheBPSPProductReportGridRow1Cell5DropBox.value')}],
                                       [Measures Sales Report by Product].[Measures Sales Report by Product].[Value]
                                      )
            "}`;
                }
                ,
                parsingControl: {
                    type: 'list',
                    query:
                        (r, x) => {
                            return {
                                value: r.Cells[x].Members[5].Name,
                                label: r.Cells[x].Members[5].Attributes['Caption']
                            };
                        }
                }
            },
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => {
                    let selectedProduct = Utils.getGridTableCell('rocheBPSPProductReportMaterialSelectorPopopInChartGridTable', 0) === false ? 'PL1' :
                        Utils.getGridTableCell('rocheBPSPProductReportMaterialSelectorPopopInChartGridTable', 0).productCode;
                    let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                        YearMinusOne = yearzero - 1,
                        YearPlusOne = yearzero + 1,
                        YearPlusTwo = yearzero + 2,
                        YearPlusThree = yearzero + 3,
                        yearPlusFour = yearzero + 4,
                        version = v('systemValueGlobalVersionKey')

                    return `{"MDX":"
                    
                With
                    --Create deault subset for the Rows by systemValueGlobalCompanyProductPlanVersion
                         Set DefaultProductRows AS
                         {[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[PL1]}
                    --Create deault subset for the Rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                         Set FocusedOnProductRows AS
                         {[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[${db.systemValueCustomerReportFocusedProduct}]}
                    --Decide which rowSet to use
                         MEMBER [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused] AS 
                         IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                    -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)     
                         MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[ProductCaption] as 
                                [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
               
                                SELECT
                               StrToSet([Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[ProductIsFocused])
                               PROPERTIES [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Caption]

                   ON COLUMNS ,
                                     {
                                         ([Periods].[Periods].[${YearMinusOne + '01'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '02'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '03'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '04'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '05'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '06'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '07'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '08'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '09'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '10'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '11'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${YearMinusOne + '12'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice]),
                                         ([Periods].[Periods].[${yearzero + '01'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '02'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '03'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '04'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '05'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '06'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '07'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '08'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '09'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '10'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '11'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${yearzero + '12'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '01'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '02'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '03'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '04'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '05'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '06'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '07'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '08'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '09'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '10'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '11'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusOne + '12'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '01'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '02'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '03'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '04'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '05'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '06'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '07'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '08'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '09'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '10'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '11'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusTwo + '12'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '01'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '02'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '03'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '04'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '05'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '06'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '07'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '08'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '09'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '10'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '11'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]),
                                         ([Periods].[Periods].[${YearPlusThree + '12'}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan])
                                       }
                   PROPERTIES [Periods].[Periods].[Caption] ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Caption]  ON ROWS
                FROM [Sales Report by Product]
                WHERE
                  (
                   [Versions].[Versions].[${version}],
                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key')}],
                   [Receivers].[Receivers].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell3DropBox', 'key')}],
                   [Currency Keys].[Currency Keys].[${v('rocheBPSPProductReportGridRow1Cell5DropBox.value')}],
                   [Measures Sales Report by Product].[Measures Sales Report by Product].[Value]
                  )      
            "}`;
                }
                ,
                parsingControl: {
                    type: 'matrix',
                    length: 1,
                    query: [
                        (r, x) => {
                            return {value: (parseInt(r.Cells[x].FormattedValue) / 1000).toString()};
                        }
                    ]
                }

            }
        ],
    },
    rocheBPSPProductReportProductSelectorChartButton: {
        init: {
            execute: (db) => {
                return {
                    label: db.systemValueCustomerReportFocusedProductName
                };
            }
        }
    },
    rocheBPSPProductReportMaterialSelectorPopopInChartGridTable:
        {
            initCondition: (db) => {
                let b = Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridRow1Cell3DropBox') &&
                    Utils.isValueExistingAndNotEmpty('rocheBPSPProductReportGridRow1Cell5DropBox')
                return b;
            },


            initDefault: (db) => {
                return [];
            },

            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                    type: 'POST',
                    body: (db) => {
                        return `{"MDX":"    
                                                
                            SELECT 
                               {[}ElementAttributes_Products].[}ElementAttributes_Products].[BPSP Budget Description],
                               [}ElementAttributes_Products].[}ElementAttributes_Products].[BPSP Budget Element],
                               [}ElementAttributes_Products].[}ElementAttributes_Products].[BPSP Budget Product Level - Name]} 
                              ON COLUMNS , 
                               {FILTER({TM1DRILLDOWNMEMBER({[Products].[BPSP Budget].[PL1]}, ALL, RECURSIVE )}, 
                               INSTR([Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Product Level - Name'), 'PL1')>0 OR   
                               INSTR([Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Product Level - Name'), 'PL2')>0 OR   
                               INSTR([Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Product Level - Name'), 'PL2a')>0 OR   
                               INSTR([Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Product Level - Name'), 'PL3')>0)} 
                              ON ROWS 
                            FROM [}ElementAttributes_Products] 


                    "}`;
                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 3,
                        query: [

                            (r, x) => {
                                return {
                                    label: r.Cells[x].FormattedValue,
                                    productCode: r.Cells[x + 1].FormattedValue,
                                    skin: 'gridtable_hierarchy_shortcut_bpsp_' + r.Cells[x + 2].FormattedValue.replace('a', '')
                                }
                            },


                        ]
                    }

                },
        },
    rocheBPSPProductReportMaterialSelectorPopopInChartGridTableButton01: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueCustomerReportFocusedProduct'] = Utils.getGridTableCell('rocheBPSPProductReportMaterialSelectorPopopInChartGridTable', 0).productCode;
                    Widgets['systemValueCustomerReportFocusedProductName'] = Utils.getGridTableCell('rocheBPSPProductReportMaterialSelectorPopopInChartGridTable', 0).label;
                }
            },
    },
    rocheBPSPProductReportPivotTable: {
        init:
            [
                {
                    pivot: true,
                    data: {
                        cube_name: 'Sales Plan by Product'
                    }
                },
                {   // Loads the user's saved config
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                    type: 'POST',
                    body: (db) => `{"MDX":"
                      SELECT
                      {[zSYS Analogic UI User Data Measure].[zSYS Analogic UI User Data Measure].[sValue]}
                     ON COLUMNS ,
                      {[zSYS Analogic UI Widget].[zSYS Analogic UI Widget].[rocheBPSPProductReportPivotTable]}
                    ON ROWS
                    FROM [zSYS Analogic UI User Data]
                    WHERE
                        [}Clients].[${v('activeUser')}]
                  "}`
                    ,
                    parsingControl: {
                        type: 'script',
                        script: d => d.Cells[0].FormattedValue
                    }
                }
            ],
        savePivotPreset: {
            url: (db) => `/api/v1/Processes('zSYS Analogic Save Pivot Preset')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => `
                {
                    "Parameters": [
                        {"Name": "pUser", "Value": "${db.activeUserName}"},
                        {"Name": "pWidget", "Value": "rocheBPSPProductReportPivotTable"},
                        {"Name": "pValue", "Value": "${v('rocheBPSPProductReportPivotTable.save').replaceAll('"', '\\"')}"}
                    ]
                }`
        }
    },
    rocheBPSPProductReport: {
        getFileName: (db) => {
            let s = [], fileName;
            s.push(Utils.getFormattedDate(new Date(), '_', true));
            s.push(db.activeUserName);
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key'));
            s.push(v('rocheBPSPProductReportGridRow1Cell5DropBox.value'));
            return s.join('_').replaceAll(':', '_').replaceAll(' ', '_').replaceAll('/', '_');
        }
    },
    rocheBPSPProductReportExportPopupCheckoutButton: {
        launch: {
            download: (db) => {
                let y1 = parseInt(db.systemValueGlobalStartingPlanYear),
                    fileName = Repository.rocheBPSPProductReport.getFileName(db);
                return {
                    url: 'export?export_key=rocheProductLevelExport&file_name=' + fileName + '.xlsx',   // custom_object json
                    fileName: fileName + '.xlsx',
                    activeUserName: db.activeUserName,
                    companyVersion: v('systemValueGlobalVersionKey'), //Live
                    productPlanVersion: db.systemValueGlobalCompanyProductPlanVersion, //Budget
                    company: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridRow1Cell2DropBox', 'key'),
                    globalVersion: Widgets.systemValueGlobalCompanyVersion,
                    version: v('systemValueGlobalVersionKey'),
                    currency: v('rocheBPSPProductReportGridRow1Cell5DropBox.value'),
                    yearMinusOne: y1 - 2,
                    year0: y1 - 1,
                    year1: y1, //2021
                    year2: y1 + 1,
                    year3: y1 + 2,
                    year4: y1 + 3,
                    versionName: Utils.getDropBoxSelectedItemAttribute('rocheBPSPProductReportGridVersionSelector', 'name'),
                    key: 'rocheProductLevelExportMDX' // ez a yml
                };
            }
        }
    },
    /* customer planning */
    rocheBPSPCustomerPlanning: {
        initCondition: () => {
            let l = v('rocheBPSPCustomersPlanningGridTableYearly.cellData.length');
            return l !== false && l !== 0;
        },
        initConditionMonthly: () => {
            let l = v('rocheBPSPCustomersPlanningGridTableMonthly.cellData.length');
            return l !== false && l !== 0;
        },

        executeForTextFirstCol: (columnIndex) => {
            let cell = v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[0][columnIndex];
            if (Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByRowMode()) {
                return {title: cell.members[6].Name, body: 'Actual'};
            }
            if (Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByColumnMode()) {
                return {title: cell.members[5].Name, body: v('rocheBPSPCustomersPlanningVersionSelector.value')};
            }
            return {title: cell.members[5].Name, body: cell.members[6].Attributes.Caption};
        },

        gridTableHeaderLogic: () => {
            let result;
            result = v('systemValueCustomerCompareBy') === 'Column' || v('systemValueCustomerCompareBy') === 'Row';
            return result
        },

        gridTableHeaderLogicInNormalMode: () => {
            let segmented = parseInt(v('rocheBPSPCustomersPlanningYearSegmentedControl.selected'));
            let systemYear = parseInt(v('systemValueGlobalStartingPlanYear'));
            let result = segmented === systemYear ? 'Linear Projection' : 'Final Sales Plan';
            return result
        },


        executeForText: (columnIndex) => {
            let cells = v('rocheBPSPCustomersPlanningGridTableYearly.cellData'), cell = cells[0][columnIndex],
                previousCell = cells[0][columnIndex - 1];
            if (!cell.members) {
                return {
                    title: '',
                    body: ''
                };
            }
            if (Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByRowMode()) {
                return {
                    title: !previousCell.members || cell.members[6].Name === previousCell.members[6].Name ? '' : cell.members[6].Name,
                    body: cell.members[5].Attributes.Caption
                };
            }
            if (Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByColumnMode()) {
                return {
                    title: !previousCell.members || cell.members[5].Name === previousCell.members[5].Name ? '' : cell.members[5].Name,
                    body: columnIndex % 2 === 0 ? v('rocheBPSPCustomersPlanningGridRow2VersionSelectorTwo.value') : v('rocheBPSPCustomersPlanningVersionSelector.value')
                };
            }
            return {
                title: !previousCell.members || cell.members[5].Name === previousCell.members[5].Name ? '' : cell.members[5].Name,
                body: cell.members[6].Attributes.Caption
            };
        },
        executeForCell: (columnIndex) => {
            let cells = v('rocheBPSPCustomersPlanningGridTableYearly.cellData'), cell = cells[0][columnIndex],
                previousCell = cells[0][columnIndex - 1],
                membersIndex = 7;
            if (!cell.members || !previousCell.members) {
                return '';
            } else if (v('systemValueCustomerCompareBy') === 'Row') {
                let membersIndexInRow = 8;
                return {
                    cellHeaderSkin: cell.members[membersIndexInRow].Name === previousCell.members[membersIndexInRow].Name ? '' : 'long_border_bpsp'
                };
            } else if (v('systemValueCustomerCompareBy') === 'Column') {
                let membersIndexInColumn = 6;
                return {
                    cellHeaderSkin: cell.members[membersIndexInColumn].Name === previousCell.members[membersIndexInColumn].Name ? '' : 'long_border_bpsp'
                };
            }

            return {
                cellHeaderSkin: cell.members[membersIndex].Name === previousCell.members[membersIndex].Name ? '' : 'long_border_bpsp'
            };
        },

        headerInCompareModeFirstCol: (columnIndex, gridTableId = 'rocheBPSPCustomersPlanningGridTableYearly') => {
            let cell = v(gridTableId + '.cellData')[0][columnIndex];
            if (Repository[gridTableId].isCompareByRowMode()) {
                return {
                    title: cell.members[8].Name,
                    body: 'Actual'
                };
            }
            if (Repository[gridTableId].isCompareByColumnMode()) {
                return {
                    title: cell.members[6].Name,
                    body: v('rocheBPSPCustomersPlanningVersionSelector.value')
                };
            }
            return {title: cell.members[5].Name, body: cell.members[6].Attributes.Caption};
        },

        headerInCompareMode: (columnIndex,
                              gridTableId = 'rocheBPSPCustomersPlanningGridTableYearly',
                              versionSelectorId = 'rocheBPSPCustomersPlanningVersionSelector',
                              versionSelectorId2 = 'rocheBPSPCustomersPlanningGridRow2VersionSelectorTwo') => {
            let cells = v(gridTableId + '.cellData'), cell = cells[0][columnIndex],
                previousCell = cells[0][columnIndex - 1];
            if (!cell.members) {
                return {
                    title: '',
                    body: ''
                };
            }
            if (Repository[gridTableId].isCompareByRowMode()) {
                return {
                    title: !previousCell.members || cell.members[8].Name === previousCell.members[8].Name ? '' : cell.members[8].Name,
                    body: cell.members[7].Attributes.Caption,
                    skin: 'products_gd_header_compareByRow_bpsp'
                };
            }
            if (Repository[gridTableId].isCompareByColumnMode()) {
                return {
                    title: !previousCell.members || cell.members[6].Name === previousCell.members[6].Name ? '' : cell.members[6].Name,
                    body: columnIndex % 2 === 0 ? v(versionSelectorId2 + '.value') : v(versionSelectorId + '.value')
                };
            }
            return {
                title: !previousCell.members || cell.members[5].Name === previousCell.members[5].Name ? '' : cell.members[5].Name,
                body: cell.members[6].Attributes.Caption
            };
        },

    },

    rocheBPSPCustomerPlanningPageInit: {
        initCondition: (db) => {
            return v('systemValueCustomerPlanningUploadTargetPath') === false;
        },
        initDefault: (db) => {
            return true;
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                {
                    "MDX" : "
                        SELECT
                            {[Value Type].[Value Type].[String]}
                         ON COLUMNS ,
                            {[Measures Control].[Measures Control].[UI Excel upload path Customer]}
                        ON ROWS
                        FROM [Control]
                    "
                }
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            Utils.setWidgetValue('systemValueCustomerPlanningUploadTargetPath', r.Cells[0].FormattedValue)
                            return true;
                        }
                    }
            }
        }
    },
    rocheBPSPCustomersPlanningGridRow1Cell5Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPCustomersPlanningHeaderInfoGridTable: {
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
                type: 'POST',
                body: (db) => `{"MDX":"
                    SELECT 
                           {[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[PY],
                            [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[CY],
                            [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[NY]} 
                           PROPERTIES [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Caption]  ON COLUMNS , 
                           {[Customers Plan].[Customers Plan].[All Customers Plan]} 
                          ON ROWS 
                        FROM [Sales Territory to Customer] 
                        WHERE 
                          (
                           [Versions].[Versions].[${v('systemValueGlobalVersionKey')}],
                           [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}],
                           [Territories].[Territories].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key')}],
                           [Receivers].[Receivers].[${v('rocheBPSPCustomersHorizontalTable.open.receiver')}]
                          )
                "}`,
                parsingControl: {
                    type: 'matrix',
                    length: 3,
                    query: [

                        (r, x) => {
                            return {
                                body: r.Cells[x].FormattedValue,
                                title: r.Cells[x].Members[5].Attributes.Caption
                            };
                        }, (r, x) => {
                            return {
                                body: r.Cells[x + 1].FormattedValue,
                                title: r.Cells[x + 1].Members[5].Attributes.Caption
                            };
                        }, (r, x) => {
                            return {
                                body: r.Cells[x + 2].FormattedValue,
                                title: r.Cells[x + 2].Members[5].Attributes.Caption
                            };
                        }
                    ]
                }
            }
    },
    rocheBPSPCustomersPlanningMonthlyExcelUpload: {
        initCondition: () => {
            return v('systemValueCustomerPlanningSegmentedControlPeriodUnit') === 'Yearly' ?
                Repository.rocheBPSPCustomerPlanning.initCondition() : Repository.rocheBPSPCustomerPlanning.initConditionMonthly();
        },
        initDefault: () => {
            L('initDefault');
            return {};
        },
        init: {
            execute: (db) => {
                L('init', Repository.rocheBPSPCustomersPlanning.uploadButtonVisibility());
                return {
                    visible: Repository.rocheBPSPCustomersPlanning.uploadButtonVisibility()
                    //visible: true
                };
            }
        }
    },
    rocheBPSPCustomersPlanningMonthlyExcelExport: {
        init: {
            execute: (db) => {
                return {
                    visible: true
                };
            }
        },
        launch: {
            download: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                    focusedProduct = v('systemValueCustomersPlanningFocused'),
                    hasFocusedProduct = focusedProduct !== 'PL1',
                    customerCode = v('systemValueCustomersPlanningCustomerCode'),
                    type = Repository.rocheBPSPCustomersPlanning.isMonthly(db) ? v('systemValueCustomersPlanningMonthlyTypeValue') : 'Base Plan',
                    y1 = parseInt(db.systemValueGlobalStartingPlanYear),
                    fileName = Repository.rocheBPSPCustomersPlanning.getFileName(db);
                return {
                    url: 'export?export_key=exportCustomerMonthly&file_name=' + fileName + '.xlsx',
                    fileName: fileName + '.xlsx',
                    activeUserName: db.activeUserName,
                    company: company,
                    version: version,
                    territoryCode: territoryCode,
                    receiver: receiver,
                    productVersion: productVersion,
                    customerCode: customerCode,
                    //rows: hasFocusedProduct ? 'FocusedRows' : 'ProductRows',
                    rows: 'FocusedRows',
                    focusedProduct: focusedProduct,
                    type: type,
                    year1: y1,
                    year2: y1 + 1,
                    year3: y1 + 2,
                    year4: y1 + 3,
                    key: 'exportCustomerMonthly'
                };
            }
        }
    },

    rocheBPSPCustomersPlanningUploadPopupPlDropbox: {
        initCondition: (db) => {
            let g = v('systemValueCustomerPlanningSegmentedControlPeriodUnit'),
                l = v('rocheBPSPCustomersPlanningGridTable' + g + '.cellData.length');
            return l !== false && l !== 0;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                let g = v('systemValueCustomerPlanningSegmentedControlPeriodUnit');
                let segmented = v('rocheBPSPCustomersPlanningPeriodUnitSegmentedControl.value');
                let condition = v('rocheBPSPCustomersPlanningPeriodUnitSegmentedControl.value') === 'Monthly';
                if (condition) {
                    return {
                        items: [
                            {name: 'PL1', key: 'PL1', on: false},
                            {name: 'PL2', key: 'PL2', on: false},
                            {name: 'PL3', key: 'PL3', on: false},
                            {name: 'PL4', key: 'PL4', on: false},
                            {name: 'PL5', key: 'PL5', on: false},
                            {name: 'PL6', key: 'PL6', on: false}
                        ]
                    };

                } else {
                    return v('rocheBPSPCustomersPlanningGridTable' + g + '.cellData').map(function (e) {
                        return {name: e[2].title, key: e[2].title.replace('PL', '').replace('a', ''), on: false}
                    }).reduce((acc, current) => {
                        const x = acc.find(item => item.name === current.name);
                        if (!x) {
                            return acc.concat([current]);
                        } else {
                            return acc;
                        }
                    }, []);
                }
            },
        }
    },

    rocheBPSPCustomersPlanningUploadPopupUpload: {
        upload: (db) => {
            let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                version = v('systemValueGlobalVersionKey'),
                receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                focusedProduct = v('systemValueCustomersPlanningFocused'),
                customerCode = v('systemValueCustomersPlanningCustomerCode'),
                type = v('systemValueCustomersPlanningMonthlyTypeValue'),
                fileName = Repository.rocheBPSPCustomersPlanning.getFileName(db);
            Utils.modifyFileName('rocheBPSPCustomersPlanningUploadPopupUpload', fileName);
            Utils.setWidgetValue('systemValueUploadFileName', fileName + '.csv');
            return {
                staging: app.defaultUploadStagingFolder,
                target: v('systemValueCustomerPlanningUploadTargetPath'),
                productLevel: v('rocheBPSPCustomersPlanningUploadPopupPlDropbox.value'),
                validation: 'validateCustomerPlanningExcelImport',
                validationUser: db.activeUserName,
                validationCompany: company,
                validationReceiver: receiver,
                validationGlobalVersion: version,
                validationVersion: productVersion,
                validationProduct: focusedProduct,
                validationLineItem: type,
                validationTerritoryCode: territoryCode,
                validationCustomerCode: customerCode,
                validationMessage: 'First row of excel does not match'
                //      preProcessTemplate: v('preprocess.choose.value') === false ? 'Template1' : v('preprocess.choose.value')
            };
        },
        request: {
            url: (db) => `/api/v1/Processes('MODULE - UI - CSV Upload Post Processing Customer')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    version = v('systemValueGlobalVersionKey'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                    focusedProduct = v('systemValueCustomersPlanningFocused'),
                    customerCode = v('systemValueCustomersPlanningCustomerCode'),
                    type = v('systemValueCustomersPlanningMonthlyTypeValue'),
                    fileName = v('systemValueUploadFileName');
                return `{
                        "Parameters": [
                                {"Name": "pUser", "Value": "${db.activeUserName}"},                               
                                {"Name": "pSelectedProductLevel", "Value": "${v('rocheBPSPCustomersPlanningUploadPopupPlDropbox.value')}"},
                                {"Name": "pFileName", "Value": "${fileName}"},
                                {"Name": "pProduct", "Value": "${focusedProduct}"},
                                {"Name": "pCompany", "Value": "${company}"},
                                {"Name": "pReceiver", "Value": "${receiver}"},
                                {"Name": "pLineItem", "Value": "${type}"},
                                {"Name": "pCustomer", "Value": "${customerCode}"},
                                {"Name": "pTerritories", "Value": "${territoryCode}"},
                        ]
                    }`;
            }
        }
    },
    rocheBPSPCustomersPlanningGridTableMonthly: {
        perform: {
            url: (db, cell, widgetValue, row, col) => {
                return `/api/v1/Processes('MODULE - UI - Sales Plan by Customer Split')/tm1.ExecuteWithReturn`;
            },
            type: 'POST',
            body: (db, cell, widgetValue, row, col) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    customerCode = v('systemValueCustomersPlanningCustomerCode'),
                    product = Utils.getGridTableCell('rocheBPSPCustomersPlanningGridTableMonthly', 0).productCode,
                    period = Utils.getGridTableCurrentCell('rocheBPSPCustomersPlanningGridTableMonthly').members[8].Name,
                    type = v('systemValueCustomersPlanningMonthlyTypeValue'),
                    version = v('systemValueGlobalVersionKey'),
                    parameters = [];

                parameters.push(Utils.getProcessNameValuePair('pProduct', product));
                parameters.push(Utils.getProcessNameValuePair('pCompany', company));
                parameters.push(Utils.getProcessNameValuePair('pReceiver', receiver));
                parameters.push(Utils.getProcessNameValuePair('pTerritory', territoryCode));
                parameters.push(Utils.getProcessNameValuePair('pPeriod', period));
                parameters.push(Utils.getProcessNameValuePair('pCustomer', customerCode));
                parameters.push(Utils.getProcessNameValuePair('pLineItem', type));
                parameters.push(Utils.getProcessNameValuePair('pVersion', version));
                parameters.push(Utils.getProcessNameValuePair('pValue', Utils.parseNumber(widgetValue.value)));

                return Utils.buildProcessParameters(parameters);
            }
        },
        pastelast: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `[
                    {"Ordinal": ${widgetValue.ordinal},"Value": \"${Utils.parseNumber(widgetValue.value)}\"}
                ]`;
            }
        },
        paste: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `[
                    {"Ordinal": ${widgetValue.ordinal},"Value": \"${Utils.parseNumber(widgetValue.value)}\"}
                ]`;
            }
        },
        write: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `[
                    {"Ordinal": ${widgetValue.ordinal},"Value": \"${Utils.parseNumber(widgetValue.value)}\"}
                ]`;
            }
        },
        initCondition: (db) => {
            return Repository.rocheBPSPCustomersPlanning.isMonthly(db)
                && v('rocheBPSPCustomersPlanningVersionSelector.value.length') !== false;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Updateable,RuleDerived,Consolidated;$expand=Members($select=Name,Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    version = v('systemValueGlobalVersionKey'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                    focusedProduct = v('systemValueCustomersPlanningFocused'),
                    relativeYear = v('systemValueGlobalSegmentedControlRelativeYear'),
                    relativeYearValue = v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    hasFocusedProduct = Repository.rocheBPSPCustomersPlanning.isFocused(),
                    customerCode = v('systemValueCustomersPlanningCustomerCode'),
                    type = v('systemValueCustomersPlanningMonthlyTypeValue')
                ;
                return `
                    {
                        "MDX" : 
                            "With
                                --Default mdx to run from JS
                                Set ProductRows As
                                {Filter(
                                  {Filter({[Products].[BPSP ${productVersion}].Members} ,
                                  [Sales Territory to Product].([Versions].[Versions].[${version}],
                                                                [Companies].[Companies].[${company}],
                                                                [Territories].[Territories].[${territoryCode}],
                                                                [Measures Sales Territory to Product].[Measures Sales Territory to Product].[Assignment Flag])>0)},
                                           [Products].[BPSP Budget].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL1' or 
                                           [Products].[BPSP Budget].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL2' or 
                                           [Products].[BPSP Budget].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL2a' or 
                                           [Products].[BPSP Budget].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL3'
                                          )}   
                                -- mdx to run from JS when user focusing
                                Set FocusedRows As
                                {Filter({TM1DRILLDOWNMEMBER({[Products].[BPSP ${productVersion}].[${focusedProduct}]} , All, Recursive)}
                                ,[Sales Territory to Product].([Versions].[Versions].[${version}],
                                                                [Companies].[Companies].[${company}],
                                                                [Territories].[Territories].[${territoryCode}],
                                                                [Measures Sales Territory to Product].[Measures Sales Territory to Product].[Assignment Flag])>0)}
                                -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)     
                                     MEMBER [Periods].[Periods].[ProductName] as 
                                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Description')
                                     MEMBER [Periods].[Periods].[ProductCaption] as 
                                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Element')
                                     MEMBER [Periods].[Periods].[ProductLevel] as 
                                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name')
                                     MEMBER [Periods].[Periods].[UILevelFormat] as 
                                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} UI Level Format')
                                     MEMBER [Periods].[Periods].[HasComment] as
                                            [Sales Plan by Customer].([Periods].[Periods].[${relativeYearValue}],[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Final Sales Plan],[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Comment Flag])
                                -- Create the first 3 column with information
                                     Set FixColumns AS
                                     {[Periods].[Periods].[ProductName],
                                      [Periods].[Periods].[ProductCaption],
                                      [Periods].[Periods].[ProductLevel],
                                      [Periods].[Periods].[UILevelFormat]
                                      }
                                     Set Comment AS
                                     {[Periods].[Periods].[HasComment]}
                                SELECT 
                                  Union(
                                     {Union({FixColumns}, 
                                           {TM1DRILLDOWNMEMBER({[Periods].[Periods].[${relativeYearValue}]}, ALL, RECURSIVE )}
                                     ,All)},
                                     {Comment}
                                  ,All)
                                  ON COLUMNS, 
                                   ${hasFocusedProduct ? '{FocusedRows}' : '{ProductRows} '} 
                                  ON ROWS 
                                FROM [Sales Plan by Customer] 
                                WHERE 
                                  (
                                   [Versions].[Versions].[${version}],
                                   [Receivers].[Receivers].[${receiver}],
                                   [Territories].[Territories].[${territoryCode}],
                                   [Companies].[Companies].[${company}],
                                   [Customers Plan].[Customers Plan].[${customerCode}],
                                   [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[${type}],
                                   [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value]
                                  )
                                "
                    }
               `;
            },
            parsingControl: {
                type: 'matrix',
                length: 18,
                query: [
                    (r, x) => {
                        let result, pl, pc, uiLevel = r.Cells[x + 3].FormattedValue;
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = x;
                        pc = r.Cells[x + 1].FormattedValue;
                        pl = r.Cells[x + 2].FormattedValue.replace('a', '');
                        result = {
                            label: r.Cells[x].FormattedValue,
                            skin: 'gridtable_hierarchy_bpsp_' + uiLevel,
                            cellVisible: true,
                            icon: 'icon-badge',
                            members: r.Cells[x].Members,
                            productLevel: pl,
                            uiLevel: uiLevel,
                            productCode: pc,
                            openPopUpConditional: true
                        };
                        return result;
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueCustomersPlanningMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: ''
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return {
                            title: r.Cells[Widgets['systemValueCustomersPlanningMonthlyRelativeIndex']].FormattedValue,
                            cellSkin: ''
                        };
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 2;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                    (r, x) => {
                        Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] = Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'] + 1;
                        return Repository.rocheBPSPCustomersPlanning.getGridTableMonthlyCell(Widgets['systemValueCustomersPlanningMonthlyRelativeIndex'], r);
                    },
                ]
            }
        }
    },
    rocheBPSPCustomersPlanningGridTableYearly: {
        perform: {
            validation: (db, cell, widgetValue, row, col) => {
                return {success: cell.copyMerge === false && cell.distributionEdit === false};
            },
            url: (db, cell, widgetValue, row, col) => {
                return `/api/v1/Processes('MODULE - UI - Sales Plan by Customer Split')/tm1.ExecuteWithReturn`;
            },
            type: 'POST',
            body: (db, cell, widgetValue, row, col) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    customerCode = v('systemValueCustomersPlanningCustomerCode'),
                    product = Utils.getGridTableCell('rocheBPSPCustomersPlanningGridTableYearly', 0).productCode,
                    period = v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key'),
                    parameters = [];

                parameters.push(Utils.getProcessNameValuePair('pProduct', product));
                parameters.push(Utils.getProcessNameValuePair('pCompany', company));
                parameters.push(Utils.getProcessNameValuePair('pReceiver', receiver));
                parameters.push(Utils.getProcessNameValuePair('pTerritory', territoryCode));
                parameters.push(Utils.getProcessNameValuePair('pPeriod', period));
                parameters.push(Utils.getProcessNameValuePair('pCustomer', customerCode));
                parameters.push(Utils.getProcessNameValuePair('pValue', Utils.parseNumber(widgetValue.value)));
                parameters.push(Utils.getProcessNameValuePair('pVersion', version));
                parameters.push(Utils.getProcessNameValuePair('pLineItem', 'Base Plan'));

                return Utils.buildProcessParameters(parameters);
            }
        },
        initCondition: (db) => {
            return Repository.rocheBPSPCustomersPlanning.isYearly(db)
                && v('rocheBPSPCustomersPlanningVersionSelector.value.length') !== false;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Updateable,RuleDerived,Consolidated;$expand=Members($select=Name, Attributes/Caption, Attributes/CalendarWeeks, Attributes/SalesChannel, Attributes/ClientName, Attributes/Location, Attributes/Editable, Attributes/Dummy))`,
            type: 'POST',
            body: (db, widgetId, object) => {
                if (object.isCompareByColumnMode()) {
                    return object.getCompareByColumnMDX(object, db);
                }
                if (object.isCompareByRowMode()) {
                    return object.getCompareByRowMDX(object, db);
                }
                return object.getNormalMDX(object, db);
            },
            parsingControl: (db, widgetId, object) => {
                if (object.isCompareByColumnMode()) {
                    return object.getParsingControlCompareByColumn;
                }
                if (object.isCompareByRowMode()) {
                    return object.getParsingControlCompareByRow;
                }
                return object.parsingControlNormalMode;
            }
        },
        isCompareByColumnMode() {
            return v('systemValueCustomerCompareBy') === 'Column';
        },
        isCompareByRowMode() {
            return v('systemValueCustomerCompareBy') === 'Row';
        },
        getNormalMDX(object, db) {
            let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                version = v('systemValueGlobalVersionKey'),
                receiver = v('systemValueCustomersPlanningCustomerReceiver'),
                productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                focusedProduct = v('systemValueCustomersPlanningFocused'),
                relativeYear = v('systemValueGlobalSegmentedControlRelativeYear'),
                relativeYearValue = v('systemValueGlobalSegmentedControlRelativeYearValue'),
                hasFocusedProduct = Repository.rocheBPSPCustomersPlanning.isFocused(),
                customerCode = v('systemValueCustomersPlanningCustomerCode')
            ;
            return ` {
                        "MDX" : 
                            "
                               With     Set ProductRows As
                                {Filter(
                                  {Filter({[Products].[BPSP ${productVersion}].Members} ,
                                  [Sales Territory to Product].([Versions].[Versions].[Live],
                                                                [Companies].[Companies].[${company}],
                                                                [Territories].[Territories].[${territoryCode}],
                                                                [Measures Sales Territory to Product].[Measures Sales Territory to Product].[Assignment Flag])>0)},
                                           [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL1' or 
                                           [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL2' or 
                                           [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL2a' or 
                                           [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL3'
                                          )}   
                                -- mdx to run from JS when user focusing
                                Set FocusedRows As
                                {Filter({TM1DRILLDOWNMEMBER({[Products].[BPSP ${productVersion}].[${focusedProduct}]} , All, Recursive)},
                                  [Sales Territory to Product].([Versions].[Versions].[Live],
                                                                [Companies].[Companies].[${company}],
                                                                [Territories].[Territories].[${territoryCode}],
                                                                [Measures Sales Territory to Product].[Measures Sales Territory to Product].[Assignment Flag])>0)}
                                --Create a dummy prodct for padding column headers
                                     MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[DUMMY] as 1
                                --Create a dummy Tuple with 9 member for column padding
                                     Set PaddingColumns AS
                                     {{TM1SubsetToSet([Periods].[Periods],'zUI Padding Years')}*{[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[DUMMY]}}
                                --Default column selection depend on Year selection
                                     Set DefaultColumnSelection AS
                                     {HEAD(UNION({StrToSet([Control].([Measures Control].[Measures Control].[UI CustomersGridTable DefaultColumnsTuple ${relativeYear}],
                                     [Value Type].[Value Type].[String]))},{PaddingColumns},All),10)}
                                -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)     
                                     MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductName] as 
                                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Description')
                                     MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductCaption] as 
                                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Element')
                                     MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductLevel] as 
                                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name')
                                     MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[UILevelFormat] as 
                                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} UI Level Format')
                                     MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[HasComment] as
                                            [Sales Plan by Customer].([Periods].[Periods].[${relativeYearValue}],
                                            [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Final Sales Plan],
                                            [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Comment Flag])
                                -- Create the first 3 column with information
                                     Set FixColumns AS
                                     {([Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value],[Periods].[Periods].[2021],
                                       [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductName]),
                                     ([Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value],[Periods].[Periods].[2021],
                                      [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductCaption]),
                                     ([Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value],[Periods].[Periods].[2021],
                                      [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductLevel]),
                                     ([Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value],[Periods].[Periods].[2021],
                                      [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[UILevelFormat])}
                                     Set Comment AS
                                     {([Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value],[Periods].[Periods].[2021],
                                       [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[HasComment])}
                                SELECT 
                                   Union(
                                     Union({FixColumns},
                                           {[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value],
                                           [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[UIFormat]}*
                                           {DefaultColumnSelection}
                                      ,All),
                                   {Comment},All)
                                  ON COLUMNS, 
                                  ${hasFocusedProduct ? '{FocusedRows}' : '{ProductRows} '}
                                  ON ROWS 
                                FROM [Sales Plan by Customer] 
                                WHERE 
                                  (
                                   [Versions].[Versions].[${version}],
                                   [Receivers].[Receivers].[${receiver}],
                                   [Territories].[Territories].[${territoryCode}],
                                   [Companies].[Companies].[${company}],
                                   [Customers Plan].[Customers Plan].[${customerCode}]
                                  )
                            "
                    }
               `;

        },
        getCompareByRowMDX(object, db) {
            let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key'),
                receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                relativeYearValue = v('systemValueGlobalStartingPlanYear'),//2021
                relativeYearValuePlusOne = parseInt(v('systemValueGlobalStartingPlanYear')) + 1,
                relativeYearValuePlusTwo = parseInt(v('systemValueGlobalStartingPlanYear')) + 2,
                relativeYearValuePlusThree = parseInt(v('systemValueGlobalStartingPlanYear')) + 3,
                yearMinuszOne = v('systemValueGlobalStartingPlanYear') - 1,
                customerCode = v('systemValueCustomersPlanningCustomerCode'),
                valueSegmentedControll = Repository.rocheBPSPCustomersPlanning.customersPlanningValueSegmentedControlLogicInRowCompare(),
                product = v('systemValueCustomerCompareByRowSelectedProductCode'),
                lineItemSelector = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningGridRow2LineItemSelector', 'key')
            ;
            return ` {
                        "MDX" : "WITH
                        -- Comparison query control elements
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ReportType] AS \\"${valueSegmentedControll}\\"
                        -- Standard info columns
                             MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductName] as 
                                    [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Description')
                             MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductNumber] as 
                                    [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Element')
                             MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductLevel] as 
                                    [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name')
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[VersionCode] AS [Versions].[Versions].CurrentMember.Name
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[VersionName] AS
                                [Version Information by Company].([Versions].[Versions].CurrentMember,[Companies].[Companies].[${company}],
                                    [Measures Version Information by Company].[Measures Version Information by Company].[Name])
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[VersionMonth] AS
                                [Version Information by Company].([Versions].[Versions].CurrentMember,[Companies].[Companies].[${company}],
                                    [Measures Version Information by Company].[Measures Version Information by Company].[Actuals Month])
                        -- Reuse standard PH based formatting
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[UILevelFormat] AS
                                IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${version}], '01C', '02C')
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[VersionCaption] AS
                                IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${version}],
                                    [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductName] + 
                                    ' (' + [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[VersionName] + ')',
                                    [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[VersionName] + 
                                    ' (' + [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[VersionMonth] + ')')
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[HasComment] AS
                                [Sales Plan by Customer].([Periods].[Periods].[${relativeYearValue}],[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Final Sales Plan],
                                    [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Comment Flag])
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[FirstDataColumn] AS
                                IIF( [Versions].[Versions].CurrentMember IS [Versions].[Versions].[${version}], 0, COUNT({CompareColumns}) )
                        -- Calcuated measures for variances
                            MEMBER [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[AbsoluteVariance] AS
                                ([Versions].[Versions].CurrentMember,[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value])
                                - ([Versions].[Versions].[${version}],[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value])
                            MEMBER [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[PercentVariance] AS
                                IIF( ([Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value] >-0.5 ) AND ([Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value] <0.5),
                                    IIF ( [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[AbsoluteVariance] <> 0, -1, 0), 
                                    [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[AbsoluteVariance]/[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value])
                                , FORMAT_STRING='#0.00%'
                        -- Final aggregation of values for reporting view.
                            MEMBER [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[ReportingMeasure] AS
                                    IIF([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ReportType] =
                                     'DELTA ABS', '[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[AbsoluteVariance]',
                                        IIF([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ReportType] =
                                         'DELTA PERCENT', '[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[PercentVariance]',
                                        '[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value]' ))
                        -- Required sets of versions
                            SET ReportVersions AS
                                {EXCEPT( {FILTER(
                                    {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                                    , [Version Information by Company].([Companies].[Companies].[${company}],
                                        [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                                , {[Versions].[Versions].[${version}]} )}
                        -- Define required data tuples
                            SET FixColumns AS
                                {
                                ([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[VersionCode],[Periods].[Periods].[${relativeYearValue}]),
                                ([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[VersionCaption],[Periods].[Periods].[${relativeYearValue}]),
                                ([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductNumber],[Periods].[Periods].[${relativeYearValue}]),
                                ([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductLevel],[Periods].[Periods].[${relativeYearValue}]),
                                ([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[UILevelFormat],[Periods].[Periods].[${relativeYearValue}]),
                                ([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[FirstDataColumn],[Periods].[Periods].[${relativeYearValue}]),
                                ([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[REXIS Invoice],[Periods].[Periods].[${yearMinuszOne}]),
                                ([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[REXIS Invoice],[Periods].[Periods].[${relativeYearValue}])
                                }
                            SET CompareColumns AS
                                {
                                {[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[${lineItemSelector}]}
                                *
                                {[Periods].[Periods].[${relativeYearValue}],
                                [Periods].[Periods].[${relativeYearValuePlusOne}],
                                [Periods].[Periods].[${relativeYearValuePlusTwo}],
                                [Periods].[Periods].[${relativeYearValuePlusThree}]}
                                }
                                SET GrowthColumns AS
                                {
                                {[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Growth Final Sales Plan]}
                                *
                                {[Periods].[Periods].[${relativeYearValue}],
                                [Periods].[Periods].[${relativeYearValuePlusOne}],
                                [Periods].[Periods].[${relativeYearValuePlusTwo}],
                                [Periods].[Periods].[${relativeYearValuePlusThree}]}
                                }
                            SET Comment AS
                                {
                                ([Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value],[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[HasComment],
                                    [Periods].[Periods].[${relativeYearValue}])
                                }
                            SELECT
                                {UNION( {UNION( {UNION( {[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value]} * {FixColumns},
                                    {[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value]} * {CompareColumns} , All )},
                                    { StrToMember([Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[ReportingMeasure]) } * {CompareColumns} , All )},
                                    {[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value]} * {GrowthColumns} , All )}
                            PROPERTIES [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Caption] ,[Periods].[Periods].[Caption], [Versions].[Versions].[Caption]
                            ON COLUMNS ,
                            {[Versions].[Versions].[${version}], {ReportVersions}}
                            PROPERTIES [Versions].[Versions].[Caption] ON ROWS
                        FROM [Sales Plan by Customer]
                        WHERE
                            (
                            [Receivers].[Receivers].[${receiver}],
                            [Territories].[Territories].[${territoryCode}],
                            [Companies].[Companies].[${company}],
                            [Products].[BPSP Budget].[${product}],
                            [Customers Plan].[Customers Plan].[${customerCode}]
                            )
                            "
                    }
               `;

        },
        getCompareByColumnMDX(object, db) {
            let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key'),
                receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                productVersion = v('systemValueGlobalCompanyProductPlanVersion'), // BUDGET
                focusedProduct = v('systemValueCustomersPlanningFocused'),
                relativeYear = v('systemValueGlobalStartingPlanYear'),
                relativeYearValue = v('systemValueGlobalStartingPlanYear'), // 2021
                relativeYearValuePlusOne = parseInt(v('systemValueGlobalStartingPlanYear')) + 1,
                relativeYearValuePlusTwo = parseInt(v('systemValueGlobalStartingPlanYear')) + 2,
                relativeYearValuePlusThree = parseInt(v('systemValueGlobalStartingPlanYear')) + 3,
                hasFocusedProduct = Repository.rocheBPSPCustomersPlanning.isFocused(),//${hasFocusedProduct ? '{FocusedRows}' : '{ProductRows} '}
                customerCode = v('systemValueCustomersPlanningCustomerCode'),
                versionSecond = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningGridRow2VersionSelectorTwo', 'key'),
                lineItemSelector = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningGridRow2LineItemSelector', 'key'),
                valueSegmentedControll = Repository.rocheBPSPCustomersPlanning.customersPlanningValueSegmentedControlLogic();


            return `{"MDX":"             
                     With Set ProductRows As
                 {Filter({Filter({[Products].[BPSP ${productVersion}].Members} ,
                 [Sales Territory to Product].([Versions].[Versions].[Live],
                                                [Companies].[Companies].[${company}],
                                                [Territories].[Territories].[${territoryCode}],
                                                [Measures Sales Territory to Product].[Measures Sales Territory to Product].[Assignment Flag])>0)},
                           [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL1' or 
                           [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL2' or 
                           [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL2a' or 
                           [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name') = 'PL3'
                          )}   
                -- mdx to run from JS when user focusing
                Set FocusedRows As
                {Filter({TM1DRILLDOWNMEMBER({[Products].[BPSP ${productVersion}].[${focusedProduct}]} , All, Recursive)},
                  [Sales Territory to Product].([Versions].[Versions].[Live],
                                                [Companies].[Companies].[${company}],
                                                [Territories].[Territories].[${territoryCode}],
                                                [Measures Sales Territory to Product].[Measures Sales Territory to Product].[Assignment Flag])>0)} 
                     MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductName] as 
                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Description')
                     MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductCaption] as 
                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Element')
                     MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductLevel] as 
                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} Product Level - Name')
                     MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[UILevelFormat] as 
                            [Products].[BPSP ${productVersion}].CurrentMember.Properties('BPSP ${productVersion} UI Level Format')
                -- Calculated members for reporting
                    MEMBER [Versions].[Versions].[AbsoluteVariance] AS
                        ([Versions].[Versions].[${versionSecond}] - [Versions].[Versions].[${version}])
                    MEMBER [Versions].[Versions].[PercentVariance] AS
                        ([Versions].[Versions].[${versionSecond}] - [Versions].[Versions].[${version}] )/[Versions].[Versions].[${version}]
                        , FORMAT_STRING='#0.00%'
                -- Create the lookup info columns
                    Set FixColumns AS
                        {
                        {([Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value],
                        [Periods].[Periods].[${relativeYearValue}],
                        [Versions].[Versions].[${version}])}
                        *
                        {[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductName],
                        [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductCaption],
                        [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ProductLevel],
                        [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[UILevelFormat]}
                        }
                -- Generate the reporting columns
                    Set CompareColumns AS{
                    {[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value],[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[UIFormat]}
                        *
                        {[Periods].[Periods].[${relativeYearValue}],
                        [Periods].[Periods].[${relativeYearValuePlusOne}],
                        [Periods].[Periods].[${relativeYearValuePlusTwo}],
                        [Periods].[Periods].[${relativeYearValuePlusThree}]}
                        *
                        {[Versions].[Versions].[${version}]
                        ,[Versions].[Versions].[${valueSegmentedControll}]}
                        *
                        {[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[${lineItemSelector}]}
                        }
                SELECT
                    UNION( {FixColumns}, {CompareColumns} ,All)
                    ON COLUMNS,
                    ${hasFocusedProduct ? '{FocusedRows}' : '{ProductRows} '}
                    ON ROWS
                FROM [Sales Plan by Customer]
                WHERE
                    (
                    [Receivers].[Receivers].[${receiver}],
                    [Territories].[Territories].[${territoryCode}],
                    [Companies].[Companies].[${company}],
                    [Customers Plan].[Customers Plan].[${customerCode}]
                    )
                    "}`;

        },
        parsingControlNormalMode: {
            type: 'matrix',
            length: 25,
            query: [
                (r, x) => {
                    let result, pl, pc, uiLevel = r.Cells[x + 3].FormattedValue;
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = x;
                    pc = r.Cells[x + 1].FormattedValue;
                    pl = r.Cells[x + 2].FormattedValue.replace('a', '');
                    result = {
                        label: r.Cells[x].FormattedValue,
                        skin: 'gridtable_hierarchy_bpsp_' + uiLevel,
                        cellVisible: true,
                        icon: 'icon-badge',
                        members: r.Cells[x].Members,
                        productLevel: pl,
                        uiLevel: uiLevel,
                        productCode: pc,
                        openPopUpConditional: true
                    };
                    return result;
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: ''
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: ''
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 2;
                    return Repository.rocheBPSPCustomersPlanning.getGridTableYearlyCell(Widgets['systemValueCustomersPlanningYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPCustomersPlanning.getGridTableYearlyCell(Widgets['systemValueCustomersPlanningYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPCustomersPlanning.getGridTableYearlyCell(Widgets['systemValueCustomersPlanningYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPCustomersPlanning.getGridTableYearlyCell(Widgets['systemValueCustomersPlanningYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPCustomersPlanning.getGridTableYearlyCell(Widgets['systemValueCustomersPlanningYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPCustomersPlanning.getGridTableYearlyCell(Widgets['systemValueCustomersPlanningYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPCustomersPlanning.getGridTableYearlyCell(Widgets['systemValueCustomersPlanningYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPCustomersPlanning.getGridTableYearlyCell(Widgets['systemValueCustomersPlanningYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPCustomersPlanning.getGridTableYearlyCell(Widgets['systemValueCustomersPlanningYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return Repository.rocheBPSPCustomersPlanning.getGridTableYearlyCell(Widgets['systemValueCustomersPlanningYearlyRelativeIndex'], r);
                },
                (r, x) => {
                    return {cellVisible: false};
                },
                (r, x) => {
                    return {cellVisible: false};
                },

                (r, x) => {
                    return {cellVisible: false};
                },
                (r, x) => {
                    return {cellVisible: false};
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 11;
                    let cellValue = r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue;
                    return {

                        icon: cellValue === '' ? 'icon-comment-off' : 'icon-comment-on',
                        iconColor: cellValue === '' ? '#C5C6C6' : '#0066cc',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members,
                        hasComment: cellValue !== ''
                    };
                }
            ]
        },
        getParsingControlCompareByColumn: {
            type: 'matrix',
            length: 20,
            query: [

                (r, x) => {
                    let result, pl, pc, uiLevel = r.Cells[x + 3].FormattedValue;
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = x;
                    pc = r.Cells[x + 1].FormattedValue;
                    pl = r.Cells[x + 2].FormattedValue.replace('a', '');
                    result = {
                        label: r.Cells[x].FormattedValue,
                        skin: 'gridtable_hierarchy_bpsp_' + uiLevel,
                        cellVisible: true,
                        icon: 'icon-badge',
                        members: r.Cells[x].Members,
                        productLevel: pl,
                        uiLevel: uiLevel,
                        productCode: pc,
                        openPopUpConditional: false
                    };
                    return result;
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: '',
                        members: r.Cells[x + 1].Members,
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: '',
                        members: r.Cells[x + 1].Members,
                    };
                },
                (r, x) => {
                    return {
                        title: r.Cells[x + 4].FormattedValue,
                        cellSkin: 'readonly_blue_bpsp',
                        alignment: 'center-right',
                        members: r.Cells[x + 4].Members,
                    }
                },
                (r, x) => {
                    return {
                        title: r.Cells[x + 5].FormattedValue,
                        cellSkin: 'readonly_bpsp',
                        alignment: 'center-right',
                        members: r.Cells[x + 5].Members,
                    }
                },
                (r, x) => {
                    return {
                        title: r.Cells[x + 6].FormattedValue,
                        cellSkin: 'readonly_blue_bpsp',
                        members: r.Cells[x + 6].Members
                    }
                },
                (r, x) => {
                    return {
                        title: r.Cells[x + 7].FormattedValue,
                        cellSkin: 'readonly_bpsp',
                        members: r.Cells[x + 7].Members
                    }
                },
                (r, x) => {
                    return {
                        title: r.Cells[x + 8].FormattedValue,
                        cellSkin: 'readonly_blue_bpsp',
                        members: r.Cells[x + 8].Members
                    }
                },
                (r, x) => {
                    return {
                        title: r.Cells[x + 9].FormattedValue,
                        cellSkin: 'readonly_bpsp',
                        members: r.Cells[x + 9].Members
                    }
                },
                (r, x) => {
                    return {
                        title: r.Cells[x + 10].FormattedValue,
                        cellSkin: 'readonly_blue_bpsp',
                        members: r.Cells[x + 10].Members
                    }
                },
                (r, x) => {
                    return {
                        title: r.Cells[x + 11].FormattedValue,
                        cellSkin: 'readonly_bpsp',
                        members: r.Cells[x + 11].Members
                    }
                },
                // id�ig lesz
                (r, x) => {
                    return {cellVisible: false};
                },
                (r, x) => {
                    return {cellVisible: false};
                },
                (r, x) => {
                    return {cellVisible: false};
                },

                (r, x) => {
                    return {cellVisible: false};
                },
                (r, x) => {
                    return {cellVisible: false};
                },
                (r, x) => {
                    return {cellVisible: false};
                },
                (r, x) => {
                    return {cellVisible: false};
                }
            ]
        },
        getParsingControlCompareByRow: {
            type: 'matrix',
            length: 20,
            query: [
                (r, x) => {
                    let result, pl, pc, uiLevel = r.Cells[x + 4].FormattedValue,
                        colOffset = r.Cells[x + 5].FormattedValue;
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = x;
                    Widgets['systemValueCustomersPlanningCompareColumnOffset'] = colOffset;
                    pc = r.Cells[x + 2].FormattedValue;
                    pl = r.Cells[x + 3].FormattedValue.replace('C', '');
                    result = {
                        label: r.Cells[x + 1].FormattedValue,
                        skin: 'gridtable_hierarchy_bpsp_' + uiLevel,
                        cellVisible: true,
                        icon: x > 0 ? 'icon-rectangle-stack' : 'icon-badge',
                        members: r.Cells[x].Members,
                        productLevel: pl,
                        uiLevel: uiLevel,
                        productCode: pc,
                        captionWithoutExtraInfo: r.Cells[x + 1].FormattedValue,
                        openPopUpConditional: false
                    };
                    return result;
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 2;
                    return {
                        title: x > 2 ? '' : r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: ''
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: x > 3 ? '' : r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue.replace('PL', ''),
                        paddingRight: '40%'
                    };
                },


                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 3;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    let incCols = 1 + parseInt(Widgets['systemValueCustomersPlanningCompareColumnOffset']);
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + incCols;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => { //10
                    //Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        cellVisible: false
                    };
                },
                (r, x) => {
                    //Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        cellVisible: false
                    };
                },
                (r, x) => {
                    //Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        cellVisible: false
                    };
                },
                (r, x) => {
                    //Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        cellVisible: false,
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    let incCols = 5 - parseInt(Widgets['systemValueCustomersPlanningCompareColumnOffset']);
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + incCols;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] = Widgets['systemValueCustomersPlanningYearlyRelativeIndex'] + 1;
                    return {
                        title: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].FormattedValue,
                        cellSkin: x < 13 ? 'selected' : 'readonly_bpsp',
                        members: r.Cells[Widgets['systemValueCustomersPlanningYearlyRelativeIndex']].Members
                    };
                },
                (r, x) => {
                    return {
                        cellVisible: false
                    };
                }
            ]
        },
        setCompareModeToRow(cellData) {
            Utils.setWidgetValue('systemValueCustomerCompareBy', 'Row');
            Utils.setWidgetValue('systemValueCustomerCompareByRowSelectedProductCode', cellData.productCode);
        },

        // Version copy funtions
        getCopyVersionSource() {
            const b = Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByRowMode();
            if (b) {
                let r = Repository.rocheBPSPCustomersPlanningGridTableYearly.getRowsForCopyVersion('members');
                r.items.shift();
                return r;
            } else {
                return {
                    editable: false,
                    items: v('rocheBPSPCustomersPlanningGridRow2VersionSelectorTwo.items')
                };
            }
        },

        getRowsForCopyVersion(attribute = 'members') {
            const i = v('rocheBPSPCustomersPlanningGridTableYearly.row');
            //const l = v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[i][0][attribute];
            const l = v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[i][0][attribute][5].Name;
            return {
                items: v('rocheBPSPCustomersPlanningGridTableYearly.cellData').map(e => {
                    return {
                        name: e[0].label,
                        key: e[0][attribute][5].Name,
                        on: e[0][attribute][5].Name === l
                    }
                })
            };
        },

        getRowsForCopyVersionColumns(attribute = 'members') {
            const i = v('rocheBPSPCustomersPlanningGridTableYearly.row');
            //const l = v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[i][0][attribute];
            const l = v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[i][0][attribute][4].Name;
            return {
                items: v('rocheBPSPCustomersPlanningGridTableYearly.cellData').map(e => {
                    return {
                        name: e[0].label,
                        key: e[0][attribute][4].Name,
                        on: e[0][attribute][4].Name === l
                    }
                })
            };
        },

        getCopyVersionTarget() {
            return {
                editable: false,
                items: v('rocheBPSPCustomersPlanningVersionSelector.items')
            };
        },

        getCopyVersionRows() {
            const b = Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByRowMode();
            if (b) {
                return {
                    editable: false,
                    items: [{
                        //name: v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[0][0].captionWithoutExtraInfo,
                        name: v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[0][0].members[3].Attributes.Caption,
                        key: v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[0][0].members[3].Name,
                        on: true
                    }]
                };
            } else {
                return Repository.rocheBPSPCustomersPlanningGridTableYearly.getRowsForCopyVersionColumns();
            }
        },

        getCopyVersionColumns() {
            const b = Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByRowMode();
            return {
                editable: false,
                items: [
                    {
                        name: v('rocheBPSPCustomersPlanningGridRow2LineItemSelector.value'),
                        on: true
                    }
                ]
            };
        },

        getCopyVersionYears() {
            let s = Utils.parseNumber(v('systemValueGlobalStartingPlanYear'));
            const currentCell = Utils.getGridTableCurrentCell('rocheBPSPCustomersPlanningGridTableYearly'),
                b = Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByRowMode(),
                selected = Utils.parseNumber(currentCell.members[b ? 8 : 6].Name);

            let g = (year, inc, selected) => {
                const s = year + inc;
                return {name: s.toString(), key: s, on: s === selected};
            };
            return {
                items: [
                    {name: 'All', key: '', on: false},
                    g(s, 0, selected),
                    g(s, 1, selected),
                    g(s, 2, selected),
                    g(s, 3, selected)
                ]
            };
        },

        getCopyVersionUsed() {
            return {
                visible: false
            };
        },

        getCopyProcessParameters() {
            const b = Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByRowMode();
            if (b) {
                return {
                    pElementFrom: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupSourceVersionDropbox', 'key'),
                    pElementTo: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupTargetVersionDropbox', 'key'),
                    pProduct: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupRowsDropbox', 'key'),
                    pLineItem: v('rocheBPSPVersionsCopyDataTemplatePopupColumnsDropbox.value'),
                    pYear: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupYearsDropbox', 'key'),
                    pCompany: Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    pReceiver: v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    pMeasure: 'Value',
                    pCustomer: v('systemValueCustomersPlanningCustomerCode'),
                    pTerritory: Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                };
            } else {   //compreByColumn
                return {
                    pElementFrom: Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningGridRow2VersionSelectorTwo', 'key'),
                    pElementTo: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupTargetVersionDropbox', 'key'),
                    pProduct: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupRowsDropbox', 'key'),
                    pLineItem: v('rocheBPSPVersionsCopyDataTemplatePopupColumnsDropbox.value'),
                    pYear: Utils.getDropBoxSelectedItemAttribute('rocheBPSPVersionsCopyDataTemplatePopupYearsDropbox', 'key'),
                    pCompany: Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    pReceiver: v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    pMeasure: 'Value',
                    pCustomer: v('systemValueCustomersPlanningCustomerCode'),
                    pTerritory: Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                };
            }
        },

        getCopyProcessName() {
            return 'MODULE - UI - Input Copy Customer';
        },

        getCopyVersionCustomer() {
            return {
                editable: false,
                items: [
                    {name: v('systemValueCustomersPlanningCustomer'), on: true}
                ]
            };
        },

        getCopyVersionReceiver() {
            return {
                editable: false,
                items: [
                    {name: v('systemValueCustomersPlanningCustomerReceiver'), on: true}
                ]
            };
        },

        text_click: {
            execute: (db, cell, widgetValue, row, col, event, element) => {
                if (Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByColumnMode() ||
                    Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByRowMode()) {
                    Repository.rocheBPSPVersionsCopyDataTemplatePopup.setSource('rocheBPSPCustomersPlanningGridTableYearly');
                    Repository.rocheBPSPVersionsCopyDataTemplatePopup.refresh();
                    Api.openPopup('rocheBPSPVersionsCopyDataTemplatePopup', event, element);
                }
            }
        },


        refreshCopyVersionRelatedWidgets() {
            Api.forceRefresh('rocheBPSPCustomersPlanningGridTableYearly');
        }

    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-02': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let a = 8;
                if (v('systemValueCustomerCompareBy') === 'Row')
                    a = 7;
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareModeFirstCol(index + 1).title :
                        //v('systemValueGlobalSegmentedControlRelativeYearValue') - 1,
                        v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[0][3].members[7].Attributes.Caption,
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareModeFirstCol(index + 1).body :
                        v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[0][3].members[a].Attributes.Caption
                }
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-03': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let a = 8;
                if (v('systemValueCustomerCompareBy') === 'Row')
                    a = 7;
                let index = parseInt(widgetId.split('-')[1]);
                //let condition = parseInt(v('systemValueGlobalSegmentedControlRelativeYearValue')) === parseInt(v('systemValueGlobalStartingPlanYear'));
                //let yearNormalMode = condition ? v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[0][4].members[7].Attributes.Caption : '';
                return {
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title
                        : v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[0][4].members[7].Attributes.Caption,
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body
                        : v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[0][4].members[a].Attributes.Caption,
                }
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-04': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body : Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogicInNormalMode(),
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : ''
                }
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-05': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let condition = parseInt(v('systemValueGlobalSegmentedControlRelativeYearValue')) === parseInt(v('systemValueGlobalStartingPlanYear'));
                let yearNormalMode = condition ? '' : v('rocheBPSPCustomersPlanningGridTableYearly.cellData')[0][6].members[7].Attributes.Caption;
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body : 'Base Plan',
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : yearNormalMode
                }
            }
        }
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-06': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body : 'One Time Event',
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? parseInt(v('systemValueGlobalStartingPlanYear')) + 2 : ''
                }
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-07': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : '',
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body : 'Opportunities'
                }
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-08': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body : 'Final Sales Plan',
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : ''
                }
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-09': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : '',
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body : 'Submitted Sales Plan'
                }
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-10': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body
                        : v('systemValueGlobalSegmentedControlRelativeYearValue') + ' - ' + parseInt(v('systemValueGlobalSegmentedControlRelativeYearValue') - 1),
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : 'Final Sales Plan '
                }
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-11': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body
                        : 'Sales Plan ' + v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : 'Growth Final '
                }
            }
        }
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-12': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body
                        : 'Sales Plan ' + v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : 'Growth Final '
                }
            }
        }
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-13': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body
                        : 'Sales Plan ' + v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : 'Growth Final '
                }
            }
        }
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-14': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body
                        : 'Sales Plan ' + v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : 'Growth Final '
                }
            }
        }
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-15': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body
                        : 'Sales Plan ' + v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : 'Growth Final '
                }
            }
        }
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-16': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return {
                    body: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).body
                        : '',
                    title: Repository.rocheBPSPCustomerPlanning.gridTableHeaderLogic() ? Repository.rocheBPSPCustomerPlanning.headerInCompareMode(index + 1).title : ''
                }
            }
        }
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-03': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPCustomerPlanning.executeForCell(index + 1);
            }
        }
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-04': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPCustomerPlanning.executeForCell(index + 1);
            }
        }
    },


    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-05': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPCustomerPlanning.executeForCell(index + 1);
            }
        }
    },


    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-06': {
        initCondition: () => {
            return Repository.rocheBPSPCustomerPlanning.initCondition();
        },
        initDefault: () => {
            return {};
        },
        init: {
            execute: (db, widgetId) => {
                let index = parseInt(widgetId.split('-')[1]);
                return Repository.rocheBPSPCustomerPlanning.executeForCell(index + 1);
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-07': {
        reference: 'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-06'
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-08': {
        reference: 'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-06'
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-09': {
        reference: 'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-06'
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-10': {
        reference: 'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-06'
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-11': {
        reference: 'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-06'
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-12': {
        reference: 'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-06'
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-13': {
        reference: 'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-06'
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-14': {
        reference: 'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-06'
    },

    'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-15': {
        reference: 'rocheBPSPCustomersPlanningGridTableYearlyHeaderCell-06'
    },

    rocheBPSPCustomersPlanningYearSegmentedControl: {
        init: {
            execute: (db) => {
                let s = parseInt(Widgets['systemValueGlobalStartingPlanYear']),
                    sr = Widgets['systemValueGlobalSegmentedControlRelativeYear'],
                    sc = parseInt(Widgets['systemValueCustomerPlanYearsCount']),
                    sm = s + sc;
                return [
                    {label: s, selected: 'Y0' === sr, visible: sm > s},
                    {label: ++s, selected: 'Y1' === sr, visible: sm > s},
                    {label: ++s, selected: 'Y2' === sr, visible: sm > s},
                    {label: ++s, selected: 'Y3' === sr, visible: sm > s},
                ];
            }
        },
        switch: {
            url: (db) => `/api/v1/Cellsets('${Widgets.systemValueGlobalSegmentedControlCellsetId}')/Cells`,
            type: 'PATCH',
            body: (db) => {
                Widgets['systemValueGlobalSegmentedControlRelativeYear'] = v('rocheBPSPCustomersPlanningYearSegmentedControl.value');
                Widgets['systemValueGlobalSegmentedControlRelativeYearValue'] = v('rocheBPSPCustomersPlanningYearSegmentedControl.selected');
                return `{"Ordinal": 0,"Value": \"${db.systemValueGlobalSegmentedControlRelativeYear}\"}`
            }
        }
    },
    rocheBPSPCustomersTerritorySelector: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersCompanySelector');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "

                    SELECT
                         {[}ElementAttributes_Territories].[}ElementAttributes_Territories].[Territory Code],
                          [}ElementAttributes_Territories].[}ElementAttributes_Territories].[Caption]}
                    ON COLUMNS ,
                       {FILTER(
                       {TM1FILTERBYLEVEL(
                             {TM1DRILLDOWNMEMBER(
                                {[Territories].[Territories].[ALL TERRITORIES ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}]}, ALL, RECURSIVE )}, 0)}
                        , [}ElementAttributes_Territories].[}ElementAttributes_Territories].[Territory Used Flag] = '1')}
                      ON ROWS
                    FROM [}ElementAttributes_Territories]

            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [],
                                selected = v('systemValueCustomerStatusSelectedTerritoryId') ? v('systemValueCustomerStatusSelectedTerritoryId') : v('rocheBPSPCustomersTerritorySelector.value');
                            Utils.setWidgetValue('systemValueCustomerStatusSelectedTerritoryId', false);
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i + 1].FormattedValue,
                                    key: r.Cells[i].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCustomersCompanySelector: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'));
                Utils.setWidgetValue('systemValueCustomerPlanYearsCount', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'planYears'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "WITH MEMBER [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Planning Locked] AS
                       [Company Information].([Versions].[Versions].[Live], [Measures Company Information].[Measures Company Information].[Lock Customer Planning])
                    MEMBER [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Plan Years] AS
                        [Company Information].([Versions].[Versions].[Live],[Measures Company Information].[Measures Company Information].[Plan Years Product])
                    SELECT
                       {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name]
                       ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]
                        ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Planning Locked]
                        ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Plan Years]}
                    ON COLUMNS ,
                       {TM1SubsetToSet([Companies].[Companies], 'All Active')}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = '';
                            if (!v('systemValueGlobalSelectedCompany')) {
                                Utils.setWidgetValue('systemValueGlobalSelectedCompany', r.Cells[1].FormattedValue);
                            }
                            selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 4) {
                                if (selected === r.Cells[i + 1].FormattedValue) {
                                    Utils.setWidgetValue('systemValueCustomerPlanYearsCount', r.Cells[i + 3].FormattedValue);
                                }
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    locked: r.Cells[i + 2].FormattedValue,
                                    planYears: r.Cells[i + 3].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCustomersHeaderInfoGridTable: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersCompanySelector')
                && Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersVersionSelector')
                && Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersTerritorySelector');
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
                type: 'POST',
                body: (db) => `{"MDX":"
                              SELECT 
                           {[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[PY],
                            [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[CY],
                            [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[NY]} 
                           PROPERTIES [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Caption]  ON COLUMNS , 
                           {[Customers Plan].[Customers Plan].[All Customers Plan]} 
                          ON ROWS 
                        FROM [Sales Territory to Customer] 
                        WHERE 
                          (
                           [Versions].[Versions].[${v('systemValueGlobalVersionKey')}],
                           [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}],
                           [Territories].[Territories].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key')}],
                           [Receivers].[Receivers].[All Receivers]
                          )
                             
                "}`,
                parsingControl: {
                    type: 'matrix',
                    length: 3,
                    query: [

                        (r, x) => {
                            return {
                                body: r.Cells[x].FormattedValue,
                                title: r.Cells[x].Members[5].Attributes.Caption
                            };
                        }, (r, x) => {
                            return {
                                body: r.Cells[x + 1].FormattedValue,
                                title: r.Cells[x + 1].Members[5].Attributes.Caption
                            };
                        }, (r, x) => {
                            return {
                                body: r.Cells[x + 2].FormattedValue,
                                title: r.Cells[x + 2].Members[5].Attributes.Caption
                            };
                        }
                    ]
                }
            }
    },
    rocheBPSPCustomersHorizontalTable: {
        open: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomersPlanningCustomer', v('rocheBPSPCustomersHorizontalTable.open.customer'));
                Utils.setWidgetValue('systemValueCustomersPlanningCustomerCode', v('rocheBPSPCustomersHorizontalTable.open.code').toString());
                Utils.setWidgetValue('systemValueCustomersPlanningCustomerReceiver', v('rocheBPSPCustomersHorizontalTable.open.receiver'));
                Utils.setWidgetValue('systemValueCustomersPlanningIsOpportunitiesSelectorLoadable', false);
                Utils.setWidgetValue('systemValueCustomersPlanningIsOpportunitiesFromGridTableSelectorLoadable', false);
            }
        },
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersCompanySelector')
                && Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersVersionSelector')
                && Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersTerritorySelector');
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => `{"MDX":" 
                With
                    Member [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Desc] as
                        [Customers Plan].[Customers Plan].CurrentMember.Properties('Account Name')
                    Member [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Territory] as
                        [Territories].[Territories].CurrentMember.Properties('Code')
                    Member [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Receiver] as
                        [Receivers].[Receivers].CurrentMember.Properties('Receiver - Key')
                    Member [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Code] as
                        [Customers Plan].[Customers Plan].CurrentMember.Name
                SELECT
                    {
                    ([Versions].[Versions].[Live],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Assignment Flag]), --Live constant
                    ([Versions].[Versions].[Live],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Desc]),
                    ([Versions].[Versions].[Live],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Code]),
                    ([Versions].[Versions].[Live],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Receiver]), --Live constant
                    ([Versions].[Versions].[${v('systemValueGlobalVersionKey')}],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[PY]),
                    ([Versions].[Versions].[${v('systemValueGlobalVersionKey')}],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[CY]),
                    ([Versions].[Versions].[${v('systemValueGlobalVersionKey')}],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[NY]),
                    ([Versions].[Versions].[${v('systemValueGlobalVersionKey')}],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Submitted by]),
                    ([Versions].[Versions].[${v('systemValueGlobalVersionKey')}],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Submitted DateTime])
                }
                  PROPERTIES [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Caption]  ON COLUMNS , 
                  NON EMPTY 
                      {TM1DRILLDOWNMEMBER({[Customers Plan].[Customers Plan].[All Customers Plan ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}]}, ALL, RECURSIVE )}
                   * {TM1SubsetToSet([Receivers].[Receivers], \\"zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')} Plan Receivers\\")}  
                  ON ROWS 
                FROM [Sales Territory to Customer] 
                WHERE 
                  (
                   [Territories].[Territories].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key')}],
                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}]
                  )
                  "}`
                ,
                parsingControl: {
                    type: 'matrix',
                    length: 9,
                    query: [

                        (r, x) => {
                            return {value: r.Cells[x + 1].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 2].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 3].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 4].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 5].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 6].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 8].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 7].FormattedValue};
                        }, (r, x) => {
                            return {active: true};
                        }

                    ]
                }

            },
    },

    rocheBPSPCustomersVersionSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersCompanySelector')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersVersionSelector', 'name'));
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersVersionSelector', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {FILTER(
                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                ,[Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}],
                [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },

    rocheBPSPCustomersPlanningVersionSelector: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'name'));
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {FILTER(
                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                ,[Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}],
                [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue,
                                });
                            }
                            return result;
                        },
                        editable: (r, x) => {
                            if (v('systemValueCustomerCompareBy') === 'Column') {
                                return false;
                            }
                            if (v('systemValueCustomerCompareBy') === 'Row') {
                                return false;
                            }
                            return true;
                        }


                    }
            }
        }
    },

    rocheBPSPCustomersPlanningCompareByRowPopupGridTable: {
        initCondition: (db) => {
            return v('rocheBPSPCustomersPlanningGridTableYearly.cellData.length');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                let g = 'rocheBPSPCustomersPlanningGridTableYearly';
                let searchString = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersPlanningCompareByRowPopupCell1SearchBox')) {
                    searchString = v('rocheBPSPCustomersPlanningCompareByRowPopupCell1SearchBox.value').toUpperCase()
                }
                return v(g + '.cellData').filter(e => e[0].label.toUpperCase().includes(searchString)).map(e => {
                    return [{
                        label: e[0].label,
                        skin: 'gridtable_hierarchy_compare_byrow_bpsp_' + e[0].uiLevel,
                        productCode: e[1].title
                    }];
                });
            }
        },
        launch: {
            execute: (db, cellData) => {
                Repository.rocheBPSPCustomersPlanningGridTableYearly.setCompareModeToRow(cellData);
            }
        }
    },

    rocheBPSPCustomersPlanningGridRow2VersionSelectorTwo: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersPlanningVersionSelector')
            return b;
        },
        initDefault: (db) => {
            return [];
        },

        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersionCompareByColumn', v('rocheBPSPCustomersPlanningGridRow2VersionSelectorTwo.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {EXCEPT(
                    {FILTER(
                        {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                        , [Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}],
                        [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                    , {[Versions].[Versions].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key')}]} )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersionCompareByColumn');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue,
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },

    rocheBPSPCustomersPlanningGridRow2LineItemSelector: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueLineitem', v('rocheBPSPCustomersPlanningGridRow2LineItemSelector.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                SELECT
                    {
                    [}ElementAttributes_LineItems Sales Plan by Customer].[}ElementAttributes_LineItems Sales Plan by Customer].[Caption]
                    }
                    ON COLUMNS,
                    {FILTER(
                        {TM1SUBSETALL([LineItems Sales Plan by Customer])}
                        , [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[UI Compare Flag] = 1 )}
                    ON ROWS
                FROM
                    [}ElementAttributes_LineItems Sales Plan by Customer]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueLineitem');
                            for (let i = 0; i < r.Cells.length; i = i + 1) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue,
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },

    rocheBPSPCustomersPlanningValueSegmentedControl: {
        init: {
            execute: (db) => {
                return {
                    data: [
                        {
                            value: 'VALUE',
                            selected: v('rocheBPSPCustomersPlanningValueSegmentedControl.selected') === 'VALUE' || v('rocheBPSPCustomersPlanningValueSegmentedControl.selected') === false
                        },
                        {
                            selected: v('rocheBPSPCustomersPlanningValueSegmentedControl.selected') === 'PercentVariance',
                            value: 'PercentVariance'
                        },
                        {
                            selected: v('rocheBPSPCustomersPlanningValueSegmentedControl.selected') === 'AbsoluteVariance',
                            value: 'AbsoluteVariance'
                        }
                    ]
                };
            }

        }
    },

    rocheBPSPCustomersPlanningGridRow2Cell1ButtonOne: {
        initCondition: (db) => {
            return v('rocheBPSPCustomersPlanningPeriodUnitSegmentedControl') === 'Yearly';
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerCompareBy', 'None');
                return {visible: v('rocheBPSPCustomersPlanningPeriodUnitSegmentedControl') === 'Yearly' ? true : false};
                L(v('rocheBPSPCustomersPlanningPeriodUnitSegmentedControl') === 'Yearly');
            }
        },
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerCompareBy', 'Column');
            }
        }
    },

    rocheBPSPCustomersPlanningGridRow2Cell1ButtonTwo: {
        initCondition: (db) => {
            return v('rocheBPSPCustomersPlanningPeriodUnitSegmentedControl') === 'Yearly';
        },
        initDefault: (db) => {
            return [];
        },
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerCompareBy', 'Row');
            }
        }
    },

    rocheBPSPCustomersPlanningGridRow2ButtonExit: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerCompareBy', 'None');
            }
        }
    },

    rocheBPSPCustomersPlanningGridRow2Cell1Text: {
        initCondition: (db) => {
            return v('rocheBPSPCustomersPlanningPeriodUnitSegmentedControl') === 'Yearly';
        },
        initDefault: (db) => {
            return [];
        },

    },

    rocheBPSPCustomersPlanningCompareByRowPopupGridTable_row_0: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerCompareBy', 'Row');
            }
        }
    },

    rocheBPSPCustomersPlanningGridRow1Cell0Button: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerCompareBy', 'None');
            }
        }
    },

    rocheBPSPCustomersPlanningFocusPopupVersionCompareButton: {
        init: {
            execute: (db) => {
                return {
                    visible: db.systemValueCustomerCompareBy === 'None' && Repository.rocheBPSPCustomersPlanning.isYearly(db)
                };
            }
        },
        launch: {
            execute: (db) => {
                Repository.rocheBPSPCustomersPlanningGridTableYearly.setCompareModeToRow(Utils.getGridTableCell('rocheBPSPCustomersPlanningGridTableYearly', 0)),
                    Utils.setWidgetValue('systemValueCustomerCompareBy', 'Row');
            }
        }
    },

    rocheBPSPCustomersPlanningCustomerSelectorButton: {
        init: {
            execute: (db) => {
                return {
                    label: v('systemValueCustomersPlanningCustomer')
                        + ' (' + v('systemValueCustomersPlanningCustomerReceiver') + ')'
                };
            }
        }
    },
    rocheBPSPCustomersPlanningHorizontalTableCustomerSelector: {
        open: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomersPlanningCustomer', v('rocheBPSPCustomersPlanningHorizontalTableCustomerSelector.open.customer'));
                Utils.setWidgetValue('systemValueCustomersPlanningCustomerCode', v('rocheBPSPCustomersPlanningHorizontalTableCustomerSelector.open.code').toString());
                Utils.setWidgetValue('systemValueCustomersPlanningCustomerReceiver', v('rocheBPSPCustomersPlanningHorizontalTableCustomerSelector.open.receiver'));
            }
        },
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersCompanySelector')
                && Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersPlanningVersionSelector')
                && Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersTerritorySelector');
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => `{"MDX":"
                        WITH
                            Member [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Desc] as
                                [Customers Plan].[Customers Plan].CurrentMember.Properties('Account Name')
                            Member [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Territory] as
                               [Territories].[Territories].CurrentMember.Properties('Code')
                            Member [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Receiver] as
                                [Receivers].[Receivers].CurrentMember.Properties('Receiver - Key')
                           Member [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Code] as
                                [Customers Plan].[Customers Plan].CurrentMember.Name
                        SELECT
                            {
                            ([Versions].[Versions].[Live],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Assignment Flag]), -- constant
                            ([Versions].[Versions].[Live],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Desc]),
                            ([Versions].[Versions].[Live],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Code]),
                            ([Versions].[Versions].[Live],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Receiver]), 
                            ([Versions].[Versions].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key')}],[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[PY])
                        }
                          PROPERTIES [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Caption]  ON COLUMNS , 
                          NON EMPTY 
                          {TM1DRILLDOWNMEMBER({[Customers Plan].[Customers Plan].[All Customers Plan ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}]}, ALL, RECURSIVE )}
                            * {TM1SubsetToSet([Receivers].[Receivers], \\"zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')} Plan Receivers\\")}
                          ON ROWS 
                        FROM [Sales Territory to Customer] 
                        WHERE 
                          (
                           [Territories].[Territories].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key')}],
                           [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}]
                          )                   
                  "}`
                ,
                parsingControl: {
                    type: 'matrix',
                    length: 5,
                    query: [
                        (r, x) => {
                            return {
                                active: true,
                                on: v('systemValueCustomersPlanningCustomerCode') == r.Cells[x + 2].FormattedValue
                                    && v('systemValueCustomersPlanningCustomerReceiver') == r.Cells[x + 3].FormattedValue
                            };
                        },
                        (r, x) => {
                            return {value: r.Cells[x + 1].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 2].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 3].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 4].FormattedValue};
                        },

                    ]
                }

            },
    },
    rocheBPSPCustomersPlanningPeriodUnitSegmentedControl: {
        init: {
            execute: (db) => {
                let e = db.systemValueCustomerPlanningSegmentedControlPeriodUnit;
                return e ? [{label: 'Yearly', selected: e === 'Yearly'}, {
                    label: 'Monthly',
                    selected: e === 'Monthly'
                }] : false;
            }
        },
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerPlanningSegmentedControlPeriodUnit', v('rocheBPSPCustomersPlanningPeriodUnitSegmentedControl.selected')),
                    Utils.setWidgetValue('systemValueCustomerCompareBy', 'None');

            }
        }
    },
    rocheBPSPCustomersPlanning: {
        isMonthly: (db) => {
            return v('systemValueCustomerPlanningSegmentedControlPeriodUnit') === 'Monthly';
        },
        isYearly: (db) => {
            return v('systemValueCustomerPlanningSegmentedControlPeriodUnit') === 'Yearly';
        },
        isYearlyLoaded: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPCustomersPlanningGridTableYearly');
        },
        getVisibleGridTable: (db) => {
            return Repository.rocheBPSPCustomersPlanning.isYearly(db) ? 'rocheBPSPCustomersPlanningGridTableYearly' : 'rocheBPSPCustomersPlanningGridTableMonthly';
        },
        isFocused: () => {
            return v('systemValueIsCustomersPlanningFocused');
        },
        setCustomerSelectorOpenRecord: (db) => {
            let selected = Repository.rocheBPSPCustomersPlanning.getSelectedCustomer(db);
            if (!selected) {
                return false;
            }
            let selectedCustomer = selected.record;
            let open = {
                action: 'open',
                id: 'rocheBPSPCustomersPlanningHorizontalTableCustomerSelector',
                customer: selectedCustomer[0].value,
                code: selectedCustomer[1].value,
                receiver: selectedCustomer[2].value,
                lastyearsrevenue: selectedCustomer[3].value,
                index: selected.index
            };

            Widgets['rocheBPSPCustomersPlanningHorizontalTableCustomerSelector']['open'] = open;
            return true;
        },
        getSelectedCustomer: (db) => {
            let i, rows = v('rocheBPSPCustomersPlanningHorizontalTableCustomerSelector.rows');
            if (!rows) {
                return false;
            }
            for (i = 0; i < rows.length; ++i) {
                if (rows[i][1].value == v('systemValueCustomersPlanningCustomerCode')) {
                    return {index: i, record: rows[i]};
                }
            }
            return false;
        },
        getYearlyGridTableHeaderTitle: (index) => {
            return Repository.rocheBPSPCustomersPlanning.getYearlyGridTableHeaderInfo(index, 7);
        },
        getYearlyGridTableHeaderBody: (index) => {
            return Repository.rocheBPSPCustomersPlanning.getYearlyGridTableHeaderInfo(index, 8);
        },
        getYearlyGridTableHeaderInfo: (index, membersIndex) => {
            let gridTableData = v('rocheBPSPCustomersPlanningGridTableYearly.cellData'), members;
            if (!gridTableData || gridTableData.length === 0) {
                return '';
            }
            if (gridTableData[0].length < index) {
                return '';
            }
            members = v('members', gridTableData[0][index]);
            if (!members || members.length < membersIndex) {
                return '';
            }
            return members[membersIndex].Attributes.Caption;
        },
        getCopyMergeButtonProcessBody: (mode = 1) => {//1 = Copy, 2 = Merge
            let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                customerCode = v('systemValueCustomersPlanningCustomerCode'),
                product = Utils.getGridTableCell('rocheBPSPCustomersPlanningGridTableYearly', 0).productCode,
                periodFrom = Utils.getGridTableCurrentCell('rocheBPSPCustomersPlanningGridTableYearly').members[7].Name,
                periodTo = v('systemValueGlobalSegmentedControlRelativeYearValue'),
                percentage = $('#rocheBPSPCustomersPlanningCopyMergeTextBox').find('.ks-textbox-input').val(),
                growthRate = Utils.parseNumber(percentage) / 100,
                lineItem = Utils.getGridTableCurrentCell('rocheBPSPCustomersPlanningGridTableYearly').members[8].Name,
                version = v('systemValueGlobalVersionKey'),
                parameters = []
            ;
            parameters.push(Utils.getProcessNameValuePair('pProduct', product));
            parameters.push(Utils.getProcessNameValuePair('pCompany', company));
            parameters.push(Utils.getProcessNameValuePair('pReceiver', receiver));
            parameters.push(Utils.getProcessNameValuePair('pTerritory', territoryCode));
            parameters.push(Utils.getProcessNameValuePair('pPeriodFrom', periodFrom));
            parameters.push(Utils.getProcessNameValuePair('pPeriodTo', periodTo));
            parameters.push(Utils.getProcessNameValuePair('pMode', mode));
            parameters.push(Utils.getProcessNameValuePair('pGrowthRate', growthRate));
            parameters.push(Utils.getProcessNameValuePair('pLineItem', lineItem));
            parameters.push(Utils.getProcessNameValuePair('pCustomer', customerCode));
            parameters.push(Utils.getProcessNameValuePair('pVersion', version));

            return Utils.buildProcessParameters(parameters);
        },
        getFileName: (db) => {
            let s = [], fileName;
            s.push(Utils.getFormattedDate(new Date(), '_', true));
            s.push(db.activeUserName);
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'));
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),);
            s.push(v('rocheBPSPCustomersHorizontalTable.open.receiver'));
            s.push(v('systemValueCustomersPlanningFocused'));
            s.push(v('systemValueCustomersPlanningCustomerCode'));
            s.push(v('systemValueCustomersPlanningMonthlyTypeValue'));
            return s.join('_').replaceAll(':', '_').replaceAll(' ', '_').replaceAll('/', '_');
        },
        getGridTableMonthlyCell: (index, r) => {
            let c = r.Cells[index], editable = c.Consolidated === false && c.RuleDerived === false,
                performable = c.Consolidated === true && c.RuleDerived === false, isGrey = c.RuleDerived === true;
            if (v('systemValueCustomersPlanningMonthlyType') === 'Final Sales Plan' && c.Consolidated === true) {
                isGrey = true;
                performable = false;
            }
            if (v('systemValueCustomersPlanningMonthlyType') === 'One Time Event' && v('systemValueCustomersPlanningCustomerCode').includes("All Customers")) {
                isGrey = true;
                performable = false;
            }
            let result = {
                title: c.FormattedValue,
                cellSkin: isGrey ? 'readonly_bpsp' : '',
                skin: 'monthly_right_bpsp',
                cellVisible: true,
                editable: editable,
                ordinal: c.Ordinal,
                width: '100%',
                height: '100%',
                applyMeasuresToSection: true,
                members: c.Members,
                performable: performable
            };
            if (performable) {
                result['icon'] = 'icon-cloud-arrow-up';
            }
            if (editable) {
                result['titleFontColor'] = '#A05EB5';
            }
            return result;
        },
        getGridTableYearlyCell: (index, r) => {
            let uiIndex = index + 10, uiValue = parseInt(r.Cells[uiIndex].FormattedValue),
                skin = 'monthly_right_bpsp',
                cellSkin = '',
                applyMeasuresToSection = false,
                icon = '', distributionEdit = false, copyMerge = false, performWrite = false;
            if (uiValue === 1) {
                skin = 'products_gd_readonly_with_icon_bpsp';
                cellSkin = 'readonly_bpsp';
                icon = 'icon-copy';
                copyMerge = true;
            }
            if (uiValue === 0) {
                cellSkin = 'readonly_bpsp';
            }
            if (uiValue === 4) {
                if (r.Cells[index].Members[7].Name == v('systemValueGlobalSegmentedControlRelativeYearValue')) {
                    cellSkin = 'readonly_green_bpsp';
                } else {
                    cellSkin = 'readonly_bpsp';
                }
            }

            if ((uiValue === 2 || uiValue === 3)
                && r.Cells[index].Members[7].Name == v('systemValueGlobalSegmentedControlRelativeYearValue')) {

                skin = 'products_gd_writeable_with_icon_bpsp';
                cellSkin = '';
                applyMeasuresToSection = true;
                if (uiValue === 3) {
                    icon = 'icon-dots-vertical';
                    distributionEdit = true;
                    cellSkin = 'readonly_bpsp';
                    performWrite = false;
                } else {

                    icon = 'icon-cloud-arrow-up';
                    skin = 'monthly_right_bpsp';
                    performWrite = true;

                }
            }

            if (uiValue === 2
                && r.Cells[index].Members[7].Name != v('systemValueGlobalSegmentedControlRelativeYearValue')
                && r.Cells[index].Members[8].Name === 'Base Plan') {
                skin = 'products_gd_readonly_with_icon_bpsp';
                cellSkin = 'readonly_bpsp';
                icon = 'icon-copy';
                copyMerge = true;
            }
            let result = {
                title: r.Cells[index].FormattedValue,
                cellSkin: cellSkin,
                distributionEdit: distributionEdit,
                copyMerge: copyMerge,
                performWrite: performWrite,
                performable: performWrite,
                ordinal: r.Cells[index].Ordinal,
                skin: skin,
                members: r.Cells[index].Members,
                applyMeasuresToSection: true,
                uiValue: uiValue,
                width: '100%'
            };
            if (icon !== '') {
                result['icon'] = icon;

            }
            if (applyMeasuresToSection) {
                result['width'] = '100%';
                result['height'] = '100%';
                if (uiValue === 3 && r.Cells[index].Members[5].Name == v('systemValueGlobalSegmentedControlRelativeYearValue')) {
                    result['paddingRight'] = 26;
                }
            }
            return result;
        },
        customersPlanningValueSegmentedControlLogic: () => {
            let result = '',
                segmentedValue = v('rocheBPSPCustomersPlanningValueSegmentedControl.value');
            if (segmentedValue === 'VALUE' || segmentedValue === false) {
                result = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningGridRow2VersionSelectorTwo', 'key');
            } else {
                result = segmentedValue;
            }
            return result;
        },
        customersPlanningValueSegmentedControlLogicInRowCompare: () => {
            let result = '',
                segmentedValue = v('rocheBPSPCustomersPlanningValueSegmentedControl.value');
            if (segmentedValue === 'PercentVariance') {
                result = 'DELTA PERCENT';
            } else if (segmentedValue === 'AbsoluteVariance') {
                result = 'DELTA ABS';
            } else {
                result = 'VALUE';
            }
            return result;
        },

        uploadButtonVisibility() {
            const monthly = v('systemValueCustomerPlanningSegmentedControlPeriodUnit') === 'Monthly';
            if (monthly) {
                const AllCustomer = v('systemValueCustomersPlanningCustomerCode').includes("All Customers");
                if (AllCustomer) {
                    const basePlan = v('systemValueCustomersPlanningMonthlyTypeValue') === 'Base Plan';
                    if (basePlan) {
                        return true;
                    } else {
                        return false
                    }
                } else { //normal customer
                    const basePlanOrOneTime = v('systemValueCustomersPlanningMonthlyTypeValue') === 'Base Plan' ||
                        v('systemValueCustomersPlanningMonthlyTypeValue') === 'One Time Event';
                    if (basePlanOrOneTime) {
                        return true
                    } else {
                        return false
                    }
                }
            } else {// yearly mode
                return true;
            }
        },


    },
    rocheBPSPCustomersPlanningGridRow2Cell3aCreateOpportunityButton: {
        init: {
            execute: (db) => {
                return {
                    visible: Repository.rocheBPSPCustomersPlanning.isYearly(db) &&
                        !v('systemValueCustomersPlanningCustomerCode').includes("All Customers") &&
                        !Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByColumnMode() &&
                        !Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByRowMode()
                };
            }
        }
    },
    rocheBPSPCustomersPlanningTypeSegmentedControl: {
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomersPlanningMonthlyType', v('rocheBPSPCustomersPlanningTypeSegmentedControl.selected'));//.select
                Utils.setWidgetValue('systemValueCustomersPlanningMonthlyTypeValue', v('rocheBPSPCustomersPlanningTypeSegmentedControl.value'));//.value
            }
        },
        init: {
            execute: (db) => {
                let e = v('systemValueCustomersPlanningMonthlyType');
                return {
                    visible: Repository.rocheBPSPCustomersPlanning.isMonthly(db),
                    data: [
                        {label: 'Base Plan', selected: e === 'Base Plan'},
                        {label: 'One Time Event', selected: e === 'One Time Event'},
                        {label: 'Opportunity', selected: e === 'Opportunity'},
                        {label: 'Final Sales Plan', selected: e === 'Final Sales Plan'}
                    ]
                };
            }
        }
    },
    rocheBPSPCustomersPlanningFocusPopupPopupFocusButton: {
        launch: {
            execute: (db) => {
                let table = Repository.rocheBPSPCustomersPlanning.getVisibleGridTable(db);
                Utils.setWidgetValue('systemValueCustomersPlanningFocused', Utils.getGridTableCell(table, 0).productCode);
                Utils.setWidgetValue('systemValueIsCustomersPlanningFocused', true);
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableMonthlyHeaderText-01': {
        init: {
            execute: (db) => {
                return {visible: !Repository.rocheBPSPCustomersPlanning.isFocused()};
            }
        }
    },
    'rocheBPSPCustomersPlanningGridTableYearlyHeaderText-01': {
        init: {
            execute: (db) => {
                return {visible: !Repository.rocheBPSPCustomersPlanning.isFocused()};
            }
        }
    },
    rocheBPSPCustomersPlanningGridTableMonthlyHeaderReturnFromFocus: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomersPlanningFocused', v('systemValueDefaultCustomersPlanningFocused'));
                Utils.setWidgetValue('systemValueIsCustomersPlanningFocused', false);
            }
        },
        init: {
            execute: (db) => {
                return {visible: Repository.rocheBPSPCustomersPlanning.isFocused()};
            }
        }
    },
    rocheBPSPCustomersPlanningGridTableYearlyHeaderReturnFromFocus: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomersPlanningFocused', v('systemValueDefaultCustomersPlanningFocused'));
                Utils.setWidgetValue('systemValueIsCustomersPlanningFocused', false);
            }
        },
        init: {
            execute: (db) => {
                return {
                    visible: Repository.rocheBPSPCustomersPlanning.isFocused() &&
                        !Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByRowMode() &&
                        !Repository.rocheBPSPCustomersPlanningGridTableYearly.isCompareByColumnMode()
                };
            }
        }
    },
    rocheBPSPCustomersPlanningGridRow2Cell2NextButton: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersPlanningHorizontalTableCustomerSelector', 'rows');
        },
        init: {
            execute: (db) => {
                let customerSelectorData = v('rocheBPSPCustomersPlanningHorizontalTableCustomerSelector');
                if (!customerSelectorData) {
                    return;
                }
                if (!customerSelectorData.open) {
                    if (!Repository.rocheBPSPCustomersPlanning.setCustomerSelectorOpenRecord(db)) {
                        return {};
                    }
                }
                if (customerSelectorData.open.index === customerSelectorData.rows.length - 1) {
                    return {iconColor: '#b1b3b3', enabled: false};
                }
                return {};
            }
        },
        launch: {
            execute: (db) => {
                let customerSelectorData = v('rocheBPSPCustomersPlanningHorizontalTableCustomerSelector');
                if (!customerSelectorData) {
                    return;
                }
                if (!customerSelectorData.open) {
                    if (!Repository.rocheBPSPCustomersPlanning.setCustomerSelectorOpenRecord(db)) {
                        return;
                    }
                }
                if (customerSelectorData.open.index === customerSelectorData.rows.length - 1) {
                    return;
                }
                let index = customerSelectorData.open.index + 1;
                let selectedCustomer = customerSelectorData.rows[index];
                let open = {
                    action: 'open',
                    id: 'rocheBPSPCustomersPlanningHorizontalTableCustomerSelector',
                    customer: selectedCustomer[0].value,
                    code: selectedCustomer[1].value,
                    receiver: selectedCustomer[2].value,
                    lastyearsrevenue: selectedCustomer[3].value,
                    index: index
                };
                Widgets['rocheBPSPCustomersPlanningHorizontalTableCustomerSelector']['open'] = open;
                Repository.rocheBPSPCustomersPlanningHorizontalTableCustomerSelector.open.execute(db);
            }
        }
    },
    rocheBPSPCustomersPlanningGridRow2Cell2PreviousButton: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersPlanningHorizontalTableCustomerSelector', 'rows');
        },
        init: {
            execute: (db) => {
                let customerSelectorData = v('rocheBPSPCustomersPlanningHorizontalTableCustomerSelector');
                if (!customerSelectorData) {
                    return;
                }
                if (!customerSelectorData.open) {
                    if (!Repository.rocheBPSPCustomersPlanning.setCustomerSelectorOpenRecord(db)) {
                        return {};
                    }
                }
                if (customerSelectorData.open.index === 0) {
                    return {iconColor: '#b1b3b3', enabled: false};
                }
                return {};
            }
        },
        launch: {
            execute: (db) => {
                let customerSelectorData = v('rocheBPSPCustomersPlanningHorizontalTableCustomerSelector');
                if (!customerSelectorData) {
                    return;
                }
                if (!customerSelectorData.open) {
                    if (!Repository.rocheBPSPCustomersPlanning.setCustomerSelectorOpenRecord(db)) {
                        return;
                    }
                }
                if (customerSelectorData.open.index === 0) {
                    return;
                }
                let index = customerSelectorData.open.index - 1;
                let selectedCustomer = customerSelectorData.rows[index];
                let open = {
                    action: 'open',
                    id: 'rocheBPSPCustomersPlanningHorizontalTableCustomerSelector',
                    customer: selectedCustomer[0].value,
                    code: selectedCustomer[1].value,
                    receiver: selectedCustomer[2].value,
                    lastyearsrevenue: selectedCustomer[3].value,
                    index: index
                };
                Widgets['rocheBPSPCustomersPlanningHorizontalTableCustomerSelector']['open'] = open;
                Repository.rocheBPSPCustomersPlanningHorizontalTableCustomerSelector.open.execute(db);
            }
        }
    },
    rocheBPSPCustomerPlanningOpportunityDeleteControlPanelDeleteButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Sales Opportunity Delete')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let opportunity = Utils.getHorizontalTableHiddenValue('rocheBPSPCustomersPlanningHorizontalTableOpportunitiesSelector', 'delete', 0, 'code'),
                    parameters = [],
                    version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key');
                parameters.push(Utils.getProcessNameValuePair('pOpportunity', opportunity));
                parameters.push(Utils.getProcessNameValuePair('pVersion', version));
                return Utils.buildProcessParameters(parameters);
            }
        }
    },
    rocheBPSPCustomersPlanningHorizontalTableOpportunitiesSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersCompanySelector')
                && Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersTerritorySelector')
                && Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersPlanningVersionSelector')
                && v('systemValueCustomersPlanningIsOpportunitiesSelectorLoadable');
            Utils.setWidgetValue('systemValueCustomersPlanningIsOpportunitiesSelectorLoadable', true);
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        open: {
            execute: (db) => {
                Api.goToUrlNewTab(Utils.getHorizontalTableHiddenValue('rocheBPSPCustomersPlanningHorizontalTableOpportunitiesSelector', 'open', 0, 'url'));
            }
        },
        select: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerPlanningSelectedOpportunitiy', Utils.getHorizontalTableHiddenValue('rocheBPSPCustomersPlanningHorizontalTableOpportunitiesSelector', 'select', 0, 'code'));
            }
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => `{"MDX":"                    
                    WITH MEMBER [}ElementAttributes_Opportunities].[}ElementAttributes_Opportunities].[Used in Version - Flag] AS
                    [Opportunity by Version].([Versions].[Versions].[${v('systemValueGlobalVersionKey')}],
                    [Measures Opportunity by Version].[Measures Opportunity by Version].[Use - Flag])
                    SELECT
                    {[}ElementAttributes_Opportunities].[}ElementAttributes_Opportunities].[Opportunity Name],
                    [}ElementAttributes_Opportunities].[}ElementAttributes_Opportunities].[Total Deal Value],
                    [}ElementAttributes_Opportunities].[}ElementAttributes_Opportunities].[Probability],
                    [}ElementAttributes_Opportunities].[}ElementAttributes_Opportunities].[Type],
                    [}ElementAttributes_Opportunities].[}ElementAttributes_Opportunities].[Contract Months],
                    [}ElementAttributes_Opportunities].[}ElementAttributes_Opportunities].[Installation Revenue Date],
                    [}ElementAttributes_Opportunities].[}ElementAttributes_Opportunities].[Link Sales Force],
                    [}ElementAttributes_Opportunities].[}ElementAttributes_Opportunities].[Used in Version - Flag]
                    } ON COLUMNS,
                    {FILTER({TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[Opportunities].[Opportunities].[All Opportunities]}, ALL, RECURSIVE )}, 0)}
                    , [Opportunities].[Opportunities].CurrentMember.Properties(\\"Customers Plan\\") = \\"${v('systemValueCustomersPlanningCustomerCode')}\\")}
                    ON ROWS
                    FROM [}ElementAttributes_Opportunities]
                  "}`
                ,
                parsingControl: {
                    type: 'matrix',
                    length: 8,
                    query: [
                        (r, x) => {
                            return {
                                value: r.Cells[x].FormattedValue,
                                code: r.Cells[x].Members[0].Name,
                                url: r.Cells[x + 6].FormattedValue
                            };
                        }, (r, x) => {
                            return {value: r.Cells[x + 3].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 4].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 5].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 2].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 1].FormattedValue};
                        }, (r, x) => {
                            return {
                                active: true,
                                icon: Utils.parseNumber(r.Cells[x + 7].FormattedValue) === 1 ? 'icon-radio-on' : 'icon-radio-off'
                            };
                        }, (r, x) => {
                            return {
                                active: true
                            };
                        }, (r, x) => {
                            return {
                                active: true
                            };
                        }

                    ]
                }

            }
    },
    rocheBPSPCustomersPlanningOpportunitiesFromGridTableSelectorTitle: {
        init: {
            execute: (db) => {
                return {
                    title: Utils.isGridTableLoaded('rocheBPSPCustomersPlanningGridTableYearly') ? Utils.getGridTableCell('rocheBPSPCustomersPlanningGridTableYearly', 0).label : ''
                };
            }
        }
    },
    rocheBPSPCustomersPlanningOpportunitiesFromGridTableSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersCompanySelector')
                && Utils.isValueExistingAndNotEmpty('rocheBPSPCustomersTerritorySelector')
                && v('systemValueCustomersPlanningIsOpportunitiesFromGridTableSelectorLoadable');
            Utils.setWidgetValue('systemValueCustomersPlanningIsOpportunitiesFromGridTableSelectorLoadable', true);
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        open: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerPlanningSelectedOpportunitiy', v('rocheBPSPCustomersPlanningOpportunitiesFromGridTableSelector.open.opportunity'));
            }
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                        territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                        version = v('systemValueGlobalCompanyVersion'),
                        receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                        productCode = Utils.getGridTableCell('rocheBPSPCustomersPlanningGridTableYearly', 0).productCode,
                        relativeYearValue = v('systemValueGlobalSegmentedControlRelativeYearValue');
                    return `{"MDX":"
                       SELECT
                            {[Measures Sales Plan by Customer Opportunity].[Measures Sales Plan by Customer Opportunity].Members}
                            ON COLUMNS ,
                            NON EMPTY
                            {FILTER({TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[Opportunities].[Opportunities].[All Opportunities]}, ALL, RECURSIVE )}, 0)},
                             [Opportunities].[Opportunities].CurrentMember.Properties(\\"Customers Plan\\") = \\"${v('systemValueCustomersPlanningCustomerCode')}\\")}
                            ON ROWS
                            FROM [Sales Plan by Customer Opportunity]
                            WHERE
                            (
                            [Versions].[Versions].[${version}],
                            [Periods].[Periods].[${relativeYearValue}],
                            [Products].[BPSP Budget].[${productCode}],
                            [Receivers].[Receivers].[${receiver}],
                            [Territories].[Territories].[${territoryCode}],
                            [Companies].[Companies].[${company}]
                            ) 
                  "}`;
                }
                ,
                parsingControl: {
                    type: 'matrix',
                    length: 1,
                    query: [
                        (r, x) => {
                            return {value: r.Cells[x].Members[6].Name};
                        }, (r, x) => {
                            return {value: r.Cells[x].FormattedValue};
                        }, (r, x) => {
                            return {
                                active: true
                            };
                        }

                    ]
                }

            }
    },
    rocheBPSPCustomersPlanningHorizontalTableOpportunitiesSelectorTitle: {
        init: {
            execute: (db) => {
                return {title: 'Opportunities ' + v('systemValueGlobalSegmentedControlRelativeYearValue')};
            }
        }
    },
    rocheBPSPCustomersPlanningClearPopupClearSelectionButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Input Clear')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let scope = (Repository.rocheBPSPCustomersPlanning.isMonthly(db)) ? 'Customer Planning - Monthly' : 'Customer Planning - Yearly',
                    company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    version = v('systemValueGlobalVersionKey'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    territory = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    customer = v('systemValueCustomersPlanningCustomerCode'),
                    year = v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    lineItem = (Repository.rocheBPSPCustomersPlanning.isMonthly(db)) ? v('systemValueCustomersPlanningMonthlyTypeValue') : ''
                ;
                return `{
                        "Parameters": [
                                {"Name": "pScope", "Value": "${scope}"},
                                {"Name": "pVersion", "Value": "${version}"},
                                {"Name": "pCompany", "Value": "${company}"},
                                {"Name": "pLineItem", "Value": "${lineItem}"},
                                {"Name": "pYear", "Value": "${year}"},
                                {"Name": "pReceiver", "Value": "${receiver}"},
                                {"Name": "pTerritory", "Value": "${territory}"},
                                {"Name": "pCustomer", "Value": "${customer}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPCustomersPlanningClearPopupClearAllButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Input Clear')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let scope = (Repository.rocheBPSPCustomersPlanning.isMonthly(db)) ? 'Customer Planning - Monthly' : 'Customer Planning - Yearly',
                    company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    version = v('systemValueGlobalVersionKey'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    territory = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    customer = v('systemValueCustomersPlanningCustomerCode'),
                    year = v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    lineItem = (Repository.rocheBPSPCustomersPlanning.isMonthly(db)) ? v('systemValueCustomersPlanningMonthlyTypeValue') : ''
                ;
                return `{
                        "Parameters": [
                                {"Name": "pScope", "Value": "${scope}"},
                                {"Name": "pVersion", "Value": "${version}"},
                                {"Name": "pCompany", "Value": "${company}"},
                                {"Name": "pLineItem", "Value": "${lineItem}"},
                                {"Name": "pReceiver", "Value": "${receiver}"},
                                {"Name": "pTerritory", "Value": "${territory}"},
                                {"Name": "pCustomer", "Value": "${customer}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPCustomersPlanningGridRow2Cell3SubmitButton: {
        init: {
            execute: (db) => {
                let b = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'locked') === '1,00' ? false : true;
                b = b && v('systemValueCustomerCompareBy') === 'None';
                return {
                    visible: b
                };
            }
        },
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Customers Plan Submit')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                        territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                        version = v('systemValueGlobalVersionKey'),
                        receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                        customerCode = v('systemValueCustomersPlanningCustomerCode'),
                        activeUser = v('activeUser'),
                        parameters = []
                    ;
                    parameters.push(Utils.getProcessNameValuePair('pVersion', version));
                    parameters.push(Utils.getProcessNameValuePair('pCompany', company));
                    parameters.push(Utils.getProcessNameValuePair('pReceiver', receiver));
                    parameters.push(Utils.getProcessNameValuePair('pTerritory', territoryCode));
                    parameters.push(Utils.getProcessNameValuePair('pCustomer', customerCode));
                    parameters.push(Utils.getProcessNameValuePair('pUser', v('activeUserName')));

                    return Utils.buildProcessParameters(parameters);
                }
            }
    },
    rocheBPSPCustomersPlanningGridRow2Cell3SubmitButtonIfLock: {
        init: {
            execute: (db) => {
                let b = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'locked') === '1,00' ? true : false;
                b = b && v('systemValueCustomerCompareBy') === 'None';
                return {
                    visible: b
                };
            }
        },


    },
    rocheBPSPCustomersPlanningCopyMergePopupCopyButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Customers Plan Yearly Copy')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return Repository.rocheBPSPCustomersPlanning.getCopyMergeButtonProcessBody();
                }
            }
    },
    rocheBPSPCustomersPlanningCopyMergePopupMergeButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Customers Plan Yearly Copy')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return Repository.rocheBPSPCustomersPlanning.getCopyMergeButtonProcessBody(2);
                }
            }
    },
    rocheBPSPCustomersPlanningCopyMergePopupSlider: {
        initCondition: (db) => {
            let b = Utils.isGridTableLoaded('rocheBPSPCustomersPlanningGridTableYearly')
                && Utils.getGridTableCell('rocheBPSPCustomersPlanningGridTableYearly', 0).productCode
            return b;
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            { "MDX" :
                "SELECT 
                   {[Versions].[Versions].[${v('systemValueGlobalVersionKey')}]} 
                   PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                   {[Measures Sales Parameters by Products Flat].[Measures Sales Parameters by Products Flat].[Growth rate for Products Copy Minimum],
                    [Measures Sales Parameters by Products Flat].[Measures Sales Parameters by Products Flat].[Growth rate for Products Copy Maximum],
                [Measures Sales Parameters by Products Flat].[Measures Sales Parameters by Products Flat].[Growth rate for Products Copy]} 
                  ON ROWS 
                FROM [Sales Parameters by Products Flat] 
                WHERE 
                  (
                   [Years].[Years].[${v('systemValueGlobalSegmentedControlRelativeYearValue')}],
                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key')}],
                   [Receivers].[Receivers].[${v('rocheBPSPCustomersHorizontalTable.open.receiver')}],
                   [Products Flat].[Products Flat].[${Utils.getGridTableCell('rocheBPSPCustomersPlanningGridTableYearly', 0).productCode}]
                  )
                  "}
           `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            return Utils.parseNumber(r.Cells[2].FormattedValue);
                        },
                        originalValue: (r, x) => {
                            return Utils.parseNumber(r.Cells[2].FormattedValue);
                        }
                    }
            }
        }
    },
    rocheBPSPCustomersPlanningHorizontalTableOpportunityDistribution: {
        initCondition: (db) => {
            Utils.setWidgetValueIfNotExist('systemValueCustomersPlanningIsOpportunityDistributionLoadable', false);
            return v('systemValueCustomersPlanningIsOpportunityDistributionLoadable');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name,Attributes/BPSPBudgetDescription))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key'),
                    territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    opportunity = v('systemValueCustomerPlanningSelectedOpportunitiy'),
                    productCode = 'PL1';//Utils.getGridTableCell('rocheBPSPCustomersPlanningGridTableYearly', 0).productCode

                return `{"MDX":"                       
                         SELECT
                        {[Measures Sales Plan by Customer Opportunity Split].[Measures Sales Plan by Customer Opportunity Split].Members}
                        ON COLUMNS ,
                        {FILTER(
                        {FILTER(
                        {TM1DRILLDOWNMEMBER({[Products].[BPSP ${v('systemValueGlobalCompanyProductPlanVersion')}].[PL1]} , All, Recursive)},
                        [Sales Territory to Product].([Versions].[Versions].[Live],
                        [Companies].[Companies].[${company}],
                        [Territories].[Territories].[${territoryCode}],
                        [Measures Sales Territory to Product].[Measures Sales Territory to Product].[Assignment Flag])>0)},
                        [Products].[BPSP ${v('systemValueGlobalCompanyProductPlanVersion')}].CurrentMember.Properties('BPSP ${v('systemValueGlobalCompanyProductPlanVersion')} Product Level - Name') = \\"PL6\\")} ON ROWS
                        FROM [Sales Plan by Customer Opportunity Split]
                        WHERE
                        (
                        [Versions].[Versions].[${version}],
                        [Companies].[Companies].[${company}],
                        [Opportunities].[Opportunities].[${opportunity}])
                    "}`;
            },
            parsingControl: {
                type: 'matrix',
                length: 2,
                query: [
                    (r, x) => {
                        return {value: r.Cells[x].Members[3].Attributes['BPSP Budget Description']};
                    }, (r, x) => {
                        return {value: r.Cells[x].Members[3].Name};
                    }, (r, x) => {
                        return {value: r.Cells[x].FormattedValue, editable: true, ordinal: r.Cells[x].Ordinal};
                    }
                ]
            }

        },
        cellEdit: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db) => {
                let a = v('rocheBPSPCustomersPlanningHorizontalTableOpportunityDistribution.cellEdit'), value;
                if (a.value.includes('%')) {
                    value = Utils.parseNumber(a.value.replace('%', '')) / 100;
                } else {
                    value = Utils.parseNumber(a.value);
                }

                return `{"Ordinal": ${a.ordinal},"Value": \"${value}\"}`
            }
        }
    },
    rocheBPSPCustomersPlanningHorizontalTableOpportunityDistributionSave: {
        launch: {
            validation: (db) => {
                let value = Utils.parseNumber(v('rocheBPSPCustomersPlanningHorizontalTableOpportunityDistributionTotal.rows')[0][2].value.replace('%', ''));
                return {success: value === 100, message: 'Please add 100% percentage'};
            },
            url: (db) => `/api/v1/Processes('MODULE - UI - Sales Opportunity Split')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    version = v('systemValueGlobalVersionKey'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    customerCode = v('systemValueCustomersPlanningCustomerCode'),
                    opportunity = v('systemValueCustomerPlanningSelectedOpportunitiy'),
                    parameters = []
                ;
                parameters.push(Utils.getProcessNameValuePair('pOpportunity', opportunity));
                parameters.push(Utils.getProcessNameValuePair('pCompany', company));
                parameters.push(Utils.getProcessNameValuePair('pReceiver', receiver));
                parameters.push(Utils.getProcessNameValuePair('pTerritory', territoryCode));
                parameters.push(Utils.getProcessNameValuePair('pCustomer', customerCode));
                parameters.push(Utils.getProcessNameValuePair('pVersion', version));

                return Utils.buildProcessParameters(parameters);
            }


        }
    },
    rocheBPSPCustomersPlanningHorizontalTableOpportunityDistributionTotal: {
        initCondition: (db) => {
            Utils.setWidgetValueIfNotExist('systemValueCustomersPlanningIsOpportunityDistributionTotalLoadable', false);
            return v('systemValueCustomersPlanningIsOpportunityDistributionTotalLoadable');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name,Attributes/TotalDealValue))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key'),
                    opportunity = v('systemValueCustomerPlanningSelectedOpportunitiy');
                return `{"MDX":"
                    SELECT
                        {[Measures Sales Plan by Customer Opportunity Split].[Measures Sales Plan by Customer Opportunity Split].[Split]}
                        ON COLUMNS ,
                        {[Products].[BPSP ${v('systemValueGlobalCompanyProductPlanVersion')}].[PL1]}
                        PROPERTIES [Products].[BPSP Budget].[BPSP Budget Caption] ON ROWS
                        FROM [Sales Plan by Customer Opportunity Split]
                        WHERE
                        (
                        [Versions].[Versions].[${version}],
                        Companies].[Companies].[${company}],
                        [Opportunities].[Opportunities].[${opportunity}]
                        )
                    "}`;
            },
            parsingControl: {
                type: 'matrix',
                length: 1,
                query: [
                    (r, x) => {
                        return {value: r.Cells[x].Members[2].Name};
                    }, (r, x) => {
                        let value = r.Cells[x].Members[2].Attributes['Total Deal Value'];
                        if (value === null) {
                            value = '0';
                        } else {
                            value = value.toString();
                        }
                        return {value: value};
                    }, (r, x) => {
                        return {value: r.Cells[x].FormattedValue};
                    }
                ]
            }

        }
    },

    rocheBPSPCustomersPlanningCommentShowGridTable: {
        initCondition: (db) => {
            return Repository.rocheBPSPCustomersPlanning.isYearlyLoaded(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    customerCode = v('systemValueCustomersPlanningCustomerCode'),
                    productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                    period = v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    productCode = v('systemValueLastClickedProductCode');
                return `{"MDX":"
                    SELECT 
                         {[Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Comment]} 
                      PROPERTIES [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Caption]  ON COLUMNS , 
                       {[Products].[BPSP ${productVersion}].[${productCode}]} 
                      PROPERTIES [Products].[BPSP ${productVersion}].[Caption]  ON ROWS 
                    FROM [Sales Plan by Customer] 
                    WHERE 
                      (
                       [Versions].[Versions].[${version}],
                       [Companies].[Companies].[${company}],
                       [Receivers].[Receivers].[${receiver}],
                       [Territories].[Territories].[${territoryCode}],
                       [Customers Plan].[Customers Plan].[${customerCode}],
                       [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Final Sales Plan],
                       [Periods].[Periods].[${period}]
                      )

            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 1,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue,
                        }
                    }]
            }
        }
    },
    rocheBPSPCustomersPlanningCommentShowGridTableSource: {
        initCondition: (db) => {
            return Repository.rocheBPSPCustomersPlanning.isYearlyLoaded(db);
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    customerCode = v('systemValueCustomersPlanningCustomerCode'),
                    productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                    period = v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    productCode = v('systemValueLastClickedProductCode');
                return `{"MDX":"
                    SELECT 
                         {
                         [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[CommentSource],
                         [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[EditedBy],
                         [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[EditedDateTime]} 
                      PROPERTIES [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Caption]  ON COLUMNS , 
                       {[Products].[BPSP ${productVersion}].[${productCode}]} 
                      PROPERTIES [Products].[BPSP ${productVersion}].[Caption]  ON ROWS 
                    FROM [Sales Plan by Customer] 
                    WHERE 
                      (
                       [Versions].[Versions].[${version}],
                       [Companies].[Companies].[${company}],
                       [Receivers].[Receivers].[${receiver}],
                       [Territories].[Territories].[${territoryCode}],
                       [Customers Plan].[Customers Plan].[${customerCode}],
                       [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Final Sales Plan],
                       [Periods].[Periods].[${period}]
                      )

            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 3,
                query: [
                    (r, x) => {
                        return {
                            title: r.Cells[x].FormattedValue + '<br/><div style=\"margin-top:20px; float: left; font-size: 10px;  ";  >'
                                + 'Edited by ' + '</div>' + '<div style=\"font-size:12px; font-weight: bold; margin-top:18px; margin-left: 3px; float: left;";  >'
                                + r.Cells[x + 1].FormattedValue + '</div>' + '<div style=\"font-size:10px;color:#B1B3B3;margin-top:20px;margin-left: 5px; float: left; \" >'
                                + r.Cells[x + 2].FormattedValue + '</div>',
                        }
                    }


                ]
            }
        }
    },
    rocheBPSPCustomersPlanningCommentEditGridRow2CommentInput: {
        init: {
            execute: (db) => {
                let l = v('rocheBPSPCustomersPlanningCommentShowGridTable.cellData.length'), r = {value: ''};
                if (l !== false && l !== 0) {
                    r.value = v('rocheBPSPCustomersPlanningCommentShowGridTable.cellData')[0][0].title;
                }
                return r;
            }
        }
    },
    rocheBPSPCustomersPlanningCommentEditGridRow3TextInput: {
        init: {
            execute: (db) => {
                let l = v('rocheBPSPCustomersPlanningCommentShowGridTableSource.cellData.length'), r = {value: ''};
                if (l !== false && l !== 0) {
                    r.value = v('rocheBPSPCustomersPlanningCommentShowGridTableSource.cellData')[0][0].title.split('<br/>')[0];
                }
                return r;
            }
        }
    },
    rocheBPSPCustomersPlanningCommentEditControlPanelSaveButton: {
        launch: {
            url: (db) => `/api/v1/Cubes('Sales Plan by Customer')/tm1.Update`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersCompanySelector', 'key'),
                    territoryCode = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersTerritorySelector', 'key'),
                    version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomersPlanningVersionSelector', 'key'),
                    receiver = v('rocheBPSPCustomersHorizontalTable.open.receiver'),
                    customerCode = v('systemValueCustomersPlanningCustomerCode'),
                    productVersion = v('systemValueGlobalCompanyProductPlanVersion'),
                    period = v('systemValueGlobalSegmentedControlRelativeYearValue'),
                    productCode = v('systemValueLastClickedProductCode');
                return `
                [
                    {
                        "Cells": [
                            {
                                "Tuple@odata.bind": [
                                    "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${period}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${company}')",
                                    "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${receiver}')",
                                    "Dimensions('Territories')/Hierarchies('Territories')/Elements('${territoryCode}')",
                                    "Dimensions('Customers Plan')/Hierarchies('Customers Plan')/Elements('${customerCode}')",
                                    "Dimensions('LineItems Sales Plan by Customer')/Hierarchies('LineItems Sales Plan by Customer')/Elements('Final Sales Plan')",
                                    "Dimensions('Measures Sales Plan by Customer')/Hierarchies('Measures Sales Plan by Customer')/Elements('EditedDateTime')"
                                ]
                            },
                        ],
                         "Value": "${Utils.getFormattedDate(new Date(), '.', true)}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                   "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${period}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${company}')",
                                    "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${receiver}')",
                                    "Dimensions('Territories')/Hierarchies('Territories')/Elements('${territoryCode}')",
                                    "Dimensions('Customers Plan')/Hierarchies('Customers Plan')/Elements('${customerCode}')",
                                    "Dimensions('LineItems Sales Plan by Customer')/Hierarchies('LineItems Sales Plan by Customer')/Elements('Final Sales Plan')",
                                    "Dimensions('Measures Sales Plan by Customer')/Hierarchies('Measures Sales Plan by Customer')/Elements('EditedBy')"
                               ]
                            },
                        ],
                        "Value": "${Widgets['activeUserName']}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                   "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${period}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${company}')",
                                    "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${receiver}')",
                                    "Dimensions('Territories')/Hierarchies('Territories')/Elements('${territoryCode}')",
                                    "Dimensions('Customers Plan')/Hierarchies('Customers Plan')/Elements('${customerCode}')",
                                    "Dimensions('LineItems Sales Plan by Customer')/Hierarchies('LineItems Sales Plan by Customer')/Elements('Final Sales Plan')",
                                    "Dimensions('Measures Sales Plan by Customer')/Hierarchies('Measures Sales Plan by Customer')/Elements('CommentSource')"
                               ]
                            },
                        ],
                        "Value": "${v('rocheBPSPCustomersPlanningCommentEditGridRow3TextInput.value') ? v('rocheBPSPCustomersPlanningCommentEditGridRow3TextInput.value') : ''}"
                    },
                    {
                        "Cells": [
                            {
                               "Tuple@odata.bind": [
                                   "Dimensions('Versions')/Hierarchies('Versions')/Elements('${version}')",
                                    "Dimensions('Periods')/Hierarchies('Periods')/Elements('${period}')",
                                    "Dimensions('Companies')/Hierarchies('Companies')/Elements('${company}')",
                                    "Dimensions('Products')/Hierarchies('BPSP Budget')/Elements('${productCode}')",
                                    "Dimensions('Receivers')/Hierarchies('Receivers')/Elements('${receiver}')",
                                    "Dimensions('Territories')/Hierarchies('Territories')/Elements('${territoryCode}')",
                                    "Dimensions('Customers Plan')/Hierarchies('Customers Plan')/Elements('${customerCode}')",
                                    "Dimensions('LineItems Sales Plan by Customer')/Hierarchies('LineItems Sales Plan by Customer')/Elements('Final Sales Plan')",
                                    "Dimensions('Measures Sales Plan by Customer')/Hierarchies('Measures Sales Plan by Customer')/Elements('Comment')"
                               ]
                            },
                        ],
                        "Value": "${v('rocheBPSPCustomersPlanningCommentEditGridRow2CommentInput.value') ? v('rocheBPSPCustomersPlanningCommentEditGridRow2CommentInput.value') : ''}"
                    }
                ]
                `;
            }
        }
    },
    /* end customer planning */
    rocheBPSPCompanySettingsGridRow1Cell3Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPSecuritySetupGridRow1Cell5Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPTerritoriesGridRow1Cell5Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPTerritoriesUsersTitleGridRow1Cell5Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPAccountsGridRow1Cell5Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPAccountsTerritoriesGridRow1Cell5Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPSecuritySetupGridTable:
        {
            initCondition: (db) => {
                return Utils.isValueExistingAndNotEmpty('rocheBPSPSecuritySetupGridRow1Cell2DropBox');

            },
            initDefault: (db) => {
                return [];
            },

            launch: {
                execute: (db) => {
                    Utils.setWidgetValue('selectedTerritoriesUsersType', 'ByUser');
                }
            },

            switch: {

                url: (db) => `/api/v1/Processes('MODULE - UI - Security Setup per User')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pUser", "Value": "${v('rocheBPSPSecuritySetupGridTable').cellData[v('rocheBPSPSecuritySetupGridTable.row')][0].title}"},
                                {"Name": "pMode", "Value": "${v('rocheBPSPSecuritySetupGridTable').switch.value}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPSecuritySetupGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pClickedColumnID", "Value": "${v('rocheBPSPSecuritySetupGridTable.column')}"},
                        ]
                    }`
            },


            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
                    type: 'POST',
                    body: (db) => {
                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSecuritySetupGridRow1Cell2DropBox', 'key');
                        let searchString = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPSecuritySetupGridRow2Cell1SearchBox')) {
                            searchString = v('rocheBPSPSecuritySetupGridRow2Cell1SearchBox.value').toUpperCase();

                        }

                        return `{"MDX":"
                                    
                              With
                           Set Clients As
                            Filter({[}Clients].[}Clients].Members},[}ClientGroups].([}Groups].[}Groups].[${company} SalesUser])<>'' OR ([}Groups].[}Groups].[${company} KeyUser])<>'')
                            Member  [}Groups].[}Groups].[SwitchMarketing] AS
                            IIF([}ClientGroups].([}Groups].[}Groups].[${company} SalesMarketing]) <>'',1,0)
                            Member  [}Groups].[}Groups].[SwitchFinance] AS
                            IIF([}ClientGroups].([}Groups].[}Groups].[${company} SalesFinance]) <>'',1,0)
                            Member  [}Groups].[}Groups].[SwitchSales] AS
                            IIF([}ClientGroups].([}Groups].[}Groups].[${company} SalesCustomer]) <>'',1,0)
                            Member  [}Groups].[}Groups].[FullName] AS
                               [}Clients].[}Clients].CurrentMember.Properties('Full Name') +' (' +[}Clients].[}Clients].CurrentMember.Properties('User ID') + ')'
                            Member  [}Groups].[}Groups].[Code] AS
                               [}Clients].[}Clients].CurrentMember.Properties('User ID')
                            Set Groups As
                            {
                              [}Groups].[}Groups].[Code],
                              [}Groups].[}Groups].[FullName],
                              [}Groups].[}Groups].[SwitchMarketing],
                              [}Groups].[}Groups].[SwitchFinance],
                              [}Groups].[}Groups].[SwitchSales]      
                            }
                        SELECT 
                           {Groups} 
                          ON COLUMNS ,
                            DISTINCT({FILTER({Clients}, INSTR(UCASE([}Groups].[}Groups].[FullName]), '${searchString}')<>0)})
                          ON ROWS
                        FROM [}ClientGroups]

                                    "}`;

                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 5,
                        query: [
                            (r, x) => {
                                return {
                                    title: r.Cells[x].FormattedValue,
                                    cellVisible: false
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 1].FormattedValue,
                                }
                            },

                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x + 2].FormattedValue) === 1 ? 1 : 0,
                                }
                            },

                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x + 3].FormattedValue) === 1 ? 1 : 0,
                                }
                            },

                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x + 4].FormattedValue) === 1 ? 1 : 0,
                                }
                            },

                            (r, x) => {
                                return {
                                    icon: parseInt(r.Cells[x + 4].FormattedValue) === 1 ? 'icon-arrow-right' : '',
                                    visible: parseInt(r.Cells[x + 4].FormattedValue) === 1 ? true : false
                                }
                            },
                        ]
                    }
                },
        },
    rocheBPSPSecuritySetupGridTableCell5Button: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueGlobalSelectedUser'] = Utils.getGridTableCell('rocheBPSPSecuritySetupGridTable', 0).title;
                    Widgets['systemValueGlobalSelectedUserName'] = Utils.getGridTableCell('rocheBPSPSecuritySetupGridTable', 1).title;
                }
            },
    },
    rocheBPSPSecuritySetupGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPSecuritySetupGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]}
                    ON COLUMNS ,
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]}
                    ON COLUMNS ,
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPTerritoriesUsersGridTable:
        {

            initCondition: (db) => {
                let a = Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox') && v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.username');
                return a;
            },
            initDefault: (db) => {
                return [];
            },

            switch: {

                url: (db) => `/api/v1/Processes('MODULE - UI - Territory to User Update')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {

                    let territory = Utils.getGridTableCell('rocheBPSPTerritoriesUsersGridTable', 0).title;

                    return `{
                        "Parameters": [
                                {"Name": "pUser", "Value": "${v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.userid')}"},
                                {"Name": "pMode", "Value": "1"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pTerritory", "Value": "${v('rocheBPSPTerritoriesUsersGridTable').cellData[v('rocheBPSPTerritoriesUsersGridTable.row')][0].territoryID}"},
                        ]
                    }`;
                }
            },

            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption, Attributes/REXISTerritoryID, Attributes/UILevelFormat))`,
                    type: 'POST',
                    body: (db) => {
                        let selectedUser = v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.userid');
                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox', 'key');
                        let searchString = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesUsersGridRow4Cell1SearchBox')) {
                            searchString = v('rocheBPSPTerritoriesUsersGridRow4Cell1SearchBox.value').toUpperCase();
                        }
                        return `{"MDX":"
                             SELECT
                                 {[Measures Client To Territory].[Measures Client To Territory].[Assign Input]}
                             ON COLUMNS ,
                               {FILTER({TM1DRILLDOWNMEMBER({[Territories].[Territories].[ALL TERRITORIES ${company}]}, ALL, RECURSIVE )},
                               INSTR(UCASE([Territories].[Territories].[Caption]), '${searchString}')<>0)}
                               PROPERTIES [Territories].[Territories].[Caption]  ON ROWS
                            FROM [Client To Territory]
                            WHERE
                              (
                               [Companies].[Companies].[${company}],
                               [}Clients].[}Clients].[${selectedUser}])
                            "}`;

                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 1,
                        query: [

                            (r, x) => {
                                return {
                                    label: r.Cells[x].Members[2].Attributes.Caption,
                                    skin: 'gridtable_hierarchy_bpsp_' + r.Cells[x].Members[2].Attributes['UI Level Format'],
                                    territoryID: r.Cells[x].Members[2].Attributes['REXIS Territory ID'],
                                    ordinal: x
                                }
                            },

                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x].FormattedValue) > 0 ? 1 : 0,
                                    ordinal: x
                                }
                            }
                        ]
                    }
                },
        },
    rocheBPSPTerritoriesUsersGridRow3Cell2SelectorButton: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox') && v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.username');
            return a;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedUser', v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.userid'));
                Utils.setWidgetValue('systemValueGlobalSelectedUserName', v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.username') + ' (' + v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.userid') + ')');
                return {
                    label: v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.username') === false ? 'unknow'
                        : v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.username') + ' (' + v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.userid') + ')'
                };
            }
        }
    },
    rocheBPSPTerritoriesUsersHorizontalTableUserSelector: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox');
            return a;
        },
        initDefault: (db) => {
            return [];
        },
        open: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedUser', v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.userid'));
                Utils.setWidgetValue('systemValueGlobalSelectedUserName', v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.username') + ' (' + v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.userid') + ')');
            }
        },

        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox', 'key');
                    Utils.setWidgetValue('systemValueGlobalSelectedUser', v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.userid'));
                    Utils.setWidgetValue('systemValueGlobalSelectedUserName', v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.username') + ' (' + v('rocheBPSPTerritoriesUsersHorizontalTableUserSelector.open.userid') + ')');

                    return `{"MDX":"

                     With
                           Set Clients As
                            Filter({[}Clients].[}Clients].Members},[}ClientGroups].([}Groups].[}Groups].[${company} SalesUser])<>'' OR ([}Groups].[}Groups].[${company} KeyUser])<>'')
                            Member  [}Groups].[}Groups].[SwitchSales] AS
                            IIF([}ClientGroups].([}Groups].[}Groups].[${company} SalesCustomer]) <>'',1,0)
                            Member  [}Groups].[}Groups].[FullName] AS
                               [}Clients].[}Clients].CurrentMember.Properties('Full Name')
                            Member  [}Groups].[}Groups].[Code] AS
                               [}Clients].[}Clients].CurrentMember.Properties('User ID')
                            Set Groups As
                            {
                              [}Groups].[}Groups].[Code],
                              [}Groups].[}Groups].[FullName],
                              [}Groups].[}Groups].[SwitchSales]
                            }
                        SELECT
                           {Groups}
                          ON COLUMNS ,
                          NON EMPTY
                           {Clients}
                           PROPERTIES [}Clients].[}Clients].[}TM1_DefaultDisplayValue]  ON ROWS
                        FROM [}ClientGroups]

                                    "}`

                },

                parsingControl: {
                    type: 'matrix',
                    length: 3,
                    query: [
                        (r, x) => {
                            return {
                                active: true,
                                on: v('rocheBPSPSecuritySetupGridTable.row') > 0 && r.Cells[x].FormattedValue === v('rocheBPSPSecuritySetupGridTable').cellData[v('rocheBPSPSecuritySetupGridTable.row')][0].title
                            }
                        },
                        (r, x) => {
                            return {value: r.Cells[x + 1].FormattedValue};
                        },
                        (r, x) => {
                            return {value: r.Cells[x].FormattedValue};
                        }

                    ]
                }

            },
    },
    rocheBPSPTerritoriesUsersTerritoriesGridTable:
        {

            initCondition: (db) => {
                let a = Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox') && v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryid');
                return a;
            },
            initDefault: (db) => {
                return [];
            },

            switch: {

                url: (db) => `/api/v1/Processes('MODULE - UI - Territory to User Update')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {

                    let user = Utils.getGridTableCell('rocheBPSPTerritoriesUsersTerritoriesGridTable', 0).title;
                    return `{
                            "Parameters": [
                                    {"Name": "pUser", "Value": "${v('rocheBPSPTerritoriesUsersTerritoriesGridTable').cellData[v('rocheBPSPTerritoriesUsersTerritoriesGridTable.row')][0].userID}"},
                                    {"Name": "pMode", "Value": "1"},
                                    {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox', 'key')}"},
                                    {"Name": "pTerritory", "Value": "${v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryid')}"},
                            ]
                        }`;
                }
            },

            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                    type: 'POST',
                    body: (db) => {
                        let selectedTerritory = v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryid');
                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox', 'key');
                        let searchString = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesUsersTerritoriesGridRow4Cell1SearchBox')) {
                            searchString = v('rocheBPSPTerritoriesUsersTerritoriesGridRow4Cell1SearchBox.value').toUpperCase();
                        }


                        return `{"MDX":"

                                 With
                                       Set Clients As
                                Filter({[}Clients].[}Clients].Members},[}ClientGroups].([}Groups].[}Groups].[${company} SalesUser])<>'' OR ([}Groups].[}Groups].[${company} KeyUser])<>'')
                                Member  [}Groups].[}Groups].[SwitchSales] AS
                                IIF([}ClientGroups].([}Groups].[}Groups].[${company} SalesCustomer]) <>'',1,0)
                                Member  [}Groups].[}Groups].[FullName] AS
                                   [}Clients].[}Clients].CurrentMember.Properties('Full Name')
                                Member  [}Groups].[}Groups].[Code] AS
                                   [}Clients].[}Clients].CurrentMember.Properties('User ID')
                                Member [}Groups].[}Groups].[TerritoryToUser]
                                AS [Client To Territory].([Companies].[Companies].[${company}], [}Clients].[}Clients].CurrentMember, [Territories].[Territories].[${selectedTerritory}],[Measures Client To Territory].[Measures Client To Territory].[Assign Flag])
                                Set Groups As
                                {
                                  [}Groups].[}Groups].[Code],
                                  [}Groups].[}Groups].[FullName],
                                  [}Groups].[}Groups].[SwitchSales],
                                  [}Groups].[}Groups].[TerritoryToUser]
                                }
                            SELECT
                               {Groups}
                              ON COLUMNS ,
                              NON EMPTY
                              ORDER({
                               {DISTINCT({FILTER({Clients}, INSTR(UCASE([}Groups].[}Groups].[FullName]), '${searchString}')<>0)})}
                               },[}Groups].[FullName], ASC )
                               PROPERTIES [}Clients].[}Clients].[}TM1_DefaultDisplayValue]  ON ROWS
                            FROM [}ClientGroups]

                                    "}`


                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 4,
                        query: [

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 1].FormattedValue + ' (' + r.Cells[x].FormattedValue + ')',
                                    nameID: r.Cells[x].Members[0].Name,
                                    userID: r.Cells[x].FormattedValue


                                }
                            },

                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x + 3].FormattedValue) > 0 ? 1 : 0,
                                    ordinal: x
                                }
                            }
                        ]
                    }
                },
        },
    rocheBPSPTerritoriesUsersTerritoriesGridRow3Cell2SelectorButton: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox') && v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryname');
            return a;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedTerritoryID', v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryid'));
                Utils.setWidgetValue('systemValueGlobalSelectedTerritoryName', v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryname') + ' (' + v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryid') + ')');
                return {
                    label: v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryname') === false ? 'UNKNOW'
                        : v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryname') + ' (' + v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryid') + ')'
                };
            }
        }
    },
    rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox');
            return a;
        },
        initDefault: (db) => {
            return [];
        },

        open: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedTerritoryID', v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryid'));
                Utils.setWidgetValue('systemValueGlobalSelectedTerritoryName', v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryname') + ' (' + v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryid') + ')');
            }
        },

        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox', 'key');
                    Utils.setWidgetValue('systemValueGlobalSelectedTerritoryID', v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryid'));
                    Utils.setWidgetValue('systemValueGlobalSelectedTerritoryName', v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryname') + ' (' + v('rocheBPSPTerritoriesUsersTerritoriesHorizontalTableUserSelector.open.territoryid') + ')');
                    return `{"MDX":"

                            SELECT 
                    {[}ElementAttributes_Territories].[}ElementAttributes_Territories].[Caption],
                    [}ElementAttributes_Territories].[}ElementAttributes_Territories].[Territory Code]} 
                    ON COLUMNS , 
                    {TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[Territories].[Territories].[ALL TERRITORIES ${company}]}, 
                    {[Territories].[Territories].[ALL TERRITORIES ${company}]}, RECURSIVE )}, 0)} 
                    ON ROWS 
                       FROM [}ElementAttributes_Territories] 

                                    "}`
                },

                parsingControl: {
                    type: 'matrix',
                    length: 2,
                    query: [
                        (r, x) => {
                            return {
                                active: true,
                                on: v('rocheBPSPTerritoriesGridTable.row') > 0 && r.Cells[x + 1].FormattedValue === v('rocheBPSPTerritoriesGridTable').cellData[v('rocheBPSPTerritoriesGridTable.row')][0].territoryID
                            }
                        },
                        (r, x) => {
                            return {value: r.Cells[x].FormattedValue};
                        },
                        (r, x) => {
                            return {value: r.Cells[x + 1].FormattedValue};
                        }

                    ]
                }

            },
    },
    // rocheBPSPAccountsTerritories
    rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]}
                    ON COLUMNS ,
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPAccountsTerritoriesGridTable:
        {
            initCondition: (db) => {
                let a = Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox') && v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryname');
                return a;
            },
            initDefault: (db) => {
                return [];
            },
            switch: {

                url: (db) => `/api/v1/Processes('MODULE - UI - Account to Territory Reassign')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pTerritory", "Value": "${v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryid')}"},
                                {"Name": "pCustomer", "Value": "${v('rocheBPSPAccountsTerritoriesGridTable').cellData[v('rocheBPSPAccountsTerritoriesGridTable.row')][0].accountID}"},
                                {"Name": "pMode", "Value": "${v('rocheBPSPAccountsTerritoriesGridTable').cellData[v('rocheBPSPAccountsTerritoriesGridTable.row')][1].value === 0 ? 1 : 0}"}
                        ]
                    }`;
                }
            },
            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Updateable,RuleDerived,Consolidated;$expand=Members($select=Name, Attributes/Caption,Attributes/AccountName))`,
                    type: 'POST',
                    body: (db) => {
                        let selectedTerritory = v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryid');
                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox', 'key');
                        let searchString = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsTerritoriesGridRow4Cell1SearchBox')) {
                            searchString = v('rocheBPSPAccountsTerritoriesGridRow4Cell1SearchBox.value').toUpperCase();
                        }
                        return `{"MDX":"
                                        SELECT 
                                       {[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Assignment Flag],
                                       [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[REXIS Flag]} 
                                      ON COLUMNS ,
                                      
                                     
                                      ORDER({ 
                                           {FILTER({TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[Customers Plan].[Customers Plan].[All Customers Plan ${company}]},
                                            {[Customers Plan].[Customers Plan].[All Customers Plan ${company}]}, RECURSIVE )}, 0)}, 
                                            INSTR(UCASE([Customers Plan].[Customers Plan].CurrentMember.Properties('Account Name')), '${searchString}')>0
                                             OR
                                             INSTR(UCASE([Customers Plan].[Customers Plan].CurrentMember.Properties('Caption')), '${searchString}')>0)
                                             } 
                                      },[Customers Plan].[ Account Name], ASC )
 
                                          ON ROWS 
                                        FROM [Sales Territory to Customer] 
                                        WHERE 
                                          (
                                           [Versions].[Versions].[Live],
                                           [Companies].[Companies].[${company}],
                                           [Receivers].[Receivers].[All Receivers],
                                           [Territories].[Territories].[${v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryid')}]
                                          )
                            "}`;
                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 2,
                        query: [
                            (r, x) => {
                                return {
                                    title: r.Cells[x].Members[4].Attributes['Account Name'] + '  (' + r.Cells[x].Members[4].Name + ')',
                                    accountID: r.Cells[x].Members[4].Name,

                                }
                            },
                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x].FormattedValue) > 0 ? 1 : 0,
                                    editable: r.Cells[x].RuleDerived === true ? false : true,
                                    cellSkin: r.Cells[x].RuleDerived === true ? 'readonly_bpsp' : '',
                                    skin: r.Cells[x].RuleDerived === true ? 'SettingsToggleRulederived_bpsp' : 'Settings_toggle_bpsp'
                                }
                            },
                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x + 1].FormattedValue) > 0 ? 1 : 0,
                                }
                            }
                        ]
                    }
                },
        },
    rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox');
            return a;
        },
        initDefault: (db) => {
            return [];
        },

        open: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedTerritoryID', v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryid'));
                Utils.setWidgetValue('systemValueGlobalSelectedTerritoryName', v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryname') + ' (' + v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryid') + ')');
            }
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox', 'key');
                    Utils.setWidgetValue('systemValueGlobalSelectedTerritoryID', v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryid'));
                    Utils.setWidgetValue('systemValueGlobalSelectedTerritoryName', v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryname') + ' (' + v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryid') + ')');
                    return `{"MDX":"
                    
                    SELECT 
                    {[}ElementAttributes_Territories].[}ElementAttributes_Territories].[Caption],
                    [}ElementAttributes_Territories].[}ElementAttributes_Territories].[Territory Code]} 
                    ON COLUMNS , 
                    {TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[Territories].[Territories].[ALL TERRITORIES ${company}]}, 
                    {[Territories].[Territories].[ALL TERRITORIES ${company}]}, RECURSIVE )}, 0)} 
                    ON ROWS 
                       FROM [}ElementAttributes_Territories] 
                                    "}`
                },

                parsingControl: {
                    type: 'matrix',
                    length: 2,
                    query: [
                        (r, x) => {
                            return {
                                active: true,
                                on: v('rocheBPSPTerritoriesGridTable.row') > 0 && r.Cells[x + 1].FormattedValue === v('rocheBPSPTerritoriesGridTable').cellData[v('rocheBPSPTerritoriesGridTable.row')][0].territoryID
                            }
                        },
                        (r, x) => {
                            return {value: r.Cells[x].FormattedValue};
                        },
                        (r, x) => {
                            return {value: r.Cells[x + 1].FormattedValue};
                        }

                    ]
                }

            },
    },
    rocheBPSPAccountsTerritoriesGridRow3Cell1SelectorButton: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox') && v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryname');
            return a;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedTerritoryID', v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryid'));
                Utils.setWidgetValue('systemValueGlobalSelectedTerritoryName', v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryname') + ' (' + v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryid') + ')');
                return {
                    label: v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryname') === false ? '1391 UNASSIGNED'
                        : v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryname') + ' (' + v('rocheBPSPAccountsTerritoriesHorizontalTableTerritoriesSelector.open.territoryid') + ')'
                };
            }
        }
    },
    rocheBPSPAccountsTerritoriesGridTable2:
        {
            initCondition: (db) => {
                let a = Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox') && v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customername');
                return a;
            },
            initDefault: (db) => {
                return [];
            },
            switch: {

                url: (db) => `/api/v1/Processes('MODULE - UI - Account to Territory Reassign')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pCustomer", "Value": "${v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customerid')}"},
                                {"Name": "pTerritory", "Value": "${v('rocheBPSPAccountsTerritoriesGridTable2').cellData[v('rocheBPSPAccountsTerritoriesGridTable2.row')][0].customerID}"},
                                {"Name": "pMode", "Value": "${v('rocheBPSPAccountsTerritoriesGridTable2').cellData[v('rocheBPSPAccountsTerritoriesGridTable2.row')][1].value === 0 ? 1 : 0}"}
                        ]
                    }`;
                }
            },

            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Updateable,RuleDerived,Consolidated;$expand=Members($select=Name, Attributes/Caption,Attributes/AccountName,Attributes/UILevelFormat))`,
                    type: 'POST',
                    body: (db) => {
                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox', 'key');
                        let selectedCustomer = v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customerid');
                        let searchString = '';
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsTerritoriesGrid2Row4Cell1SearchBox')) {
                            searchString = v('rocheBPSPAccountsTerritoriesGrid2Row4Cell1SearchBox.value').toUpperCase();
                        }
                        return `{"MDX":"
                                WITH
                                     MEMBER [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[IsNElement]
                                     AS IIF(ISLEAF([Territories].[Territories].CurrentMember),'1','0')
                                SELECT 
                                   {[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Assignment Flag],
                                   [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[REXIS Flag],
                                   [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[IsNElement]}
                                  ON COLUMNS ,
                                  
                                    {FILTER({TM1DRILLDOWNMEMBER({[Territories].[Territories].[ALL TERRITORIES ${company}]}, ALL, RECURSIVE )},
                                    INSTR(UCASE([Territories].[Territories].[Caption]), '${searchString}')<>0
                                    OR
                                    INSTR(UCASE([Territories].[Territories].[Territory Code]), '${searchString}')<>0
                                    )
                                    }
                                    PROPERTIES [Territories].[Territories].[Caption]

                                    
                                    ON ROWS

                                FROM [Sales Territory to Customer] 
                                WHERE 
                                  (
                                   [Versions].[Versions].[Live],
                                   [Companies].[Companies].[${company}],
                                   [Receivers].[Receivers].[All Receivers],
                                   [Customers Plan].[Customers Plan].[${selectedCustomer}]
                                  )
                            "}`;

                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 3,
                        query: [

                            (r, x) => {
                                return {
                                    label: r.Cells[x].Members[4].Attributes['Caption'] + '  (' + r.Cells[x].Members[4].Name + ')',
                                    customerID: r.Cells[x].Members[4].Name,
                                    skin: 'gridtable_hierarchy_bpsp_' + r.Cells[x].Members[4].Attributes['UI Level Format'].replace('a', ''),
                                    level: r.Cells[x].Members[4].Attributes['UI Level Format'].replace('a', ''),
                                }
                            },

                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x].FormattedValue) > 0 ? 1 : 0,
                                    editable: r.Cells[x + 2].FormattedValue === '1' ? true : false,
                                    cellSkin: r.Cells[x + 2].FormattedValue === '1' ? '' : 'readonly_bpsp',
                                    skin: r.Cells[x + 2].FormattedValue === '1' ? 'Settings_toggle_bpsp' : 'label_toggle_bpsp',
                                    titleOn: r.Cells[x + 2].FormattedValue === '1' ? '' : '' + parseInt(r.Cells[x].FormattedValue),
                                }
                            },
                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x + 1].FormattedValue) > 0 ? 1 : 0,
                                    editable: r.Cells[x + 1].FormattedValue === '1' ? true : false,
                                    cellSkin: r.Cells[x + 1].FormattedValue === '1' ? '' : 'readonly_bpsp',
                                    skin: r.Cells[x + 1].FormattedValue === '1' ? 'Settings_toggle_bpsp' : 'label_toggle_bpsp',
                                    titleOn: r.Cells[x + 1].FormattedValue === '1' ? '' : '' + parseInt(r.Cells[x].FormattedValue),
                                }
                            }
                        ]
                    }
                },
        },
    rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox');
            return a;
        },
        initDefault: (db) => {
            return [];
        },

        open: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCustomerID', v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customerid'));
                Utils.setWidgetValue('systemValueGlobalSelectedCustomerName', v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customername') + ' (' + v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customerid') + ')');
            }
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox', 'key');
                    Utils.setWidgetValue('systemValueGlobalSelectedCustomerID', v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customerid'));
                    Utils.setWidgetValue('systemValueGlobalSelectedCustomerName', v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customername') + ' (' + v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customerid') + ')');
                    return `{"MDX":"
                        SELECT 
                           {[}ElementAttributes_Customers Plan].[}ElementAttributes_Customers Plan].[Account Name],
                           [}ElementAttributes_Customers Plan].[}ElementAttributes_Customers Plan].[Caption]} 
                          ON COLUMNS , 
                           {TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[Customers Plan].[Customers Plan].[All Customers Plan ${company}]}, 
                           {[Customers Plan].[Customers Plan].[All Customers Plan ${company}]}, RECURSIVE )}, 0)} 
                          ON ROWS 
                        FROM [}ElementAttributes_Customers Plan] 
                                    "}`
                },

                parsingControl: {
                    type: 'matrix',
                    length: 2,
                    query: [
                        (r, x) => {
                            return {active: true}
                        },
                        (r, x) => {
                            return {value: r.Cells[x].FormattedValue};
                        },
                        (r, x) => {
                            return {value: r.Cells[x + 1].FormattedValue};
                        }

                    ]
                }

            },
    },
    rocheBPSPAccountsTerritoriesGrid2Row3Cell1SelectorButton: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox') && v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customername');
            return a;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCustomerID', v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customerid'));
                Utils.setWidgetValue('systemValueGlobalSelectedCustomerName', v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customername') + ' (' + v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.territoryid') + ')');
                return {
                    label: v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customername') === false ? 'Unknow'
                        : v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customername') + ' (' + v('rocheBPSPAccountsTerritoriesHorizontalTableCustomerSelector.open.customerid') + ')'
                };
            }
        }
    },
    rocheBPSPAccountsTerritoriesGridRow3Cell4SaveButton: {
        launch: {

            url: (db) => `/api/v1/Processes('MODULE - UI - Account to Territory Update')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {

                return `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox', 'key')}"}
                        ]
                    }`;
            }
        }


    },
    rocheBPSPTerritoriesUsersGridRow3Cell4SaveButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Territory to User Update')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                return `{
                        "Parameters": [

                                {"Name": "pMode", "Value": "2"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox', 'key')}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPTerritoriesUsersTerritoriesGridRow3Cell4SaveButton: {
        launch: {

            url: (db) => `/api/v1/Processes('MODULE - UI - Territory to User Update')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {

                return `{
                        "Parameters": [

                                {"Name": "pMode", "Value": "2"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesUsersTitleGridRow1Cell2DropBox', 'key')}"}
                        ]
                    }`;
            }
        }

    },
    rocheBPSPAccountsTerritoriesGrid2Row3Cell4SaveButton: {

        launch: {

            url: (db) => `/api/v1/Processes('MODULE - UI - Account to Territory Update')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {

                return `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsTerritoriesGridRow1Cell2DropBox', 'key')}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPTerritoriesUsersTerritoriesGrid: {
        init: {
            execute: (db) => {
                return {visible: db.selectedTerritoriesUsersType === 'ByTerritory' ? true : false};
            }
        }

    },
    rocheBPSPTerritoriesUsersGrid: {
        init: {
            execute: (db) => {
                return {visible: db.selectedTerritoriesUsersType === 'ByUser' ? true : false};
            }
        }

    },
    rocheBPSPSettingsGridRow5Cell2Button: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('selectedTerritoriesUsersType', 'ByTerritory');
            }
        }

    },
    // rocheBPSPTerritories
    rocheBPSPTerritoriesGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]}
                    ON COLUMNS ,
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPTerritoriesGridTable:
        {
            initCondition: (db) => {
                let a = Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesGridRow1Cell2DropBox');
                return a;
            },
            initDefault: (db) => {
                return [];
            },
            perform: {
                execute: (db) => {
                    Utils.setWidgetValue('selectedTerritoriesUsersType', 'ByTerritory');
                }
            },
            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Updateable,RuleDerived,Consolidated;$expand=Members($select=Name, Attributes/Caption,Attributes/TerritoryCode))`,
                    type: 'POST',
                    body: (db) => {
                        let searchString = '';
                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesGridRow1Cell2DropBox', 'key') === '' ? '0001' : Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesGridRow1Cell2DropBox', 'key');
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesGridRow2Cell1SearchBox')) {
                            searchString = v('rocheBPSPTerritoriesGridRow2Cell1SearchBox.value').toUpperCase();

                        }
                        return `{"MDX":"
                                    WITH MEMBER [}Clients].[}Clients].[All]
                                    AS SUM([}Clients].[}Clients].Members)
                                    MEMBER [Measures Client To Territory].[Measures Client To Territory].[UILevelFormat]
                                    AS [Territories].[Territories].CurrentMember.Properties('UI Level Format')
                                    MEMBER [Measures Client To Territory].[Measures Client To Territory].[TerritoryToProduct]
                                    AS [Sales Territory to Product].([Versions].[Versions].[Live], [Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[PL1], [Measures Sales Territory to Product].[Measures Sales Territory to Product].[Assignment Flag])
                                    MEMBER [Measures Client To Territory].[Measures Client To Territory].[TerritoryToCustomer]
                                    AS [Sales Territory to Customer].([Versions].[Versions].[Live], [Receivers].[Receivers].[All Receivers], [Customers Plan].[Customers Plan].[All Customers Plan ${company}], [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Assignment Flag])
                                    MEMBER [Measures Client To Territory].[Measures Client To Territory].[IsNElement]
                                    AS IIF(ISLEAF([Territories].[Territories].CurrentMember),'1','0')
                                    SELECT
                                       {([}Clients].[}Clients].[Admin], [Measures Client To Territory].[Measures Client To Territory].[UILevelFormat]),
                                       ([}Clients].[}Clients].[Admin], [Measures Client To Territory].[Measures Client To Territory].[TerritoryToProduct]), 
                                       ([}Clients].[}Clients].[Admin], [Measures Client To Territory].[Measures Client To Territory].[TerritoryToCustomer]), 
                                       ([}Clients].[}Clients].[All], [Measures Client To Territory].[Measures Client To Territory].[Assign Flag]),
                                       ([}Clients].[}Clients].[Admin], [Measures Client To Territory].[Measures Client To Territory].[IsNElement])

                                       } 
                                      ON COLUMNS,
                                      --{TM1DRILLDOWNMEMBER({[Territories].[Territories].[All Territories 1391]}, All, Recursive)}
                                      --PROPERTIES [Territories].[Territories].[Caption]
                                        {FILTER({TM1DRILLDOWNMEMBER({[Territories].[Territories].[ALL TERRITORIES ${company}]},
                                        {[Territories].[Territories].[ALL TERRITORIES ${company}]}, RECURSIVE )}, 
                                        INSTR(UCASE([Territories].[Territories].CurrentMember.Properties('Caption')), '${searchString}')>0)}
                                      ON ROWS 
                                    FROM [Client To Territory] 
                                    WHERE 
                                      (
                                       [Companies].[Companies].[${company}]
                                      )

                                    "}`;

                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 5,
                        query: [


                            (r, x) => {
                                return {
                                    label: r.Cells[x].Members[1].Attributes['Caption'],
                                    territoryName: r.Cells[x].Members[1].Attributes['Caption'],
                                    territoryID: r.Cells[x].Members[1].Name,
                                    skin: 'gridtable_hierarchy_bpsp_' + r.Cells[x].FormattedValue
                                }
                            },

                            (r, x) => {
                                return {title: r.Cells[x].FormattedValue.replace('PL', '')}
                            },

                            (r, x) => {
                                return {
                                    title: parseInt(r.Cells[x + 1].FormattedValue) + ' Products',
                                    skin: 'territories_readonly_text_with_icon_bpsp',
                                    icon: 'icon-edit'
                                }
                            },

                            (r, x) => {
                                return {
                                    title: parseInt(r.Cells[x + 2].FormattedValue) + ' Customers',
                                    skin: 'territories_readonly_text_with_icon_bpsp',
                                    icon: r.Cells[x + 4].FormattedValue === '1' ? 'icon-edit' : '',
                                    cellSkin: r.Cells[x + 4].FormattedValue === '1' ? '' : 'readonly_bpsp'
                                }
                            },
                            (r, x) => {
                                return {
                                    title: r.Cells[x + 4].FormattedValue === '1' ? parseInt(r.Cells[x + 3].FormattedValue) + ' Users' : '',
                                    skin: 'territories_readonly_text_with_icon_bpsp',
                                    icon: r.Cells[x + 4].FormattedValue === '1' ? 'icon-edit' : '',
                                    cellSkin: r.Cells[x + 4].FormattedValue === '1' ? '' : 'readonly_bpsp'

                                }
                            },

                        ]
                    }
                },
        },
    rocheBPSPTerritoriesGridTableCellText05: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueGlobalSelectedUser'] = Utils.getGridTableCell('rocheBPSPTerritoriesGridTable', 0).title;
                    Widgets['systemValueGlobalSelectedUserName'] = Utils.getGridTableCell('rocheBPSPTerritoriesGridTable', 1).title;
                }
            },
    },
    // rocheBPSPTerritoriesProducts
    rocheBPSPTerritoriesProductsGridTable:
        {

            switch: {

                url: (db) => `/api/v1/Processes('MODULE - UI - Territory to Product Update')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pProduct", "Value": "${v('rocheBPSPTerritoriesProductsGridTable').cellData[v('rocheBPSPTerritoriesProductsGridTable.row')][1].title}"},
                                {"Name": "pTerritory", "Value": "${Utils.getGridTableCell('rocheBPSPTerritoriesGridTable', 0).territoryID}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesGridRow1Cell2DropBox', 'key')}"},
                        ]
                    }`
            },

            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                    type: 'POST',
                    body: (db) => {
                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPTerritoriesGridRow1Cell2DropBox', 'key');
                        let searchString = '';
                        let territoryID = Utils.getGridTableCell('rocheBPSPTerritoriesGridTable', 0).territoryID;
                        if (Utils.isValueExistingAndNotEmpty('rocheBPSPTerritoriesProductsGridRow2Cell1SearchBox')) {
                            searchString = v('rocheBPSPTerritoriesProductsGridRow2Cell1SearchBox.value').toUpperCase();
                        }
                        return `{"MDX":"
                                    With
                                    MEMBER [Measures Sales Territory to Product].[Measures Sales Territory to Product].[ProductName] as 
                                                [Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Description')
                                    MEMBER [Measures Sales Territory to Product].[Measures Sales Territory to Product].[ProductCode] as 
                                                [Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Element')
                                    MEMBER [Measures Sales Territory to Product].[Measures Sales Territory to Product].[ProductLevel] as 
                                                [Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Product Level - Name')
                                    
                                    SELECT 
                                       {[Measures Sales Territory to Product].[Measures Sales Territory to Product].[ProductName],
                                       [Measures Sales Territory to Product].[Measures Sales Territory to Product].[ProductCode],
                                       [Measures Sales Territory to Product].[Measures Sales Territory to Product].[ProductLevel],
                                       [Measures Sales Territory to Product].[Measures Sales Territory to Product].[Assignment Input]}
                                       
                                      ON COLUMNS , 
                                         -- {[Products].[BPSP Budget].Members} 
                                         --  PROPERTIES [Products].[BPSP Budget].[BPSP Budget Caption]  
                                        {FILTER({[Products].[BPSP Budget].Members}, 
                                        INSTR(UCASE([Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Caption')), '${searchString}')>0)} 
                                       PROPERTIES [Products].[BPSP Budget].[BPSP Budget Caption]
                                       
                                       ON ROWS 
                                    FROM [Sales Territory to Product] 
                                    WHERE 
                                      (
                                       [Versions].[Versions].[Live],
                                       [Companies].[Companies].[${company}],
                                       [Territories].[Territories].[${territoryID}]
                                      )
                                    "}`;

                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 4,
                        query: [
                            (r, x) => {
                                return {
                                    label: r.Cells[x].FormattedValue,
                                    skin: 'gridtable_hierarchy_bpsp_' + r.Cells[x + 2].FormattedValue.replace('a', '')
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 1].FormattedValue,
                                }
                            },

                            (r, x) => {
                                return {
                                    title: r.Cells[x + 2].FormattedValue,
                                }
                            },

                            (r, x) => {
                                return {
                                    value: r.Cells[x + 3].FormattedValue === '1' ? 1 : 0,
                                }
                            }

                        ]
                    }
                },
        },
    rocheBPSPTerritoriesProductsGridRow1Cell2Title: {
        init: {
            execute: (db) => {
                return {title: Utils.getGridTableCell('rocheBPSPTerritoriesGridTable', 0).territoryName};
            }
        }
    },
    rocheBPSPTerritoriesProductsGridRow1Cell4Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPMaterial: {
        getFileName: (db) => {
            let s = [], fileName;
            s.push(Utils.getFormattedDate(new Date(), '_', true));
            s.push(db.activeUserName);
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key'));
            return s.join('_').replaceAll(':', '_').replaceAll(' ', '_').replaceAll('/', '_');
        }
    },
    rocheBPSPMaterialGridRow4Cell3ExportButton: {
        launch: {
            download: (db) => {
                let y1 = parseInt(db.systemValueGlobalStartingPlanYear),
                    fileName = Repository.rocheBPSPMaterial.getFileName(db);
                return {
                    url: 'export?export_key=rocheMaterialMaintenanceExport&file_name=' + fileName + '.xlsx',   // custom_object json
                    fileName: fileName + '.xlsx',
                    activeUserName: db.activeUserName,
                    companyVersion: db.systemValueGlobalCompanyVersion, //Live
                    productPlanVersion: db.systemValueGlobalCompanyProductPlanVersion, //Budget
                    company: Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key'),
                    globalVersion: Widgets.systemValueGlobalCompanyVersion,
                    version: Widgets.systemValueGlobalCompanyProductPlanVersion,
                    year1: y1,
                    key: 'rocheMaterialMaintenanceExportMDX' // ez a yml
                };
            }
        }
    },
    rocheBPSPMaterialGridRow4Cell3ExportByIpNodeButton: {
        launch: {
            download: (db) => {
                let y1 = parseInt(db.systemValueGlobalStartingPlanYear),
                    fileName = Repository.rocheBPSPMaterial.getFileName(db);
                return {
                    url: 'export?export_key=rocheMaterialMaintenanceByIpNodeExport&file_name=' + fileName + '.xlsx',   // custom_object json
                    fileName: fileName + '.xlsx',
                    activeUserName: db.activeUserName,
                    companyVersion: db.systemValueGlobalCompanyVersion, //Live
                    productPlanVersion: db.systemValueGlobalCompanyProductPlanVersion, //Budget
                    company: Utils.getDropBoxSelectedItemAttribute('rocheBPSPMaterialGridRow1Cell2DropBox', 'key'),
                    globalVersion: Widgets.systemValueGlobalCompanyVersion,
                    version: Widgets.systemValueGlobalCompanyProductPlanVersion,
                    year1: y1,
                    key: 'rocheMaterialMaintenanceByIpNodeExportMDX' // ez a yml
                };
            }
        }
    },
    //rocheBPSPAccounts
    rocheBPSPAccountsGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT 
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]} 
                    ON COLUMNS , 
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}  
                    ON ROWS 
                    FROM [}ElementAttributes_Companies] 
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPAccountsOverviewGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsOverviewGridRow1Cell2DropBox', 'key'));
            }
        },

        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Planning All Customers] AS
               [Company Information].([Versions].[Versions].[Live],[Measures Company Information].[Measures Company Information].[REXIS Accounts Plan All])
            SELECT
               {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name]
               ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]
               ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Planning All Customers]}
            ON COLUMNS ,
               {TM1SubsetToSet([Companies].[Companies], 'All Active')}
            ON ROWS
            FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 3) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    locked: r.Cells[i + 2].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPAccountsGridRow1Cell4Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPAccountsOverviewGridRow1Cell4Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPAccountHorizontalTable: {
        open: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db) => {
                let vv = v('rocheBPSPAccountHorizontalTable');
                return `{"Ordinal": ${vv.selectedOrdinal},"Value": \"${vv.selected ? "1" : ""}\"}`
            }
        },
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsGridRow1Cell2DropBox');
            return a;
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsGridRow1Cell2DropBox', 'key');
                    let y1 = parseInt(Widgets['systemValueGlobalStartingPlanYear']);
                    let y0 = y1 - 1;

                    return `{"MDX":"
      					With 
						  Member [}ElementAttributes_Customers].[}ElementAttributes_Customers].[PrevYear] AS
						      [Sales Actuals by Customer].( [Periods].[Periods].[${y0}],[Companies].[Companies].[${company}],[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[PL1],
						      [Receivers].[Receivers].[All Receivers],[Measures Sales Actuals by Customer].[Measures Sales Actuals by Customer].[Rexis Invoice])
						    Member [}ElementAttributes_Customers].[}ElementAttributes_Customers].[Actual] AS
						      [Sales Actuals by Customer].( [Periods].[Periods].[${y1}],[Companies].[Companies].[${company}],[Products].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].[PL1],
						      [Receivers].[Receivers].[All Receivers],[Measures Sales Actuals by Customer].[Measures Sales Actuals by Customer].[Rexis Invoice])
						SELECT 
                                   {[}ElementAttributes_Customers].[}ElementAttributes_Customers].[Account Name],
                                   [}ElementAttributes_Customers].[}ElementAttributes_Customers].[Account Number],
                                   [}ElementAttributes_Customers].[}ElementAttributes_Customers].[PrevYear],
                                   [}ElementAttributes_Customers].[}ElementAttributes_Customers].[Actual],
                                   [}ElementAttributes_Customers].[}ElementAttributes_Customers].[Plan Flag]} 
						  ON COLUMNS , 
						   {EXCEPT({DRILLDOWNMEMBER({[Customers].[Customers].[ALL CUSTOMERS ${company}]}, {[Customers].[Customers].[ALL CUSTOMERS ${company}]})},{[Customers].[Customers].[ALL CUSTOMERS ${company}]})} 
						  ON ROWS 
						FROM [}ElementAttributes_Customers] 
                  "}`;

                },
                parsingControl: {
                    type: 'matrix',
                    length: 5,
                    query: [

                        (r, x) => {
                            return {value: r.Cells[x].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 1].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 2].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 3].FormattedValue};
                        }, (r, x) => {
                            return {
                                active: true,
                                ordinal: r.Cells[x + 4].Ordinal,
                                on: r.Cells[x + 4].FormattedValue === '' ? false : true
                            };
                        }
                    ]
                }

            },
    },
    rocheBPSPAccountsOverviewHorizontalTable: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsOverviewGridRow1Cell2DropBox');
            return a;
        },
        initDefault: (db) => {
            return [];
        },

        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Consolidated;$expand=Members($select=Name, Attributes/Caption,Attributes/AccountName))`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsOverviewGridRow1Cell2DropBox', 'key');

                    return `{"MDX":"
                       SELECT 
                                {[Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[REXIS Flag],
                                   [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Assignment Flag],
                                   [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Flag - Has plan data],
                                   [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Flag - Has actuals]}
                          ON COLUMNS , 
                          NON EMPTY 
                           {EXCEPT({TM1DRILLDOWNMEMBER({[Customers Plan].[Customers Plan].[All Customers Plan ${company}]}, ALL, RECURSIVE )},
                           {[Customers Plan].[Customers Plan].[All Customers Plan ${company}]})}
                           * 
                           {TM1SUBSETTOSET( [Receivers], 'zUI ${company} Plan Receivers')}
                           
                          ON ROWS 
                        FROM [Sales Territory to Customer] 
                        WHERE 
                          (
                           [Versions].[Versions].[Live],
                           [Companies].[Companies].[${company}],
                           [Territories].[Territories].[All Territories]
                          )
                  "}`;

                },
                parsingControl: {
                    type: 'matrix',
                    length: 4,
                    query: [

                        (r, x) => {
                            return {value: r.Cells[x].Members[3].Attributes['Account Name']};
                        }, (r, x) => {
                            return {value: r.Cells[x].Members[3].Attributes.Caption};
                        }, (r, x) => {
                            return {value: r.Cells[x].Members[4].Attributes.Caption};
                        }, (r, x) => {
                            return {value: parseInt(r.Cells[x].FormattedValue) === 0 ? 'No' : 'Yes'};
                        }, (r, x) => {
                            return {value: parseInt(r.Cells[x + 1].FormattedValue) === 0 ? 'No' : 'Yes'};
                        }, (r, x) => {
                            return {value: parseInt(r.Cells[x + 2].FormattedValue) === 0 ? 'No' : 'Yes'};
                        }, (r, x) => {
                            return {value: parseInt(r.Cells[x + 3].FormattedValue) === 0 ? 'No' : 'Yes'};
                        }
                    ]
                }

            },
    },
    rocheBPSPAccountsGridRow2Cell1Button: {

        launch: {

            url: (db) => `/api/v1/Processes('MODULE - UI - Account Maintenance')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {

                return `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsGridRow1Cell2DropBox', 'key')}"}
                        ]
                    }`;
            }
        }


    },
    rocheBPSPCompanySettingsGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],
                        [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]}
                    ON COLUMNS ,
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [],
                                selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },

    rocheBPSPCompanySettingsGridRow1CellVersionsDropbox: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGridRow1Cell2DropBox')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', v('rocheBPSPCompanySettingsGridRow1CellVersionsDropbox.value'));
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1CellVersionsDropbox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => {
                return `{
            "MDX" : "
                    WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                        AS [Versions].[Versions].CurrentMember.Name
                    SELECT
                        {
                        [Measures Version Information by Company].[Measures Version Information by Company].[VersionID],
                        [Measures Version Information by Company].[Measures Version Information by Company].[Name]
                        }
                        ON COLUMNS,
                        {FILTER(
                            {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                            , [Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key')}],
                            [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) =  1)}
                        ON ROWS
                    FROM
                        [Version Information by Company]
                    WHERE
                        ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key')}])
            "}`
            },
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i + 1].FormattedValue,
                                    key: r.Cells[i].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCompanySettingsYearProductDropBox: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGridRow1Cell2DropBox')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db) => {
                return `{"Ordinal": ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsYearProductDropBox', 'ordinal')},"Value": \"${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsYearProductDropBox', 'key')}\"}`
            },
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,HasPicklist,PicklistValues)`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key');
                return `{"MDX" : "
                    SELECT
                        {[Measures Company Information].[Measures Company Information].[Plan Years Product]}
                        ON COLUMNS 
                    FROM [Company Information]
                    WHERE 
                        ([Versions].[Versions].[Live],
                         [Companies].[Companies].[${company}])
                   "}`
            },
            parsingControl: {
                type: 'object',
                query: {
                    items: (r, x) => {
                        let cellVal = String(parseInt(r.Cells[0].FormattedValue));
                        let results = [];
                        r.Cells[0].PicklistValues.map(t => {
                            results.push({
                                key: t,
                                name: t,
                                ordinal: r.Cells[0].Ordinal,
                                on: t === cellVal
                            });
                        });
                        return results;
                    }
                }
            }
        }

    },

    rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]}
                    ON COLUMNS ,
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]}
                    ON COLUMNS ,
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },

    rocheBPSPCompanySettingsCheckedOutGridRow1CellVersionsDropbox: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', v('rocheBPSPCompanySettingsCheckedOutGridRow1CellVersionsDropbox.value'));
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1CellVersionsDropbox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => {
                return `{
            "MDX" : "
                    WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                        AS [Versions].[Versions].CurrentMember.Name
                    SELECT
                        {
                        [Measures Version Information by Company].[Measures Version Information by Company].[VersionID],
                        [Measures Version Information by Company].[Measures Version Information by Company].[Name]
                        }
                        ON COLUMNS,
                        {FILTER(
                            {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)} 
                            ,[Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox', 'key')}],
                            [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) =  1)}
                        ON ROWS
                    FROM
                        [Version Information by Company]
                    WHERE
                        ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox', 'key')}])
            "}`
            },
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i + 1].FormattedValue,
                                    key: r.Cells[i].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },

    rocheBPSPCompanySettingsCheckedOutGridRow1Cell3Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPCompanySettingsGrowthGridRow1Cell3Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsGridRow1Cell3Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPCompanySettingsCheckedOutGridTable:
        {
            initCondition: (db) => {
                let a = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsCheckedOutGridRow1CellVersionsDropbox');
                return a;
            },
            initDefault: (db) => {
                return [];
            },
            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption,Attributes/BPSPBudgetUILevelFormat))`,
                    type: 'POST',
                    body: (db) => {
                        let u = db.activeUserName.split('/')[0];
                        let version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1CellVersionsDropbox', 'key');
                        return `{"MDX":"
                        With
                        MEMBER [Measures Sales Plan Checkout by Product].[Measures Sales Plan Checkout by Product].[Email] as
                        [}ElementAttributes_}Clients].([}ElementAttributes_}Clients].[Email],
                        StrToMember('[}Clients].[${u}/' + [Measures Sales Plan Checkout by Product].[Measures Sales Plan Checkout by Product].[checkout user] + ']'))
                        SELECT
                           {
                           [Measures Sales Plan Checkout by Product].[Measures Sales Plan Checkout by Product].[checkout user],
                           [Measures Sales Plan Checkout by Product].[Measures Sales Plan Checkout by Product].[checkout datetime],
                           [Measures Sales Plan Checkout by Product].[Measures Sales Plan Checkout by Product].[checkout flag],
                           [Measures Sales Plan Checkout by Product].[Measures Sales Plan Checkout by Product].[Email]
                           }
                          ON COLUMNS , 
                          NON EMPTY 
                          {[Products].[BPSP Budget].Members}
                           * {TM1DRILLDOWNMEMBER({[Receivers].[Receivers].[All Receivers]}, ALL, RECURSIVE )}
                          ON ROWS 
                        FROM [Sales Plan Checkout by Product]
                        WHERE 
                          (
                           [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox', 'key')}],
                           [Versions].[Versions].[${version}]
                          )
                                    "}`;
                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 4,
                        query: [
                            (r, x) => {
                                return {
                                    label: r.Cells[x].Members[2].Attributes.Caption,
                                    productCode: r.Cells[x].Members[2].Name
                                }
                            },

                            (r, x) => {
                                return {title: r.Cells[x].Members[2].Attributes['BPSP Budget UI Level Format'].replace('N', '').replace('C', '')}
                            },

                            (r, x) => {
                                return {title: r.Cells[x].Members[3].Name}
                            },

                            (r, x) => {
                                return {title: r.Cells[x].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 1].FormattedValue}
                            },
                            (r, x) => {
                                return {label: 'Force Unlock'}
                            },

                            (r, x) => {
                                return {
                                    label: 'Contact',
                                    url: 'mailto:' + r.Cells[x + 3].FormattedValue
                                }
                            }
                        ]
                    }
                },
        },
    rocheBPSPCompanySettingsCheckedOutGridTableIPPlanning:
        {
            initCondition: (db) => {
                let a = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsCheckedOutGridRow1CellVersionsDropbox');
                return a;
            },
            initDefault: (db) => {
                return [];
            },
            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption,Attributes/BPSPBudgetIPUILevelFormat))`,
                    type: 'POST',
                    body: (db) => {
                        let u = db.activeUserName.split('/')[0];
                        let version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1CellVersionsDropbox', 'key');
                        return `{"MDX":"
                        With
                        MEMBER [Measures Sales Plan IP Checkout by Materials].[Measures Sales Plan IP Checkout by Materials].[Email] as
                        [}ElementAttributes_}Clients].([}ElementAttributes_}Clients].[Email],
                        StrToMember('[}Clients].[${u}/' + [Measures Sales Plan IP Checkout by Materials].[Measures Sales Plan IP Checkout by Materials].[checkout user] + ']'))
                           SELECT 
                                       {
                                       [Measures Sales Plan IP Checkout by Materials].[Measures Sales Plan IP Checkout by Materials].[checkout user],
                                       [Measures Sales Plan IP Checkout by Materials].[Measures Sales Plan IP Checkout by Materials].[checkout datetime],
                                       [Measures Sales Plan IP Checkout by Materials].[Measures Sales Plan IP Checkout by Materials].[checkout flag],
                                       [Measures Sales Plan IP Checkout by Materials].[Measures Sales Plan IP Checkout by Materials].[Email]
                                       } 
                                      ON COLUMNS , 
                                      NON EMPTY 
                                      {[Materials].[BPSP Budget IP].Members}
                                       * {TM1DRILLDOWNMEMBER({[Receivers].[Receivers].[All Receivers]}, ALL, RECURSIVE )}
                                      ON ROWS 
                                    FROM [Sales Plan IP Checkout by Material] 
                                    WHERE 
                                      (
                                       [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox', 'key')}],
                                       [Versions].[Versions].[${version}]
                                      )

                                    "}`;

                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 4,
                        query: [
                            (r, x) => {
                                return {
                                    label: r.Cells[x].Members[2].Attributes.Caption,
                                    materialCode: r.Cells[x].Members[2].Name
                                }
                            },

                            (r, x) => {
                                return {title: r.Cells[x].Members[2].Attributes['BPSP Budget IP UI Level Format'].replace('N', '').replace('C', '')}
                            },

                            (r, x) => {
                                return {title: r.Cells[x].Members[3].Name}
                            },

                            (r, x) => {
                                return {title: r.Cells[x].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 1].FormattedValue}
                            },
                            (r, x) => {
                                return {label: 'Force Unlock'}
                            },

                            (r, x) => {
                                return {
                                    label: 'Contact',
                                    url: 'mailto:' + r.Cells[x + 3].FormattedValue
                                }
                            }
                        ]
                    }
                },
        },
    rocheBPSPCompanySettingsGridRow4Cell1MessageInput: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGridRow1Cell2DropBox');
            return a;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => `{"MDX":"
                SELECT 
                   {[Measures Company Information].[Measures Company Information].[Start page message Title]} 
                   PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON COLUMNS , 
                   {[Companies].[Companies].[All Companies Active^${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key')}]} 
                   PROPERTIES [Companies].[Companies].[Member description]  ON ROWS 
                FROM [Company Information] 
                WHERE 
                  (
                   [Versions].[Versions].[Live]
                  )
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            return r.Cells[x].FormattedValue;
                        }
                    }
            }
        }
    },
    rocheBPSPCompanySettingsGridRow5Cell1MessageInput: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGridRow1Cell2DropBox');
            return a;
        },
        initDefault: (db) => {
            return [];
        },

        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => `{"MDX":"
                SELECT 
                   {[Measures Company Information].[Measures Company Information].[Start page message]} 
                   PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON COLUMNS , 
                   {[Companies].[Companies].[All Companies Active^${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key')}]} 
                   PROPERTIES [Companies].[Companies].[Member description]  ON ROWS 
                FROM [Company Information] 
                WHERE 
                  (
                   [Versions].[Versions].[Live]
                  )
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            return r.Cells[x].FormattedValue;
                        }
                    }
            }
        }
    },


    rocheBPSPCompanySettingsGrowthGridRow1CellVersionsDropbox: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', v('rocheBPSPCompanySettingsGrowthGridRow1CellVersionsDropbox.value'));
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1CellVersionsDropbox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => {
                return `{
            "MDX" : "
                    WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                        AS [Versions].[Versions].CurrentMember.Name
                    SELECT
                        {
                        [Measures Version Information by Company].[Measures Version Information by Company].[VersionID],
                        [Measures Version Information by Company].[Measures Version Information by Company].[Name]
                        }
                        ON COLUMNS,
                        {FILTER(
                            {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                            , [Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key')}],
                            [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) =  1)}
                        ON ROWS
                    FROM
                        [Version Information by Company]
                    WHERE
                        ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key')}])
            "}`
            },
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i + 1].FormattedValue,
                                    key: r.Cells[i].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },


    rocheBPSPCompanySettingsGrowthGridTable: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGrowthGridRow1CellVersionsDropbox') && Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGrowthGridRow3Cell2DropBox')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Consolidated,RuleDerived,Updateable;$expand=Members($select=Name, Attributes/Caption,Attributes/BPSPBudgetUILevelFormat))`,
            type: 'POST',
            body: (db) => {

                let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                    YearPlusOne = yearzero + 1,
                    YearPlusTwo = yearzero + 2,
                    YearPlusThree = yearzero + 3,
                    yearPlusFour = yearzero + 4;

                let searchString = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGrowthGridRow3Cell1SearchBox')) {
                    searchString = v('rocheBPSPCompanySettingsGrowthGridRow3Cell1SearchBox.value').toUpperCase();
                }

                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key');
                let receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow3Cell2DropBox', 'key');
                let versions = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1CellVersionsDropbox', 'key');

                return `{"MDX":"
                    WITH
                    MEMBER [Years].[Years].[ProductName] as 
                        [Products Flat].[Products Flat].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description')
                    MEMBER [Years].[Years].[ProductCode] as 
                        [Products Flat].[Products Flat].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Element')
                    MEMBER [Years].[Years].[ProductLevel] as 
                        [Products Flat].[Products Flat].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Product Level - Name')
                        
                    SELECT 
                       {
                       [Years].[Years].[ProductName],
                       [Years].[Years].[ProductCode],
                       [Years].[Years].[ProductLevel],
                       [Years].[Years].[${yearzero}],
                       [Years].[Years].[${YearPlusOne}],
                       [Years].[Years].[${YearPlusTwo}],
                       [Years].[Years].[${YearPlusThree}]
                       } 
                       ON COLUMNS , 
                     {FILTER({
                        TM1FILTERBYLEVEL(
                            {[Products Flat].[Products Flat].[BPSP ${db.systemValueGlobalCompanyProductPlanVersion}].Children}
                            , 0)},   
                      INSTR([Products Flat].[Products Flat].CurrentMember.Properties('BPSP ${db.systemValueGlobalCompanyProductPlanVersion} Description'), '${searchString}' )>0)} 
                       PROPERTIES [Products Flat].[Products Flat].[Caption]
                       ON ROWS 
                    FROM [Sales Parameters by Products Flat] 
                    WHERE 
                      (
                       [Companies].[Companies].[${company}],
                       [Versions].[Versions].[${versions}],
                       [Receivers].[Receivers].[${receiver}],
                       [Measures Sales Parameters by Products Flat].[Measures Sales Parameters by Products Flat].[Growth rate for Products Copy]
                      )
                "}`;

            },
            parsingControl: {
                type: 'matrix',
                length: 7,
                query: [
                    (r, x) => {
                        return {
                            label: r.Cells[x].FormattedValue,
                            skin: 'gridtable_hierarchy_bpsp_' + r.Cells[x + 2].FormattedValue.replace('a', '')
                        }
                    }, (r, x) => {
                        return {title: r.Cells[x + 1].FormattedValue};
                    }, (r, x) => {
                        return {title: r.Cells[x + 2].FormattedValue};
                    }, (r, x) => {
                        let cellIndex = x + 3,
                            isEditable = r.Cells[cellIndex].RuleDerived === false && r.Cells[cellIndex].Consolidated === false;

                        return {
                            title: r.Cells[cellIndex].FormattedValue,
                            ordinal: r.Cells[cellIndex].Ordinal,
                            cellSkin: isEditable ? '' : 'readonly_bpsp',
                            editable: isEditable,
                            titleFontColor: isEditable ? '#A05EB5' : ''
                        };
                    }, (r, x) => {
                        let cellIndex = x + 4,
                            isEditable = r.Cells[cellIndex].RuleDerived === false && r.Cells[cellIndex].Consolidated === false;
                        return {
                            title: r.Cells[cellIndex].FormattedValue,
                            ordinal: r.Cells[cellIndex].Ordinal,
                            cellSkin: isEditable ? '' : 'readonly_bpsp',
                            editable: isEditable,
                            titleFontColor: isEditable ? '#A05EB5' : ''
                        };
                    }, (r, x) => {
                        let cellIndex = x + 5,
                            isEditable = r.Cells[cellIndex].RuleDerived === false && r.Cells[cellIndex].Consolidated === false;
                        return {
                            title: r.Cells[cellIndex].FormattedValue,
                            ordinal: r.Cells[cellIndex].Ordinal,
                            cellSkin: isEditable ? '' : 'readonly_bpsp',
                            editable: isEditable,
                            titleFontColor: isEditable ? '#A05EB5' : ''
                        };
                    }, (r, x) => {
                        let cellIndex = x + 6,
                            isEditable = r.Cells[cellIndex].RuleDerived === false && r.Cells[cellIndex].Consolidated === false;
                        return {
                            title: r.Cells[cellIndex].FormattedValue,
                            ordinal: r.Cells[cellIndex].Ordinal,
                            cellSkin: isEditable ? '' : 'readonly_bpsp',
                            editable: isEditable,
                            titleFontColor: isEditable ? '#A05EB5' : ''
                        };
                    },
                ]
            }
        },
        write: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `[
                    {"Ordinal": ${widgetValue.ordinal},"Value": ${Utils.getDecimalFromPercentString(widgetValue.value)}}
                ]`;
            }
        },
        paste: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `[
                    {"Ordinal": ${widgetValue.ordinal},"Value": ${Utils.getDecimalFromPercentString(widgetValue.value)}}
                ]`;
            }
        },
        pastelast: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `[
                    {"Ordinal": ${widgetValue.ordinal},"Value": ${Utils.getDecimalFromPercentString(widgetValue.value)}}
                ]`;
            }
        },
    },
    'rocheBPSPCompanySettingsGrowthGridTableHeaderText-04': {
        state: (db) => {
            return {body: Utils.parseNumber(db.systemValueGlobalStartingPlanYear)};
        },
    },
    'rocheBPSPCompanySettingsGrowthGridTableHeaderText-05': {
        state: (db) => {
            return {body: Utils.parseNumber(db.systemValueGlobalStartingPlanYear) + 1};
        },
    },
    'rocheBPSPCompanySettingsGrowthGridTableHeaderText-06': {
        state: (db) => {
            return {body: Utils.parseNumber(db.systemValueGlobalStartingPlanYear) + 2};
        },
    },
    'rocheBPSPCompanySettingsGrowthGridTableHeaderText-07': {
        state: (db) => {
            return {body: Utils.parseNumber(db.systemValueGlobalStartingPlanYear) + 3};
        },
    },
    rocheBPSPCompanySettingsGrowthGridRow3Cell2DropBox: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                SELECT 
                       {[}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Member description],
                        [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Receiver - Key]} 
                     ON COLUMNS , 
                        {Tm1SubsetToset([Receivers].[Receivers],'zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key')} Plan Receivers')}
                     ON ROWS
                    FROM [}ElementAttributes_Receivers] 
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [];
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: v('rocheBPSPCompanySettingsGrowthGridRow3Cell2DropBox.value') === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCompanySettingsGridTableCustomer:
        {
            initCondition: (db) => {
                let a = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGridRow1CellVersionsDropbox');
                return a;
            },
            initDefault: (db) => {
                return [];
            },
            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
                    type: 'POST',
                    body: (db) => {
                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key');
                        let version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1CellVersionsDropbox', 'key');
                        return `{"MDX":"
                            WITH
                            MEMBER [Measures Control Company Settings].[Measures Control Company Settings].[Switch Flag] as
                            IIF([Measures Control Company Settings].[Measures Control Company Settings].[Measure Info] <>'',1,0)
                            MEMBER [Measures Control Company Settings].[Measures Control Company Settings].[Info] as
                            IIF([Measures Control Company Settings].[Measures Control Company Settings].[Measure Info] <>'',
                            [Company Information].([Versions].[Versions].[${version}],[Companies].[Companies].[${company}]
                            ,StrToMember('[Measures Company Information].[Measures Company Information].[' 
                            + [Measures Control Company Settings].[Measures Control Company Settings].[Measure Info] + ']')),'')
                            SELECT
                            {[Measures Control Company Settings].[Measures Control Company Settings].[TI Process],
                            [Measures Control Company Settings].[Measures Control Company Settings].[PopUp Message],
                            [Measures Control Company Settings].[Measures Control Company Settings].[PopUp OK Text],
                            [Measures Control Company Settings].[Measures Control Company Settings].[PopUp CANCEL Text],
                            [Measures Control Company Settings].[Measures Control Company Settings].[Button text],
                            [Measures Control Company Settings].[Measures Control Company Settings].[Button Icon],
                            [Measures Control Company Settings].[Measures Control Company Settings].[Button Color],
                            [Measures Control Company Settings].[Measures Control Company Settings].[Switch Flag],
                            [Measures Control Company Settings].[Measures Control Company Settings].[Info],
                            [Measures Control Company Settings].[Measures Control Company Settings].[pFunction],
                            [Measures Control Company Settings].[Measures Control Company Settings].[PopUp Warning Message]}
                            ON COLUMNS ,
                            NON EMPTY {[Company Settings Buttons].[Company Settings Buttons].Members}
                            ON ROWS
                            FROM [Control Company Settings]
                            WHERE
                            ([Planning Modules].[Planning Modules].[Customer])
                                    "}`;

                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 11,
                        query: [
                            (r, x) => {
                                return {
                                    tiProcess: r.Cells[x].FormattedValue,
                                    popUpMessage: r.Cells[x + 1].FormattedValue,
                                    popUpOKText: r.Cells[x + 2].FormattedValue,
                                    popUpCancelText: r.Cells[x + 3].FormattedValue,
                                    buttonText: r.Cells[x + 4].FormattedValue,
                                    buttonIcon: r.Cells[x + 5].FormattedValue,
                                    buttonColor: r.Cells[x + 6].FormattedValue,
                                    switchFlag: r.Cells[x + 7].FormattedValue, // Toggle-e
                                    info: r.Cells[x + 8].FormattedValue,
                                    pFunction: r.Cells[x + 9].FormattedValue,
                                    popUpWarning: r.Cells[x + 10].FormattedValue,
                                    editable: false,
                                    label: r.Cells[x + 4].FormattedValue,
                                    fontColor: r.Cells[x + 6].FormattedValue,
                                    popup: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? false : true
                                }
                            },
                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? r.Cells[x + 8].FormattedValue : '',
                                    iconOff: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? 'icon-x-rectangle' : r.Cells[x + 5].FormattedValue,
                                    icon: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? 'icon-check-rectangle' : r.Cells[x + 5].FormattedValue,
                                    skin: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? 'CompanySettingsToggle_bpsp' : 'CompanySettingsToggleIcon_bpsp'
                                }
                            }
                        ]
                    }
                },
        },
    rocheBPSPCompanySettingsPopUpGridRow1Cell1Button: {
        init: {
            execute: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableCustomer', 0),
                    y = x.buttonIcon,
                    z = x.iconColor;

                return {
                    icon: y,
                    iconColor: z
                };
            }
        },
    },
    rocheBPSPCompanySettingsPopUpGridRow2Cell1Text: {
        init: {
            execute: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableCustomer', 0),
                    y = x.popUpMessage;

                return {
                    title: y,
                    body: '',
                };
            }
        },
    },
    rocheBPSPCompanySettingsPopUpGridRow3Cell1Text: {
        init: {
            execute: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableCustomer', 0),
                    y = x.popUpWarning;

                return {
                    body: y,
                    title: '',
                };
            }
        },
    },
    rocheBPSPCompanySettingsPopUpGridRow4Cell1Button: {
        init: {
            execute: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableCustomer', 0),
                    y = x.popUpOKText;

                return {
                    label: y,
                };
            }
        },
        launch: {
            url: (db) => `/api/v1/Processes('${Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableCustomer', 0).tiProcess}')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableCustomer', 0),
                    y = x.pFunction;

                return `{
                            "Parameters": [
                                    {"Name": "pModule", "Value": "Customer"},
                                    {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key')}"},
                                    {"Name": "pFunction", "Value": "${y}"},
                                    {"Name": "pVersion", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1CellVersionsDropbox', 'key')}"}
                            ]
                        }`;
            }
        }

    },
    rocheBPSPCompanySettingsPopUpGridRow5Cell1Cancel: {
        init: {
            execute: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableCustomer', 0),
                    y = x.popUpCancelText;

                return {
                    label: y,
                };
            }
        },
    },
    rocheBPSPCompanySettingsGridTableProduct:
        {
            initCondition: (db) => {
                let a = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGridRow1CellVersionsDropbox');
                return a;
            },
            initDefault: (db) => {
                return [];
            },

            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
                    type: 'POST',
                    body: (db) => {
                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key');
                        let version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1CellVersionsDropbox', 'key');
                        return `{"MDX":"
                            WITH
                            MEMBER [Measures Control Company Settings].[Measures Control Company Settings].[Switch Flag] as
                            IIF([Measures Control Company Settings].[Measures Control Company Settings].[Measure Info] <>'',1,0)
                            MEMBER [Measures Control Company Settings].[Measures Control Company Settings].[Info] as
                            IIF([Measures Control Company Settings].[Measures Control Company Settings].[Measure Info] <>''
                            ,[Company Information].([Versions].[Versions].[${version}],[Companies].[Companies].[${company}]
                            ,StrToMember('[Measures Company Information].[Measures Company Information].['
                            + [Measures Control Company Settings].[Measures Control Company Settings].[Measure Info] + ']')),'')
                            SELECT
                            {[Measures Control Company Settings].[Measures Control Company Settings].[TI Process],
                            [Measures Control Company Settings].[Measures Control Company Settings].[PopUp Message],
                            [Measures Control Company Settings].[Measures Control Company Settings].[PopUp OK Text],
                            [Measures Control Company Settings].[Measures Control Company Settings].[PopUp CANCEL Text],
                            [Measures Control Company Settings].[Measures Control Company Settings].[Button text],
                            [Measures Control Company Settings].[Measures Control Company Settings].[Button Icon],
                            [Measures Control Company Settings].[Measures Control Company Settings].[Button Color],
                            [Measures Control Company Settings].[Measures Control Company Settings].[Switch Flag],
                            [Measures Control Company Settings].[Measures Control Company Settings].[Info],
                            [Measures Control Company Settings].[Measures Control Company Settings].[pFunction],
                            [Measures Control Company Settings].[Measures Control Company Settings].[PopUp Warning Message]}
                            ON COLUMNS ,
                            NON EMPTY
                            {[Company Settings Buttons].[Company Settings Buttons].Members}
                            ON ROWS
                            FROM [Control Company Settings]
                            WHERE
                            ([Planning Modules].[Planning Modules].[Product])
                                    "}`;
                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 11,
                        query: [
                            (r, x) => {
                                return {
                                    tiProcess: r.Cells[x].FormattedValue,
                                    popUpMessage: r.Cells[x + 1].FormattedValue,
                                    popUpOKText: r.Cells[x + 2].FormattedValue,
                                    popUpCancelText: r.Cells[x + 3].FormattedValue,
                                    buttonText: r.Cells[x + 4].FormattedValue,
                                    buttonIcon: r.Cells[x + 5].FormattedValue,
                                    buttonColor: r.Cells[x + 6].FormattedValue,
                                    switchFlag: r.Cells[x + 7].FormattedValue, // Toggle-e
                                    info: r.Cells[x + 8].FormattedValue, // Toggle value
                                    pFunction: r.Cells[x + 9].FormattedValue,
                                    popUpWarning: r.Cells[x + 10].FormattedValue,
                                    editable: false,
                                    label: r.Cells[x + 4].FormattedValue,
                                    fontColor: r.Cells[x + 6].FormattedValue,
                                    popup: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? false : true
                                }
                            },
                            (r, x) => {
                                return {
                                    value: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? r.Cells[x + 8].FormattedValue : '',
                                    iconOff: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? 'icon-x-rectangle' : r.Cells[x + 5].FormattedValue,
                                    icon: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? 'icon-check-rectangle' : r.Cells[x + 5].FormattedValue,
                                    skin: parseInt(r.Cells[x + 7].FormattedValue) === 1 ? 'CompanySettingsToggle_bpsp' : 'CompanySettingsToggleIcon_bpsp'
                                }
                            }
                        ]
                    }
                },
        },
    rocheBPSPCompanySettingsProductPopUpGridRow1Cell1Button: {
        init: {
            execute: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableProduct', 0),
                    y = x.buttonIcon,
                    z = x.iconColor;

                return {
                    icon: y,
                    iconColor: z
                };
            }
        },
    },
    rocheBPSPCompanySettingsProductPopUpGridRow2Cell1Text: {
        init: {
            execute: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableProduct', 0),
                    y = x.popUpMessage;

                return {
                    title: y,
                    body: '',
                };
            }
        },
    },
    rocheBPSPCompanySettingsProductPopUpGridRow3Cell1Text: {
        init: {
            execute: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableProduct', 0),
                    y = x.popUpWarning;

                return {
                    body: y,
                    title: '',
                };
            }
        },
    },
    rocheBPSPCompanySettingsProductPopUpGridRow4Cell1Button: {
        init: {
            execute: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableProduct', 0),
                    y = x.popUpOKText;

                return {
                    label: y,
                };
            }
        },
        launch: {
            url: (db) => `/api/v1/Processes('${Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableProduct', 0).tiProcess}')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableProduct', 0),
                    y = x.pFunction,
                    version = v('systemValueGlobalVersionKey');
                return `{
                            "Parameters": [
                                    {"Name": "pModule", "Value": "Product"},
                                    {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key')}"},
                                    {"Name": "pFunction", "Value": "${y}"},
                                     {"Name": "pVersion", "Value": "${version}"}
                            ]
                        }`;
            }
        }


    },
    rocheBPSPCompanySettingsProductPopUpGridRow5Cell1Cancel: {
        init: {
            execute: (db) => {
                let x = Utils.getGridTableCell('rocheBPSPCompanySettingsGridTableProduct', 0),
                    y = x.popUpCancelText;

                return {
                    label: y,
                };
            }
        },
    },
    rocheBPSPCompanySettingsCheckedOutPopUpGridRow4Cell1Button: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Company Settings CheckIn All')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) =>
                `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pModule", "Value": "Products"}
                        ]
                    }`
        }
    },
    rocheBPSPCompanySettingsCheckedOutIPPopUpGridRow4Cell1Button: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Company Settings CheckIn All')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) =>
                `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pModule", "Value": "Materials"}
                        ]
                    }`
        }
    },
    rocheBPSPCompanySettingsCheckedOutGridTableButton06: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Products GridTable CheckIn by User')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return `{
                        "Parameters": [
                                {"Name": "pUserID", "Value": "${db.activeUserName.split('/')[0]}/${Utils.getGridTableCell('rocheBPSPCompanySettingsCheckedOutGridTable', 3).title}"},
                                {"Name": "pProduct", "Value": "${Utils.getGridTableCell('rocheBPSPCompanySettingsCheckedOutGridTable', 0).productCode}"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pReceiver", "Value": "${Utils.getGridTableCell('rocheBPSPCompanySettingsCheckedOutGridTable', 2).title}"},
                                {"Name": "pVersion", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1CellVersionsDropbox', 'key')}"}
                        ]
                    }`
                }
            },
    },
    rocheBPSPCompanySettingsCheckedOutGridTableIPPlanningButton06: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Materials GridTable CheckIn by User')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return `{
                          "Parameters": [
                                  {"Name": "pUserID", "Value": "${db.activeUserName.split('/')[0]}/${Utils.getGridTableCell('rocheBPSPCompanySettingsCheckedOutGridTableIPPlanning', 3).title}"},
                                  {"Name": "pMaterial", "Value": "${Utils.getGridTableCell('rocheBPSPCompanySettingsCheckedOutGridTableIPPlanning', 0).materialCode}"},
                                  {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1Cell2DropBox', 'key')}"},
                                  {"Name": "pReceiver", "Value": "${Utils.getGridTableCell('rocheBPSPCompanySettingsCheckedOutGridTableIPPlanning', 2).title}"},
                                  {"Name": "pVersion", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsCheckedOutGridRow1CellVersionsDropbox', 'key')}"}
                          ]
                      }`
                }
            },
    },
    rocheBPSPCompanySettingsGridRow6Cell1Button: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Company Settings Message')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return `{
                          "Parameters": [
                                  {"Name": "pMessage", "Value": "${v('rocheBPSPCompanySettingsGridRow5Cell1MessageInput.value') ? v('rocheBPSPCompanySettingsGridRow5Cell1MessageInput.value') : ''}"},
                                  {"Name": "pTitle", "Value": "${v('rocheBPSPCompanySettingsGridRow4Cell1MessageInput.value') ? v('rocheBPSPCompanySettingsGridRow4Cell1MessageInput.value') : ''}"},
                                  {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key')}"}
                          ]
                      }`
                }
            },
    },
    rocheBPSPCompanySettingsGridRow9Cell1CustomerToggle:
        {
            initCondition: (db) => {
                let a = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGridRow1Cell2DropBox');
                return a;
            },
            initDefault: (db) => {
                return [];
            },
            init: {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key'); //${company}
                    return `{"MDX":"
                                    SELECT 
                                        {[Measures Company Information].[Measures Company Information].[Lock Customer planning]} 
                                        PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON COLUMNS , 
                                        {[Companies].[Companies].[All Companies^${company}]} 
                                        PROPERTIES [Companies].[Companies].[Member description]  ON ROWS 
                                    FROM [Company Information] 
                                    WHERE 
                                        (
                                        [Versions].[Versions].[Live]
                                        )
                                "}`
                },
                parsingControl: {
                    type: 'object',
                    query: {
                        value: (r, x) => {
                            return parseInt(r.Cells[x].FormattedValue) > 0 ? 1 : 0
                        }
                    }
                }
            },
            switch: {
                url: (db) => `/api/v1/Processes('MODULE - UI - Company Settings Control')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    return `{
                            "Parameters": [
                                    {"Name": "pModule", "Value": "Customer"},
                                    {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGridRow1Cell2DropBox', 'key')}"},
                                    {"Name": "pFunction", "Value": "Lock"}
                            ]
                        }`;
                }
            }
        },
    rocheBPSPAccountsOverviewGridRow1Cell3Edit: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPAccountsOverviewGridRow1Cell2DropBox');
            return a;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return {visible: parseInt(Utils.getDropBoxSelectedItemAttribute('rocheBPSPAccountsOverviewGridRow1Cell2DropBox', 'locked')) > 0 ? false : true};
            }
        }
    },

    rocheBPSPReportKPIGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                SELECT 
                   {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],
                   [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]} 
                  ON COLUMNS , 
                   {TM1SubsetToSet([Companies].[Companies], 'All Active')}  
                  ON ROWS 
                FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPReportKPIPageInit: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT 
                        {[Versions].[Versions].[Live]} 
                    PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                    NON EMPTY 
                        {[Measures Company Information].[Measures Company Information].[Products Hierarchy]} 
                        PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON ROWS 
                    FROM [Company Information] 
                WHERE 
                (
                    [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key')}]
                )
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            Utils.setWidgetValue('systemValueGlobalCompanyProductPlanVersion', r.Cells[0].FormattedValue);
                            return true;
                        }
                    }
            }
        }
    },
    rocheBPSPReportKPIGridRow1Cell3DropBox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueReportSelectedReceiver', v('rocheBPSPReportKPIGridRow1Cell3DropBox.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "            
            SELECT 
           {[}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Member description],
           [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Receiver - Key]} 
          ON COLUMNS , 
           {TM1SubsetToSet([Receivers].[Receivers], 'zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key')} Report Receivers')}  
          ON ROWS 
        FROM [}ElementAttributes_Receivers] 

            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [],
                                selectedReceiver = v('systemValueReportSelectedReceiver'),
                                selected = selectedReceiver ? selectedReceiver : v('rocheBPSPReportKPIGridRow1Cell3DropBox.value');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPReportKPIGridRow1Cell5DropBox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueReportSelectedCurrency', v('rocheBPSPReportKPIGridRow1Cell5DropBox.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                SELECT
                   {[}ElementAttributes_Currency Keys].[}ElementAttributes_Currency Keys].Members}
                  ON COLUMNS ,
                   {TM1SubsetToSet([Currency Keys].[Currency Keys],
                    '${Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key')} Reporting Currencies')}
                  ON ROWS
                FROM [}ElementAttributes_Currency Keys]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [],
                                selectedCurrency = v('systemValueReportSelectedCurrency'),
                                selected = selectedCurrency ? selectedCurrency : v('rocheBPSPReportKPIGridRow1Cell5DropBox.value');
                            for (let i = 0; i < r.Cells.length; i = i + 1) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPReportKPIGridRow1Cell9Button: {
        init: {
            execute: (db) => {
                return {label: Widgets['activeUserName']};
            }
        }
    },
    rocheBPSPReportKPIInfoPopupText1: {
        initCondition: (db) => {
            return v('rocheBPSPReportKPIGridRow1Cell2DropBox.value.length') !== false;
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                    {"MDX":
                    "SELECT 
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Currency - Key]} 
                    ON COLUMNS , 
                        {[Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key')}]} 
                    ON ROWS 
                    FROM [}ElementAttributes_Companies] "}
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        title: (r, x) => {
                            return '<li>' + r.Cells[0].FormattedValue + '</li>';
                        }
                    }
            }
        }
    },
    rocheBPSPReportKPIInfoPopupText2: {
        initCondition: (db) => {
            return v('rocheBPSPReportKPIGridRow1Cell2DropBox.value.length') !== false;
        },
        initDefault: (db) => {
            return {};
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
              {"MDX":
                "SELECT 
                    {[Versions].[Versions].[Live]} 
                    PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                    {[Measures Company Information].[Measures Company Information].[Current Planning Event]} 
                    PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON ROWS 
                FROM [Company Information] 
                WHERE 
                  (
                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key')}]
                  )"}
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        title: (r, x) => {
                            return '<li>' + r.Cells[0].FormattedValue + '</li>';
                        }
                    }
            }
        }
    },
    rocheBPSPReportKPIGridRow4Cell1FocusButton: {
        init: {
            execute: (db) => {
                let g = Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).label === undefined ? 'Focus On Block' :
                    Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).label;
                return {
                    label: `${g}`,
                };
            }
        }
    },
    rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable: {
        initCondition: (db) => {
            return v('rocheBPSPReportKPIGridRow1Cell2DropBox.value');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                //let g = Widgets['systemValueSegmentedControlPeriodUnit'] === 'Yearly' ? 'rocheBPSPProductsCheckoutGridTableYearly' : 'rocheBPSPProductsCheckoutGridTableMonthly';
                //let productCode = Utils.getGridTableCell(g, 1).title;
                return `{"MDX":"
                    WITH
                    MEMBER [}ElementAttributes_Products].[}ElementAttributes_Products].[ProductCode] as 
                          [Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Element')
                    MEMBER [}ElementAttributes_Products].[}ElementAttributes_Products].[UILevel] as 
                          [Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget UI Level Format')

                    SELECT
                    {
                    [}ElementAttributes_Products].[}ElementAttributes_Products].[BPSP Budget Description],
                    [}ElementAttributes_Products].[}ElementAttributes_Products].[ProductCode],
                    [}ElementAttributes_Products].[}ElementAttributes_Products].[UILevel]
                    }
                    ON COLUMNS ,
                    {FILTER({[Products].[BPSP Budget].Members},
                    [Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Product Level - Name') = 'PL1'
                    or [Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Product Level - Name') = 'PL2'
                    or [Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Product Level - Name') = 'PL2a'
                    or [Products].[BPSP Budget].CurrentMember.Properties('BPSP Budget Product Level - Name') = 'PL3')}
                    ON ROWS FROM [}ElementAttributes_Products]
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 3,
                query: [
                    (r, x) => {
                        return {
                            label: r.Cells[x].FormattedValue,
                            productCode: r.Cells[x + 1].FormattedValue,
                            level: r.Cells[x + 2].FormattedValue,
                            skin: 'gridtable_hierarchy_shortcut_bpsp_' + r.Cells[x + 2].FormattedValue,
                        }
                    }]
            }
        }
    },

    rocheBPSPReportKPIGridVersionSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell2DropBox')
            return b
        },
        initDefault: (db) => {
            return []
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', v('rocheBPSPReportKPIGridVersionSelector.value'))
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridVersionSelector', 'key'))
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {FILTER(
                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                ,[Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key')}],
                [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion')
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                })
                            }
                            return result
                        }
                    }
            }
        }
    },


    rocheBPSPReportKPIGauge1: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell5DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridVersionSelector') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell3DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => {
                    let product = Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode === undefined ? 'PL1' :
                        Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode;
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key');
                    let receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell3DropBox', 'key');
                    let currency = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell5DropBox', 'name');
                    let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                        YearMinusOne = yearzero - 1;
                    let version = v('systemValueGlobalVersionKey');

                    return `
                    {"MDX":" 
                        WITH
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference] as
                        [Sales Report by Product].([Periods].[Periods].[${YearMinusOne}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW Invoice])
                        , FORMAT_STRING='##0,,'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] as
                        [Sales Report by Product].([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan])
                        , FORMAT_STRING='##0,,'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Min] as
                        IIF ( [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] < [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]
                        ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]*0.5
                        ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]*0.5)
                        , FORMAT_STRING='##0,,'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Max] as
                        IIF ( [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] > [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]
                        ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]*1.2
                        ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]*1.2)
                        , FORMAT_STRING='##0,,'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[%] as
                        [Sales Report by Product].([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Growth Final Sales Plan])
                        , FORMAT_STRING='#0.00%'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance] as
                        [Sales Report by Product].([Periods].[Periods].[${yearzero} - ${YearMinusOne}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan])
                        , FORMAT_STRING='##0,,\\" M\\"'
                        SELECT
                        {
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Min]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Max]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[%]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance])
                        }
                        ON COLUMNS ,
                        {[Products].[BPSP Budget].[${product}]}
                        PROPERTIES [Products].[BPSP Budget].[BPSP Budget Caption] ON ROWS
                        FROM [Sales Report by Product]
                        WHERE
                        (
                        [Versions].[Versions].[${version}],
                        [Companies].[Companies].[${company}],
                        [Receivers].[Receivers].[${receiver}],
                        [Currency Keys].[Currency Keys].[${currency}],
                        [Measures Sales Report by Product].[Measures Sales Report by Product].[Value]
                        )"}
                                    `;
                },
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            title: (r, x) => {
                                return (parseInt(v('systemValueGlobalStartingPlanYear')) - 1) + ' Actual';
                            },
                            values: (r, x) => {
                                return [
                                    app.utils.parseNumber(r.Cells[2].FormattedValue),
                                    app.utils.parseNumber(r.Cells[3].FormattedValue)
                                ];
                            },
                            valueLabels: (r, x) => {
                                return [
                                    r.Cells[4].FormattedValue,
                                    r.Cells[5].FormattedValue
                                ];
                            },
                            labels: (r, x) => {
                                return ['Diff.[%]', 'Var.'];

                            },
                            minRange: (r, x) => {
                                return app.utils.parseNumber(r.Cells[0].FormattedValue);

                            },
                            maxRange: (r, x) => {
                                return app.utils.parseNumber(r.Cells[1].FormattedValue);

                            }
                        }
                }

            },
    },
    rocheBPSPReportKPIGauge2: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell5DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridVersionSelector') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell3DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => {
                    let product = Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode === undefined ? 'PL1' :
                        Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode;
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key');
                    let receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell3DropBox', 'key');
                    let currency = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell5DropBox', 'name');
                    let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                        YearPlusOne = yearzero + 1;
                    let version = v('systemValueGlobalVersionKey');

                    return `
                    {"MDX":" 
                        WITH
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference] as
                        [Sales Report by Product].([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW T3])
                        , FORMAT_STRING='##0,,'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] as
                        [Sales Report by Product].([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan])
                        , FORMAT_STRING='##0,,'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Min] as
                        IIF ( [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] < [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]
                        ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]*0.5
                        ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]*0.5)
                        , FORMAT_STRING='##0,,'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Max] as
                        IIF ( [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] > [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]
                        ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]*1.2
                        ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]*1.2)
                        , FORMAT_STRING='##0,,'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[%] as
                        [Sales Report by Product].([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Ratio Final Plan vs T3])
                        , FORMAT_STRING='#0.00%'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance] as
                        [Sales Report by Product].([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance Final Plan vs T3])
                        , FORMAT_STRING='##0,,\\" M\\"'
                        SELECT
                        {
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Min]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Max]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[%]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance])
                        }
                        ON COLUMNS ,
                        {[Products].[BPSP Budget].[${product}]}
                        PROPERTIES [Products].[BPSP Budget].[BPSP Budget Caption] ON ROWS
                        FROM [Sales Report by Product]
                        WHERE
                        (
                        [Versions].[Versions].[${version}],
                        [Companies].[Companies].[${company}],
                        [Receivers].[Receivers].[${receiver}],
                        [Currency Keys].[Currency Keys].[${currency}],
                        [Measures Sales Report by Product].[Measures Sales Report by Product].[Value]
                        )"
                        }`;
                },
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            title: (r, x) => {
                                return v('systemValueGlobalStartingPlanYear') + ' T3';
                            },
                            values: (r, x) => {
                                return [
                                    app.utils.parseNumber(r.Cells[2].FormattedValue),
                                    app.utils.parseNumber(r.Cells[3].FormattedValue)
                                ];
                            },
                            valueLabels: (r, x) => {
                                return [
                                    r.Cells[4].FormattedValue,
                                    r.Cells[5].FormattedValue
                                ];
                            },
                            labels: (r, x) => {
                                return ['Diff.[%]', 'Var.'];

                            },
                            minRange: (r, x) => {
                                return app.utils.parseNumber(r.Cells[0].FormattedValue);

                            },
                            maxRange: (r, x) => {
                                return app.utils.parseNumber(r.Cells[1].FormattedValue);

                            }
                        }
                }

            },
    },
    rocheBPSPReportKPIGauge3: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell5DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridVersionSelector') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell3DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => {
                    let product = Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode === undefined ? 'PL1' :
                        Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode;
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key');
                    let receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell3DropBox', 'key');
                    let currency = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell5DropBox', 'name');
                    let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear);
                    let version = v('systemValueGlobalVersionKey');

                    return `
                    {"MDX":" WITH
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference] as
                    [Sales Report by Product].([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[BW T0])
                    , FORMAT_STRING='##0,,'
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] as
                    [Sales Report by Product].([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan])
                    , FORMAT_STRING='##0,,'
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Min] as
                    IIF ( [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] < [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]
                    ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]*0.5
                    ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]*0.5)
                    , FORMAT_STRING='##0,,'
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Max] as
                    IIF ( [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] > [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]
                    ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]*1.2
                    ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]*1.2)
                    , FORMAT_STRING='##0,,'
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[%] as
                    [Sales Report by Product].([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Ratio Final Plan vs T0])
                    , FORMAT_STRING='#0.00%'
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance] as
                    [Sales Report by Product].([Periods].[Periods].[${yearzero}],[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance Final Plan vs T0])
                    , FORMAT_STRING='##0,,\\" M\\"'
                    SELECT
                    {([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Min]),
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Max]),
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]),
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]),
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[%]),
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance])}
                    ON COLUMNS ,
                    {[Products].[BPSP Budget].[${product}]}
                    PROPERTIES [Products].[BPSP Budget].[BPSP Budget Caption] ON ROWS
                    FROM [Sales Report by Product]
                    WHERE(
                    [Versions].[Versions].[${version}],
                    [Companies].[Companies].[${company}],
                    [Receivers].[Receivers].[${receiver}],
                    [Currency Keys].[Currency Keys].[${currency}],
                    [Measures Sales Report by Product].[Measures Sales Report by Product].[Value])
                    "}
                    `;
                },
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            title: (r, x) => {
                                return v('systemValueGlobalStartingPlanYear') + ' T0';
                            },
                            values: (r, x) => {
                                return [
                                    app.utils.parseNumber(r.Cells[2].FormattedValue),
                                    app.utils.parseNumber(r.Cells[3].FormattedValue)
                                ];
                            },
                            valueLabels: (r, x) => {
                                return [
                                    r.Cells[4].FormattedValue,
                                    r.Cells[5].FormattedValue
                                ];
                            },
                            labels: (r, x) => {
                                return ['Diff.[%]', 'Var.'];

                            },
                            minRange: (r, x) => {
                                return app.utils.parseNumber(r.Cells[0].FormattedValue);

                            },
                            maxRange: (r, x) => {
                                return app.utils.parseNumber(r.Cells[1].FormattedValue);

                            }
                        }
                }

            },
    },
    rocheBPSPReportKPIGauge4: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell5DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridVersionSelector') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell3DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body: (db) => {
                    let product = Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode === undefined ? 'PL1' :
                        Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode;
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key');
                    let receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell3DropBox', 'key');
                    let currency = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell5DropBox', 'name');
                    let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear);
                    let version = v('systemValueGlobalVersionKey');

                    return `
                    {"MDX":" 
                      WITH
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference] as
                    [Sales Report by Product].([Periods].[Periods].[${yearzero}],
                    [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan Reference])
                    , FORMAT_STRING='##0,,'
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] as
                    [Sales Report by Product].([Periods].[Periods].[${yearzero}],
                    [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan])
                    , FORMAT_STRING='##0,,'
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Min] as
                    IIF ( [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] < [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]
                    ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]*0.5
                    ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]*0.5)
                    , FORMAT_STRING='##0,,'
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Max] as
                    IIF ( [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] > [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]
                    ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]*1.2
                    ,[LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]*1.2)
                    , FORMAT_STRING='##0,,'
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[%] as
                    [Sales Report by Product].([Periods].[Periods].[${yearzero}],
                    [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Ratio Final Plan vs Plan Reference])
                    , FORMAT_STRING='#0.00%'
                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance] as
                    [Sales Report by Product].([Periods].[Periods].[${yearzero}],
                    [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance Final Plan vs Plan Reference])
                    , FORMAT_STRING='##0,,\\" M\\"'
                    SELECT{
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Min]),
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Max]),
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Reference]),
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]),
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[%]),
                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Variance])}
                    ON COLUMNS ,
                    {[Products].[BPSP Budget].[${product}]}
                    PROPERTIES [Products].[BPSP Budget].[BPSP Budget Caption] ON ROWS
                    FROM [Sales Report by Product]
                    WHERE
                    (
                    [Versions].[Versions].[${version}],
                    [Companies].[Companies].[${company}],
                    [Receivers].[Receivers].[${receiver}],
                    [Currency Keys].[Currency Keys].[${currency}],
                    [Measures Sales Report by Product].[Measures Sales Report by Product].[Value]
                    )"}
                    `;
                },
                parsingControl: {
                    type: 'object',
                    query:
                        {
                            title: (r, x) => {
                                return v('systemValueGlobalStartingPlanYear') + ' Last Stored Plan';
                            },
                            values: (r, x) => {
                                return [
                                    app.utils.parseNumber(r.Cells[2].FormattedValue),
                                    app.utils.parseNumber(r.Cells[3].FormattedValue)
                                ];
                            },
                            valueLabels: (r, x) => {
                                return [
                                    r.Cells[4].FormattedValue,
                                    r.Cells[5].FormattedValue
                                ];
                            },
                            labels: (r, x) => {
                                return ['Diff.[%]', 'Var.'];

                            },
                            minRange: (r, x) => {
                                return app.utils.parseNumber(r.Cells[0].FormattedValue);

                            },
                            maxRange: (r, x) => {
                                return app.utils.parseNumber(r.Cells[1].FormattedValue);

                            }
                        }
                }

            },
    },
    rocheBPSPReportKPICombo1: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell5DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridVersionSelector') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell3DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init: [
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/MonthName3C))`,
                type: 'POST',
                body: (db) => {
                    let product = Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode === undefined ? 'PL1' :
                        Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode;
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key');
                    let receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell3DropBox', 'key');
                    let currency = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell5DropBox', 'name');
                    let version = v('systemValueGlobalVersionKey');
                    return `
                                    {"MDX":" 
                                    WITH
                                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Plan] as
                                    [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]/1000000
                                    , FORMAT_STRING='##0.00'
                                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Customer Plan Live] as
                                    [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Live Customer Sales Plan]/1000000
                                    , FORMAT_STRING='##0.00'
                                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Submitted Customer Plan w Marketing Adj] as
                                    [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Total Customer plan w Marketing Adj]/1000000
                                    , FORMAT_STRING='##0.00'
                                    SELECT
                                    {
                                    ([Periods].[Periods].[202101]),
                                    ([Periods].[Periods].[202102]),
                                    ([Periods].[Periods].[202103]),
                                    ([Periods].[Periods].[202104]),
                                    ([Periods].[Periods].[202105]),
                                    ([Periods].[Periods].[202106]),
                                    ([Periods].[Periods].[202107]),
                                    ([Periods].[Periods].[202108]),
                                    ([Periods].[Periods].[202109]),
                                    ([Periods].[Periods].[202110]),
                                    ([Periods].[Periods].[202111]),
                                    ([Periods].[Periods].[202112])
                                    }
                                    PROPERTIES [Periods].[Periods].[Caption] ON COLUMNS ,
                                    {
                                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Plan])
                                    }
                                    PROPERTIES [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Caption] ON ROWS
                                    FROM [Sales Report by Product]
                                    WHERE
                                    (
                                    [Versions].[Versions].[${version}],
                                    [Companies].[Companies].[${company}],
                                    [Receivers].[Receivers].[${receiver}],
                                    [Currency Keys].[Currency Keys].[${currency}],
                                    [Products].[BPSP Budget].[${product}],
                                    [Measures Sales Report by Product].[Measures Sales Report by Product].[Value]
                                    )
                                    "}`;
                },
                parsingControl: {
                    type: 'list',
                    query:
                        (r, x) => {
                            return {
                                value: r.Cells[x].Members[7].Attributes['Month Name 3C'],
                                label: r.Cells[x].Members[7].Attributes['Month Name 3C']
                            };
                        }
                }

            },
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => {
                    let product = Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode === undefined ? 'PL1' :
                        Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode;
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key');
                    let receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell3DropBox', 'key');
                    let currency = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell5DropBox', 'name');
                    let version = v('systemValueGlobalVersionKey');
                    let period = v('rocheBPSPReportKPIGridRow5Cell1GridRow4Cell1Segmented').value ? Utils.parseNumber(db.systemValueGlobalStartingPlanYear) + v('rocheBPSPReportKPIGridRow5Cell1GridRow4Cell1Segmented').value
                        : Utils.parseNumber(db.systemValueGlobalStartingPlanYear);
                    return `
                                    {"MDX":" 
                                    WITH
                                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Plan] as
                                    [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]/1000000
                                    , FORMAT_STRING='##0.00'
                                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Customer Plan Live] as
                                    [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Live Customer Sales Plan]/1000000
                                    , FORMAT_STRING='##0.00'
                                    MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Submitted Customer Plan w Marketing Adj] as
                                    [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Total Customer plan w Marketing Adj]/1000000
                                    , FORMAT_STRING='##0.00'
                                    SELECT
                                    {
                                     EXCEPT({
                                     TM1DRILLDOWNMEMBER({
                                     [Periods].[Periods].[${period}]}, ALL, RECURSIVE )},
                                      {[Periods].[Periods].[${period}]})
                                     }
                                    PROPERTIES [Periods].[Periods].[Caption] ON COLUMNS ,
                                    {
                                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Plan]),
                                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Customer Plan Live]),
                                    ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Submitted Customer Plan w Marketing Adj])
                                    }
                                    PROPERTIES [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Caption] ON ROWS
                                    FROM [Sales Report by Product]
                                    WHERE
                                    (
                                    [Versions].[Versions].[${version}],
                                     [Companies].[Companies].[${company}],
                                    [Receivers].[Receivers].[${receiver}],
                                    [Currency Keys].[Currency Keys].[${currency}],
                                    [Products].[BPSP Budget].[${product}],
                                    [Measures Sales Report by Product].[Measures Sales Report by Product].[Value]
                                    ) 
                                    "}`
                },
                parsingControl: {
                    type: 'script',
                    script: (r) => {
                        let results = [], i;
                        for (i = 0; i < 12; ++i) {
                            results.push([
                                {value: r.Cells[i].FormattedValue},
                                {value: r.Cells[i + 12].FormattedValue},
                                {value: r.Cells[i + 24].FormattedValue}
                            ]);
                        }
                        return results;
                    }
                }
            }
        ]
    },
    rocheBPSPReportKPIGridRow5Card1: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell5DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridVersionSelector') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell3DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db, widgetId) => {
                let product = Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode === undefined ? 'PL1' :
                        Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode,
                    company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key'),
                    receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell3DropBox', 'key'),
                    currency = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell5DropBox', 'name'),
                    period = Utils.parseNumber(db.systemValueGlobalStartingPlanYear) + (parseInt(widgetId.charAt(widgetId.length - 1)) - 1);
                let version = v('systemValueGlobalVersionKey');
                return `
                    {"MDX":"
                        WITH
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan] as
                        [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]
                        , FORMAT_STRING='#,##0,,\\" M ${currency}\\"'
                        MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[%] as
                        [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Growth Final Sales Plan]
                        , FORMAT_STRING='#0.00%'
                        SELECT
                        {[Periods].[Periods].[${period}]}
                        PROPERTIES [Products].[BPSP Budget].[BPSP Budget Caption] ON COLUMNS ,
                        {([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Plan]),
                        ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[%])}
                        ON ROWS
                        FROM [Sales Report by Product]
                        WHERE
                        ([Versions].[Versions].[${version}],
                        [Companies].[Companies].[${company}],
                        [Receivers].[Receivers].[${receiver}],
                        [Currency Keys].[Currency Keys].[${currency}],
                        [Products].[BPSP Budget].[${product}],
                        [Measures Sales Report by Product].[Measures Sales Report by Product].[Value])
                    "}
            `;
            },
            parsingControl: {
                type: 'object',
                query:
                    {
                        title: (r, x) => {
                            return r.Cells[0].FormattedValue;
                        },
                        body: (r, x) => {
                            return r.Cells[1].FormattedValue;
                        }
                    }
            }
        }
    },
    rocheBPSPReportKPIGridRow5Card2: {
        reference: 'rocheBPSPReportKPIGridRow5Card1'
    },
    rocheBPSPReportKPIGridRow5Card3: {
        reference: 'rocheBPSPReportKPIGridRow5Card1'
    },
    rocheBPSPReportKPIGridRow5Card4: {
        reference: 'rocheBPSPReportKPIGridRow5Card1'
    },
    rocheBPSPReportKPIGridRow5Year1: {
        init: {
            execute: (db, widgetId) => {
                let g = Utils.parseNumber(db.systemValueGlobalStartingPlanYear) + (parseInt(widgetId.charAt(widgetId.length - 1)) - 1);
                return {title: g};
            }
        }
    },
    rocheBPSPReportKPIGridRow5Year2: {
        reference: 'rocheBPSPReportKPIGridRow5Year1'
    },
    rocheBPSPReportKPIGridRow5Year3: {
        reference: 'rocheBPSPReportKPIGridRow5Year1'
    },
    rocheBPSPReportKPIGridRow5Year4: {
        reference: 'rocheBPSPReportKPIGridRow5Year1'
    },
    rocheBPSPReportKPIBarChart1: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell5DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridVersionSelector') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPReportKPIGridRow1Cell3DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db, widgetId) => {

                    let productCode = Utils.getGridTableCell('rocheBPSPReportKPIMaterialSelectorShortcutPopupGridTable', 0).productCode,
                        product = productCode === undefined ? 'PL1' : productCode,
                        company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell2DropBox', 'key'),
                        receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell3DropBox', 'key'),
                        currency = Utils.getDropBoxSelectedItemAttribute('rocheBPSPReportKPIGridRow1Cell5DropBox', 'name'),
                        period = Utils.parseNumber(db.systemValueGlobalStartingPlanYear) + (parseInt(widgetId.charAt(widgetId.length - 1)) - 1);
                    let version = v('systemValueGlobalVersionKey');
                    return `
                                            {"MDX":"WITH
                                            MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Customer Plan Live] as
                                            [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Live Customer Sales Plan]/1000000
                                            , FORMAT_STRING='#,##0.00'
                                            MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Submitted Customer Plan] as
                                            [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Customer Sales Plan]/1000000
                                            , FORMAT_STRING='#,##0.00'
                                            MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Customer Plan w Marketing Adj] as
                                            [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Total Customer plan w Marketing Adj]/1000000
                                            , FORMAT_STRING='#,##0.00'
                                            MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Last Stored Plan] as
                                            [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Last stored Final Plan]/1000000
                                            , FORMAT_STRING='#,##0.00'
                                            MEMBER [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Plan] as
                                            [LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Sales Plan]/1000000
                                            , FORMAT_STRING='#,##0.00'
                                            SELECT
                                            {[Periods].[Periods].[${period}]}
                                            PROPERTIES [Products].[BPSP Budget].[BPSP Budget Caption] ON COLUMNS ,
                                            {
                                            ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Customer Plan Live]),
                                            ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Submitted Customer Plan]),
                                            ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Customer Plan w Marketing Adj]),
                                            ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Last Stored Plan]),
                                            ([LineItems Sales Report by Product].[LineItems Sales Report by Product].[Final Plan])
                                            }
                                            ON ROWS
                                            FROM [Sales Report by Product]
                                            WHERE
                                            (
                                            [Versions].[Versions].[${version}],
                                            [Companies].[Companies].[${company}],
                                            [Receivers].[Receivers].[${receiver}],
                                            [Currency Keys].[Currency Keys].[${currency}],
                                            [Products].[BPSP Budget].[${product}],
                                            [Measures Sales Report by Product].[Measures Sales Report by Product].[Value]
                                            )"}`
                },
                parsingControl: {
                    type: 'script',
                    script: (r) => {
                        let results = [], maxValue = 0, rightValue;
                        for (let x = 0; x < r.Cells.length; ++x) {
                            rightValue = app.utils.parseNumber(r.Cells[x].FormattedValue);
                            results.push({
                                leftValue: 0,
                                rightValue: rightValue,
                                legendLabel: r.Cells[x].Members[6].Name + ': <b>' + rightValue + 'M</b>'
                            });
                            if (rightValue > maxValue) {
                                maxValue = rightValue;
                            }
                        }
                        return {dataset: results, baseValue: 0, xMax: maxValue * 1.3};
                    }
                }
            }
    },
    rocheBPSPReportKPIBarChart2: {
        reference: 'rocheBPSPReportKPIBarChart1'
    },
    rocheBPSPReportKPIBarChart3: {
        reference: 'rocheBPSPReportKPIBarChart1'
    },
    rocheBPSPReportKPIBarChart4: {
        reference: 'rocheBPSPReportKPIBarChart1'
    },
    rocheBPSPCustomerReportGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                SELECT 
                   {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],
                   [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]} 
                  ON COLUMNS , 
                   {TM1SubsetToSet([Companies].[Companies], 'All Active')}
                  ON ROWS 
                FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },

    rocheBPSPCustomerReportGridRow1Cell3DropBox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCustomerReportGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueReportSelectedReceiver', v('rocheBPSPCustomerReportGridRow1Cell3DropBox.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "            
            SELECT 
           {[}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Member description],
                [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Receiver - Key]} 
          ON COLUMNS , 
           {TM1SubsetToSet([Receivers].[Receivers], 'zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridRow1Cell2DropBox', 'key')} Report Receivers')}  
          ON ROWS 
        FROM [}ElementAttributes_Receivers]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [],
                                selectedReceiver = v('systemValueReportSelectedReceiver'),
                                selected = selectedReceiver ? selectedReceiver : v('rocheBPSPCustomerReportGridRow1Cell2DropBox.value');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },

    rocheBPSPCustomerReportGridVersionSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomerReportGridRow1Cell2DropBox')
            return b
        },
        initDefault: (db) => {
            return []
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', v('rocheBPSPCustomerReportGridVersionSelector.value'))
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridVersionSelector', 'key'))
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {FILTER(
                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                ,[Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridRow1Cell2DropBox', 'key')}],
                [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridRow1Cell2DropBox', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion')
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                })
                            }
                            return result
                        }
                    }
            }
        }
    },


    rocheBPSPCustomerReportGridRow1Cell9Button: {
        init: {
            execute: (db) => {
                return {label: Widgets['activeUserName']};
            }
        }
    },

    rocheBPSPCustomerReportGridTable: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomerReportGridRow1Cell3DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPCustomerReportGridVersionSelector') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl', 'selected')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => {
                    let version = v('systemValueGlobalVersionKey');
                    let product = Utils.getGridTableCell('rocheBPSPCustomerReportMaterialSelectorShortcutPopupGridTable', 0).productCode === undefined ? 'PL1' :
                        Utils.getGridTableCell('rocheBPSPCustomerReportMaterialSelectorShortcutPopupGridTable', 0).productCode;
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridRow1Cell2DropBox', 'key');
                    let receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridRow1Cell3DropBox', 'key');
                    let budget = db.systemValueGlobalCompanyProductPlanVersion;
                    let selector = v('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl.selected') === 'Live' ? 'Live' : 'Submitted Customer Plan';
                    let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear), // 2021
                        YearMinusOne = yearzero - 1,
                        YearPlusOne = yearzero + 1,
                        YearPlusTwo = yearzero + 2,
                        YearPlusThree = yearzero + 3;
                    let segmentedOne = v('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl.selected') === 'Live' ? 'Final Sales Plan' : 'Submitted Final Sales Plan';
                    let segmentedTwo = v('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl.selected') === 'Live' ? 'Growth Final Sales Plan' : 'Growth Submitted Final Sales Plan';

                    return `{"MDX":"
                        WITH
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[TerritoryName] as
                                [Territories].[Territories].CurrentMember.Properties('Caption')
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[TerritoryFormat] as
                                [Territories].[Territories].CurrentMember.Properties('UI Level Format')
                        -- Flag to show/hide link to the customer planning
                            MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ShowLink] AS
                                IIF( IsLeaf( [Territories].[Territories].CurrentMember), '1', '0')
                        -- Columns containing metadata used for UI formatting
                            SET InfoColumns AS
                                {
                                {[Versions].[Versions].[${version}]}
                                *
                                {[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[TerritoryName],
                                [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[TerritoryFormat],
                                [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[ShowLink]}
                                *
                                {[Periods].[Periods].[${yearzero}]}
                                }
                        -- Data columns
                            SET RefDataColumns AS
                                {
                                {[Versions].[Versions].[${version}]}
                                *
                                {([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[REXIS Invoice],[Periods].[Periods].[${YearMinusOne}]),
                                ([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[REXIS Invoice],[Periods].[Periods].[${yearzero}]),
                                ([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Previous Final Sales],[Periods].[Periods].[${yearzero}])}
                                }
                            SET ReportDataColumns AS
                                {
                                {[Versions].[Versions].[${version}]}
                                *
                                {[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[${segmentedOne}],
                                [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[${segmentedTwo}]}
                                *
                                {[Periods].[Periods].[${yearzero}],
                                [Periods].[Periods].[${YearPlusOne}],
                                [Periods].[Periods].[${YearPlusTwo}],
                                [Periods].[Periods].[${YearPlusThree}]}
                                }
                        SELECT
                            Union( Union({InfoColumns}
                                , {RefDataColumns}, All), {ReportDataColumns}, All)
                            ON COLUMNS,
                            NON EMPTY
                           {TM1DRILLDOWNMEMBER({[Territories].[Territories].[All Territories ${company}]}, All, Recursive)}
                           ON ROWS
                        FROM [Sales Plan by Customer]
                        WHERE
                           (
                           [Products].[BPSP ${budget}].[${product}],
                           [Receivers].[Receivers].[${receiver}],
                           [Companies].[Companies].[${company}],
                           [Customers Plan].[Customers Plan].[All Customers Plan ${company}],
                           [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value]
                           )
                    "}`;
                },
                parsingControl: {
                    type: 'matrix',
                    length: 14,
                    query: [
                        (r, x) => {
                            return {
                                label: r.Cells[x].FormattedValue,
                                uiLevel: r.Cells[x + 1].FormattedValue,
                                skin: 'gridtable_hierarchy_bpsp_' + r.Cells[x + 1].FormattedValue,
                                showLink: r.Cells[x + 2].FormattedValue
                            }
                        },
                        (r, x) => {
                            return {
                                enabled: r.Cells[x + 2].FormattedValue === "1",
                                icon: r.Cells[x + 2].FormattedValue === "1" ? 'icon-jump' : ''
                            }
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 3].FormattedValue}
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 4].FormattedValue}
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 5].FormattedValue}
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 6].FormattedValue}
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 7].FormattedValue}
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 8].FormattedValue}
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 9].FormattedValue}
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 10].FormattedValue}
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 11].FormattedValue}
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 12].FormattedValue}
                        },
                        (r, x) => {
                            return {title: r.Cells[x + 13].FormattedValue}
                        }
                    ]
                }
            }
    },

    rocheBPSPProductReportGridTableHeaderText2019: {
        init: {
            execute: (db) => {
                let g = Utils.parseNumber(db.systemValueGlobalStartingPlanYear) - 2;
                return {title: `${g}`};
            }
        }
    },

    rocheBPSPCustomerReportMaterialSelectorShortcutPopupGridTable: {
        initCondition: (db) => {
            return v('rocheBPSPCustomerReportGridRow1Cell2DropBox.value');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
            type: 'POST',
            body: (db) => {
                let budget = db.systemValueGlobalCompanyProductPlanVersion;
                return `{"MDX":"
                    WITH
                    MEMBER [}ElementAttributes_Products].[}ElementAttributes_Products].[ProductCode] as 
                          [Products].[BPSP Budget].CurrentMember.Properties('BPSP ${budget} Element')
                    MEMBER [}ElementAttributes_Products].[}ElementAttributes_Products].[UILevel] as 
                          [Products].[BPSP Budget].CurrentMember.Properties('BPSP ${budget} UI Level Format')
                    SELECT
                    {
                    [}ElementAttributes_Products].[}ElementAttributes_Products].[BPSP ${budget} Description],
                    [}ElementAttributes_Products].[}ElementAttributes_Products].[ProductCode],
                    [}ElementAttributes_Products].[}ElementAttributes_Products].[UILevel]
                    }
                    ON COLUMNS ,
                    {FILTER({[Products].[BPSP ${budget}].Members},
                    [Products].[BPSP ${budget}].CurrentMember.Properties('BPSP ${budget} Product Level - Name') = 'PL1'
                    or [Products].[BPSP ${budget}].CurrentMember.Properties('BPSP ${budget} Product Level - Name') = 'PL2'
                    or [Products].[BPSP ${budget}].CurrentMember.Properties('BPSP ${budget} Product Level - Name') = 'PL2a'
                    or [Products].[BPSP ${budget}].CurrentMember.Properties('BPSP ${budget} Product Level - Name') = 'PL3')}
                    ON ROWS FROM [}ElementAttributes_Products]
            "}`
            },
            parsingControl: {
                type: 'matrix',
                length: 3,
                query: [
                    (r, x) => {
                        return {
                            label: r.Cells[x].FormattedValue,
                            productCode: r.Cells[x + 1].FormattedValue,
                            level: r.Cells[x + 2].FormattedValue,
                            skin: 'gridtable_hierarchy_shortcut_bpsp_' + r.Cells[x + 2].FormattedValue,
                        }
                    }]
            }
        }
    },

    rocheBPSPCustomerReportGridRow4Cell1FocusButton: {
        init: {
            execute: (db) => {
                let g = Utils.getGridTableCell('rocheBPSPCustomerReportMaterialSelectorShortcutPopupGridTable', 0).label === undefined ? 'Focus On Block' :
                    Utils.getGridTableCell('rocheBPSPCustomerReportMaterialSelectorShortcutPopupGridTable', 0).label;
                return {
                    label: `${g}`,
                };
            }
        }
    },

    rocheBPSPCustomerReportGridRow5Cell1SegmentedControl: {
        init: {
            execute: (db) => {
                return [
                    {
                        label: 'Submitted',
                        selected: v('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl.selected') === 'Submitted' || v('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl.selected') === false
                    },
                    {
                        label: 'Live',
                        selected: v('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl.selected') === 'Live'
                    },
                ];
            }
        },

    },

    rocheBPSPCustomerReport: {
        getFileName: (db) => {
            let s = [], fileName;
            s.push('Customer_Report')
            s.push(Utils.getFormattedDate(new Date(), '_', true));
            s.push(db.activeUserName);
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridRow1Cell2DropBox', 'key'));
            return s.join('_').replaceAll(':', '_').replaceAll(' ', '_').replaceAll('/', '_');
        }
    },

    rocheBPSPCustomerReportChart: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomerReportGridRow1Cell3DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPCustomerReportGridVersionSelector') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl', 'selected');
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: [
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/Caption))`,
                type: 'POST',
                body: (db) => {
                    let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear), // 2021
                        YearPlusOne = yearzero + 1,
                        YearPlusTwo = yearzero + 2,
                        YearPlusThree = yearzero + 3;
                    return `{"MDX":"         
                                    SELECT
                                    {TM1FILTERBYLEVEL(
                                        {TM1DRILLDOWNMEMBER(
                                            {
                                                [Periods].[Periods].[${yearzero}]
                                                ,[Periods].[Periods].[${YearPlusOne}]
                                                ,[Periods].[Periods].[${YearPlusTwo}]
                                                ,[Periods].[Periods].[${YearPlusThree}]
                                            }
                                            , All, Recursive)}
                                        , 0)}
                                    ON COLUMNS
                                FROM [}ElementAttributes_Periods]
                                WHERE
                                    (
                                    [}ElementAttributes_Periods].[}ElementAttributes_Periods].[Month Key]
                                    )
                                "}`;
                },
                parsingControl: {
                    type: 'list',
                    query:
                        (r, x) => {
                            return {
                                value: r.Cells[x].Members[1].Name,
                                label: r.Cells[x].Members[1].Attributes['Caption']
                            };
                        }
                }

            },
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => {
                    let version = v('systemValueGlobalVersionKey');
                    let product = Utils.getGridTableCell('rocheBPSPCustomerReportMaterialSelectorShortcutPopupGridTable', 0).productCode === undefined ? 'PL1' :
                        Utils.getGridTableCell('rocheBPSPCustomerReportMaterialSelectorShortcutPopupGridTable', 0).productCode;
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridRow1Cell2DropBox', 'key');
                    let receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridRow1Cell3DropBox', 'key');
                    let budget = db.systemValueGlobalCompanyProductPlanVersion;
                    let selector = v('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl.selected') === 'Live' ? 'Live' : 'Submitted Customer Plan';
                    let yearzero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear), // 2021
                        YearMinusOne = yearzero - 1,
                        YearMinusTwo = yearzero - 2,
                        YearPlusOne = yearzero + 1,
                        YearPlusTwo = yearzero + 2,
                        YearPlusThree = yearzero + 3,
                        yearPlusFour = yearzero + 4;
                    return `{"MDX":"
                            WITH
                                MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Base Minus OTE] AS
                                    IIF([LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[One Time Event] < 0
                                        , [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Base Plan]
                                        +[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[One Time Event]
                                        , [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Base Plan])
                                    , FORMAT_STRING='#,##0'
                                MEMBER [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Base Plus OTE] AS
                                    IIF ( [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[One Time Event] > 0
                                        , [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Base Plan]
                                        +[LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[One Time Event]
                                        , [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Base Plan])
                                    , FORMAT_STRING='#,##0'
                            SELECT
                                {
                                    [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Base Minus OTE],
                                    [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Base Plus OTE],
                                    [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Final Sales Plan],
                                    [LineItems Sales Plan by Customer].[LineItems Sales Plan by Customer].[Submitted Sales Plan]
                                }
                                ON COLUMNS ,
                                {TM1FILTERBYLEVEL(
                                    {TM1DRILLDOWNMEMBER(
                                        {
                                            [Periods].[Periods].[${yearzero}]
                                            ,[Periods].[Periods].[${YearPlusOne}]
                                            ,[Periods].[Periods].[${YearPlusTwo}]
                                            ,[Periods].[Periods].[${YearPlusThree}]
                                        }
                                        , All, Recursive)}
                                    , 0)}
                                ON ROWS
                            FROM [Sales Plan by Customer]
                            WHERE
                                (
                                [Versions].[Versions].[${version}],
                                [Companies].[Companies].[${company}],
                                [Receivers].[Receivers].[${receiver}],
                                [Territories].[Territories].[All Territories ${company}],
                                [Products].[BPSP ${budget}].[${product}],
                                [Customers Plan].[Customers Plan].[All Customers Plan ${company}],
                                [Measures Sales Plan by Customer].[Measures Sales Plan by Customer].[Value]
                                )
            "}`;
                }
                ,
                parsingControl: {
                    type: 'matrix',
                    length: 4,
                    query: [
                        (r, x) => {
                            return {value: r.Cells[x].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 1].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 2].FormattedValue};
                        }, (r, x) => {
                            return {value: r.Cells[x + 3].FormattedValue};
                        }]
                }

            }
        ],
    },


    rocheBPSPCustomerReportGridRow4Cell3Button: {
        launch: {
            download: (db) => {
                let y0 = parseInt(db.systemValueGlobalStartingPlanYear),
                    selector = v('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl.selected') === 'Live' ? 'Live' : 'Submitted Customer Plan',
                    fileName = Repository.rocheBPSPCustomerReport.getFileName(db);
                let segmentedOne = v('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl.selected') === 'Live' ? 'Final Sales Plan' : 'Submitted Final Sales Plan';
                let segmentedTwo = v('rocheBPSPCustomerReportGridRow5Cell1SegmentedControl.selected') === 'Live' ? 'Growth Final Sales Plan' : 'Growth Submitted Final Sales Plan';

                //fileName = 'rocheBPSPCustomerReport';
                return {
                    url: 'export?export_key=rocheCustomerReportExport&file_name=' + fileName + '.xlsx',   // custom_object json
                    //url: 'export?export_key=rocheCustomerReportExport&file_name=' + '.xlsx',
                    fileName: fileName + '.xlsx',
                    activeUserName: db.activeUserName,
                    companyVersion: v('systemValueGlobalVersionKey'), //Live
                    productPlanVersion: db.systemValueGlobalCompanyProductPlanVersion, //Budget
                    company: Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerReportGridRow1Cell2DropBox', 'key'),
                    globalVersion: Widgets.systemValueGlobalCompanyVersion,
                    YearMinusOne: y0 - 1,
                    yearzero: y0, //2021
                    YearPlusOne: y0 + 1,
                    YearPlusTwo: y0 + 2,
                    YearPlusThree: y0 + 3,
                    selector: selector,
                    segmentedOne: segmentedOne,
                    segmentedTwo: segmentedTwo,
                    key: 'rocheCustomerReportExportMDX' // ez a yml,
                };
            }
        }
    },
    rocheBPSPCustomerStatusReport: {
        getFileName: (db) => {
            let s = [];
            s.push('customer_status_report');
            s.push(Utils.getFormattedDate(new Date(), '_', true));
            s.push(db.activeUserName);
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerStatusReportGridRow1Cell2DropBox', 'key'));
            return s.join('_').replaceAll(':', '_').replaceAll(' ', '_').replaceAll('/', '_');
        }
    },
    rocheBPSPCustomerStatusReportGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerStatusReportGridRow1Cell2DropBox', 'key'));
            }
        },
        reference: 'rocheBPSPCustomerReportGridRow1Cell2DropBox'
    },
    rocheBPSPCustomerStatusReportGridRow1Cell9Button: {
        init: {
            execute: (db) => {
                return {label: Widgets['activeUserName']};
            }
        }
    },
    rocheBPSPCustomerStatusReportGridTable: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomerStatusReportGridVersionSelector');
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name,Attributes))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerStatusReportGridRow1Cell2DropBox', 'key'),
                    version = v('systemValueGlobalVersionKey');
                return `{"MDX":"
                          WITH
                            MEMBER [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[UILevelFormat]
                                AS [Territories].[Territories].CurrentMember.Properties('UI Level Format')
                        -- Flag to show/hide link to the customer planning
                           MEMBER [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[ShowLink] AS
                                IIF( IsLeaf( [Territories].[Territories].CurrentMember), \\"1\\", \\"0\\")
                            MEMBER [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[% Completed]
                                AS ([Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Submitted Flag] / [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Assignment Flag])
                                , FORMAT_STRING='#0%'
                        SELECT
                            {
                            [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[UILevelFormat],
                            [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[ShowLink],
                            [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Assignment Flag],
                            [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[Submitted Flag],
                            [Measures Sales Territory to Customer].[Measures Sales Territory to Customer].[% Completed]
                            }
                            ON COLUMNS ,
                            {TM1DRILLDOWNMEMBER({[Territories].[Territories].[All Territories ${company}]}, All, Recursive)}
                            PROPERTIES [Territories].[Territories].[Caption]  ON ROWS
                        FROM [Sales Territory To Customer]
                        WHERE
                            (
                            [Versions].[Versions].[${version}],
                            [Companies].[Companies].[${company}],
                            [Receivers].[Receivers].[All Receivers],
                            [Customers Plan].[Customers Plan].[All Customers Plan ${company}]
                            )
                    "}`;
            },
            parsingControl: {
                type: 'matrix',
                length: 5,
                query: [
                    (r, x) => {
                        return {
                            label: r.Cells[x].Members[4].Attributes.Caption,
                            uiLevel: r.Cells[x].FormattedValue,
                            skin: 'gridtable_hierarchy_bpsp_' + r.Cells[x].FormattedValue,
                            showLink: r.Cells[x + 1].FormattedValue
                        }
                    },
                    (r, x) => {
                        return {
                            enabled: r.Cells[x + 1].FormattedValue === "1",
                            icon: r.Cells[x + 1].FormattedValue === "1" ? 'icon-jump' : ''
                        }
                    },
                    (r, x) => {
                        return {title: r.Cells[x].FormattedValue}
                    },
                    (r, x) => {
                        return {title: parseInt(r.Cells[x + 2].FormattedValue) + ' Customers'}
                    },
                    (r, x) => {
                        return {title: parseInt(r.Cells[x + 3].FormattedValue) + ' Customers'}
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 4].FormattedValue}
                    }
                ]
            }
        }
    },
    rocheBPSPCustomerStatusReportGridTableShowLinkButton: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerStatusSelectedTerritoryId', Utils.getGridTableCell('rocheBPSPCustomerStatusReportGridTable', 0).label);
            }
        }
    },
    rocheBPSPCustomerStatusReportFullExportButton: {
        launch: {
            download: (db) => {
                let fileName = Repository.rocheBPSPCustomerStatusReport.getFileName(db);
                return {
                    url: 'export?export_key=rocheCustomerStatusReportExport&file_name=' + fileName + '.xlsx',
                    fileName: fileName + '.xlsx',
                    activeUserName: v('activeUserName'),
                    companyVersion: v('systemValueGlobalCompanyVersion'),
                    versionName: Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerStatusReportGridVersionSelector', 'name'),
                    version: v('systemValueGlobalVersionKey'),
                    company: Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerStatusReportGridRow1Cell2DropBox', 'key'),
                    key: 'rocheCustomerStatusReportExportMDX'
                };
            }
        }
    },


    rocheBPSPCustomerStatusReportGridVersionSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCustomerStatusReportGridRow1Cell2DropBox')
            return b
        },
        initDefault: (db) => {
            return []
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', v('rocheBPSPCustomerStatusReportGridVersionSelector.value'))
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerStatusReportGridVersionSelector', 'key'))
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {FILTER(
                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                ,[Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerStatusReportGridRow1Cell2DropBox', 'key')}],
                [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCustomerStatusReportGridRow1Cell2DropBox', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion')
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                })
                            }
                            return result
                        }
                    }
            }
        }
    },

    rocheBPSPIpPlanningReport: {
        getFileName: (db) => {
            let s = [], selector = v('rocheBPSPIpPlanningReportGridRow5Cell1SegmentedControl.selected');
            s.push('ip_planning_report');
            s.push(Utils.getFormattedDate(new Date(), '_', true));
            s.push(db.activeUserName);
            s.push(selector ? selector : 'All Instrument Types');
            s.push(v('systemValueIpPlanningReportFocusedProduct') ? v('systemValueIpPlanningReportFocusedProduct') : 'PL1')
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningReportGridRow1Cell2DropBox', 'key'));
            return s.join('_').replaceAll(':', '_').replaceAll(' ', '_').replaceAll('/', '_');
        },
        init: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningReportFocusedProduct', 'PL1');
            }
        }
    },
    rocheBPSPIpPlanningReportGridRow1Cell9Button: {
        init: {
            execute: (db) => {
                return {label: Widgets['activeUserName']};
            }
        }
    },
    rocheBPSPIpPlanningReportGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningReportGridRow1Cell2DropBox', 'key'));
            }
        },
        reference: 'rocheBPSPCustomerReportGridRow1Cell2DropBox'
    },

    rocheBPSPIpPlanningReportGridVersionSelector: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPIpPlanningReportGridRow1Cell2DropBox')
            return b
        },
        initDefault: (db) => {
            return []
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalVersion', v('rocheBPSPIpPlanningReportGridVersionSelector.value'))
                Utils.setWidgetValue('systemValueGlobalVersionKey', Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningReportGridVersionSelector', 'key'))
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                AS [Versions].[Versions].CurrentMember.Name
                MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = '', 
                    [Versions].[Versions].CurrentMember.Name, [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
            SELECT
                {
                [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName],
                [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                }
                ON COLUMNS,
                {FILTER(
                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                ,[Version Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningReportGridRow1Cell2DropBox', 'key')}],
                [Measures Version Information by Company].[Measures Version Information by Company].[Visible]) = 1 )}
                ON ROWS
            FROM
                [Version Information by Company]
            WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningReportGridRow1Cell2DropBox', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalVersion')
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                })
                            }
                            return result
                        }
                    }
            }
        }
    },

    rocheBPSPIpPlanningReportGridRow1Cell3DropBox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPIpPlanningReportGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueReportSelectedReceiver', v('rocheBPSPIpPlanningReportGridRow1Cell3DropBox.value'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "            
            SELECT 
           {
           [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Member description],
                      [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Receiver - Key]
           } 
          ON COLUMNS , 
           {TM1SubsetToSet([Receivers].[Receivers], 'zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningReportGridRow1Cell2DropBox', 'key')} Report Receivers')}  
          ON ROWS 
        FROM [}ElementAttributes_Receivers] 

            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [],
                                selectedReceiver = v('systemValueReportSelectedReceiver'),
                                selected = selectedReceiver ? selectedReceiver : v('rocheBPSPIpPlanningReportGridRow1Cell3DropBox.value');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPIpPlanningReportGridTableHeaderText4: {
        initCondition: (db) => {
            let b = Utils.isGridTableLoaded('rocheBPSPIpPlanningReportGridTable');
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                let gridTableData = v('rocheBPSPIpPlanningReportGridTable.cellData');
                return {title: gridTableData[0][3].titleForHeader};
            }
        }
    },
    rocheBPSPIpPlanningReportGridTableHeaderText8: {
        initCondition: (db) => {
            let b = Utils.isGridTableLoaded('rocheBPSPIpPlanningReportGridTable');
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                let gridTableData = v('rocheBPSPIpPlanningReportGridTable.cellData');
                return {title: gridTableData[0][7].titleForHeader};
            }
        }
    },

    rocheBPSPIpPlanningReportGridTableHeaderText12: {
        initCondition: (db) => {
            let b = Utils.isGridTableLoaded('rocheBPSPIpPlanningReportGridTable');
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                let gridTableData = v('rocheBPSPIpPlanningReportGridTable.cellData');
                return {title: gridTableData[0][11].titleForHeader};
            }
        }
    },

    rocheBPSPIpPlanningReportGridTable: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPIpPlanningReportGridRow1Cell3DropBox') &&
                Utils.isValueExistingAndNotEmpty('rocheBPSPIpPlanningReportGridVersionSelector');
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningReportGridRow1Cell2DropBox', 'key'),
                    receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningReportGridRow1Cell3DropBox', 'key'),
                    budget = db.systemValueGlobalCompanyProductPlanVersion,
                    selector = v('rocheBPSPIpPlanningReportGridRow5Cell1SegmentedControl.selected'),
                    year = Utils.parseNumber(db.systemValueGlobalStartingPlanYear), // ${year + 1}
                    version = v('systemValueGlobalVersionKey'),
                    product = v('systemValueIpPlanningReportFocusedProduct');
                if (product === false) {
                    product = 'PL1';
                }

                return `{"MDX":"
                            WITH
                                -- Company Specific material subset
                                    SET DefaultProductRows AS
                                        {TM1SubsetToSet([Materials].[BPSP ${budget} IP], '${company}')}
                                --Create deault subset for the rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                                    SET SelectedProductRows AS
                                        {INTERSECT(
                                            {TM1DRILLDOWNMEMBER({[Materials].[BPSP ${budget} IP].[PL1]}, ALL, RECURSIVE )}
                                            ,{DefaultProductRows})
                                        }
                                -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)
                                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName] as
                                        [Materials].[BPSP ${budget} IP].CurrentMember.Properties('BPSP ${budget} IP Name')
                                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialNumber] as
                                        [Materials].[BPSP ${budget} IP].CurrentMember.Properties('Element')
                                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel] as
                                        [Materials].[BPSP ${budget} IP].CurrentMember.Properties('Product Level - Name')
                                    MEMBER [LineItems Sales Plan IP].[LineItems Sales Plan IP].[UIFormat] as
                                        [Materials].[BPSP ${budget} IP].CurrentMember.Properties('UI Level Format')
                                -- Create the first 4 column with information
                                    SET FixColumns AS
                                        {
                                        ([Periods].[Periods].[${year}],[Contract Types].[Contract Types].[Cash Sales],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialName]),
                                        ([Periods].[Periods].[${year}],[Contract Types].[Contract Types].[Cash Sales],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialLevel]),
                                        ([Periods].[Periods].[${year}],[Contract Types].[Contract Types].[Cash Sales],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[MaterialNumber]),
                                        ([Periods].[Periods].[${year}],[Contract Types].[Contract Types].[Cash Sales],[LineItems Sales Plan IP].[LineItems Sales Plan IP].[UIFormat])
                                        }
                                    Set DataColumns AS
                                        {[Periods].[Periods].[${year - 1}],
                                         [Periods].[Periods].[${year}],
                                         [Periods].[Periods].[${year + 1}]}
                                        *
                                        {TM1DRILLDOWNMEMBER({[Contract Types].[Contract Types].[All Contract Types]}, All, Recursive)}
                                        *
                                        {[LineItems Sales Plan IP].[LineItems Sales Plan IP].[Final Quantity Plan]}
                                -- column Tuple Create
                                SELECT
                                    UNION({FixColumns}
                                        ,{DataColumns},All)
                                    ON COLUMNS ,
                                -- rows
                                    {SelectedProductRows}
                                    ON ROWS
                                FROM [Sales Plan IP]
                                WHERE
                                    (
                                    [Versions].[Versions].[${version}],
                                    [Receivers].[Receivers].[${receiver}],
                                    [Companies].[Companies].[${company}],
                                    [Instrument Types].[Instrument Types].[${selector === 'All' || selector === false ? 'All Instrument Types' : selector}],
                                    [Measures Sales Plan IP].[Measures Sales Plan IP].[Value]
                                    )
                    "}`;
            },
            parsingControl: {
                type: 'matrix',
                length: 16,
                query: [
                    (r, x) => {
                        return {
                            label: r.Cells[x].FormattedValue,
                            uiLevel: r.Cells[x + 3].FormattedValue,
                            skin: 'gridtable_hierarchy_bpsp_' + r.Cells[x + 3].FormattedValue
                        }
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 1].FormattedValue.replace('PL', '').replace('a', '')}
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 2].FormattedValue}
                    },
                    (r, x) => {
                        return {
                            title: r.Cells[x + 4].FormattedValue,
                            titleForHeader: r.Cells[x + 4].Members[6].Name
                        }
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 5].FormattedValue}
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 6].FormattedValue}
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 7].FormattedValue}
                    },
                    (r, x) => {
                        return {
                            title: r.Cells[x + 8].FormattedValue,
                            titleForHeader: r.Cells[x + 8].Members[6].Name
                        }
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 9].FormattedValue}
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 10].FormattedValue}
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 11].FormattedValue}
                    },
                    (r, x) => {
                        return {
                            title: r.Cells[x + 12].FormattedValue,
                            titleForHeader: r.Cells[x + 12].Members[6].Name
                        }
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 13].FormattedValue}
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 14].FormattedValue}
                    },
                    (r, x) => {
                        return {title: r.Cells[x + 15].FormattedValue}
                    }
                ]
            }
        }
    },
    rocheBPSPIpPlanningReportGridTableHeaderReturnFromFocus: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningReportFocusedProduct', 'PL1');
            }
        },
        init: {
            execute: (db) => {
                return {visible: v('systemValueIpPlanningReportFocusedProduct') !== 'PL1'};
            }
        }
    },
    rocheBPSPIpPlanningReportMaterialSelectorShortcutPopupGridTable: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueIpPlanningReportFocusedProduct', Utils.getGridTableCell('rocheBPSPIpPlanningReportMaterialSelectorShortcutPopupGridTable', 0).productCode);
            }
        },
        initCondition: (db) => {
            let b = Utils.isGridTableLoaded('rocheBPSPIpPlanningReportGridTable');
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return v('rocheBPSPIpPlanningReportGridTable.cellData').filter(e => ['01C', '02C', '03C', '01N', '02N', '03N'].includes(e[0].uiLevel)).map(e => {
                    return [{
                        label: e[0].label,
                        skin: 'gridtable_hierarchy_shortcut_bpsp_' + e[0].uiLevel,
                        productCode: e[2].title
                    }];
                });
            }
        }
    },
    rocheBPSPIpPlanningReportGridRow4Cell3Button: {
        launch: {
            download: (db) => {
                let fileName = Repository.rocheBPSPIpPlanningReport.getFileName(db);
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningReportGridRow1Cell2DropBox', 'key'),
                    budget = db.systemValueGlobalCompanyProductPlanVersion,
                    selector = v('rocheBPSPIpPlanningReportGridRow5Cell1SegmentedControl.selected'),
                    year = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                    version = v('systemValueGlobalVersionKey'),
                    product = v('systemValueIpPlanningReportFocusedProduct');
                if (product === false) {
                    product = 'PL1';
                }
                return {
                    url: 'export?export_key=rocheIpPlanningReportExport&file_name=' + fileName + '.xlsx',
                    fileName: fileName + '.xlsx',
                    activeUserName: v('activeUserName'),
                    companyVersion: v('systemValueGlobalCompanyVersion'),
                    company: company,
                    budget: budget,
                    version: Utils.getDropBoxSelectedItemAttribute('rocheBPSPIpPlanningReportGridVersionSelector', 'key'),
                    yearMinusOne: year - 1,
                    year1: year + 1,
                    year2: year + 2,
                    year3: year + 3,
                    year4: year + 4,
                    year: year, // 2021
                    next: year + 1,
                    material: product,
                    intrumentType: selector ? selector : 'All Instrument Types',
                    key: 'rocheIpPlanningReportExportMDX'
                };
            }
        }
    },

    rocheBPSPCustomerReportGridTableShowLinkButton: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueCustomerStatusSelectedTerritoryId', Utils.getGridTableCell('rocheBPSPCustomerReportGridTable', 0).label);
                Utils.setWidgetValue('customerToReport', true);
            }
        }
    },
    rocheBPSPCustomersGridRow1Cell0Button: {
        launch: {
            execute: (db) => {
                if (v('customerToReport')) {
                    Api.openPrevPage();
                } else {
                    Api.openPage('rocheBPSPMain');
                }
            }
        }
    },

    rocheBPSPCustomerReportGridRow1Cell0Button: {
        launch: {
            execute: (db) => {
                Utils.setWidgetValue('customerToReport', false)
            }
        }
    },
    /* Company Settings Monthly Split Days */
    rocheBPSPCompanySettingsMonthlySplitDaysGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsMonthlySplitDaysGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]}
                    ON COLUMNS ,
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCompanySettingsMonthlySplitDaysGridRow1Cell3Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    'rocheBPSPCompanySettingsMonthlySplitDaysGridTableHeaderText-02': {
        state: (db) => {
            return {body: Utils.parseNumber(db.systemValueGlobalStartingPlanYear)};
        },
    },
    'rocheBPSPCompanySettingsMonthlySplitDaysGridTableHeaderText-03': {
        state: (db) => {
            return {body: Utils.parseNumber(db.systemValueGlobalStartingPlanYear) + 1};
        },
    },
    'rocheBPSPCompanySettingsMonthlySplitDaysGridTableHeaderText-04': {
        state: (db) => {
            return {body: Utils.parseNumber(db.systemValueGlobalStartingPlanYear) + 2};
        },
    },
    'rocheBPSPCompanySettingsMonthlySplitDaysGridTableHeaderText-05': {
        state: (db) => {
            return {body: Utils.parseNumber(db.systemValueGlobalStartingPlanYear) + 3};
        },
    },
    rocheBPSPCompanySettingsMonthlySplitDaysGridTable: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsMonthlySplitDaysGridRow1Cell2DropBox')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name, Attributes/MonthName3C))`,
                type: 'POST',
                body: (db) => {

                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsMonthlySplitDaysGridRow1Cell2DropBox', 'key'),
                        yearZero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                        yearPlusOne = yearZero + 1,
                        yearPlusTwo = yearZero + 2,
                        yearPlusThree = yearZero + 3;

                    return `{"MDX":"
                        SELECT 
                          {
                          [Periods].[Periods].[${yearZero}01], [Periods].[Periods].[${yearPlusOne}01], [Periods].[Periods].[${yearPlusTwo}01], [Periods].[Periods].[${yearPlusThree}01],
                          [Periods].[Periods].[${yearZero}02], [Periods].[Periods].[${yearPlusOne}02], [Periods].[Periods].[${yearPlusTwo}02], [Periods].[Periods].[${yearPlusThree}02],
                          [Periods].[Periods].[${yearZero}03], [Periods].[Periods].[${yearPlusOne}03], [Periods].[Periods].[${yearPlusTwo}03], [Periods].[Periods].[${yearPlusThree}03],
                          [Periods].[Periods].[${yearZero}04], [Periods].[Periods].[${yearPlusOne}04], [Periods].[Periods].[${yearPlusTwo}04], [Periods].[Periods].[${yearPlusThree}04],
                          [Periods].[Periods].[${yearZero}05], [Periods].[Periods].[${yearPlusOne}05], [Periods].[Periods].[${yearPlusTwo}05], [Periods].[Periods].[${yearPlusThree}05],
                          [Periods].[Periods].[${yearZero}06], [Periods].[Periods].[${yearPlusOne}06], [Periods].[Periods].[${yearPlusTwo}06], [Periods].[Periods].[${yearPlusThree}06],
                          [Periods].[Periods].[${yearZero}07], [Periods].[Periods].[${yearPlusOne}07], [Periods].[Periods].[${yearPlusTwo}07], [Periods].[Periods].[${yearPlusThree}07],
                          [Periods].[Periods].[${yearZero}08], [Periods].[Periods].[${yearPlusOne}08], [Periods].[Periods].[${yearPlusTwo}08], [Periods].[Periods].[${yearPlusThree}08],
                          [Periods].[Periods].[${yearZero}09], [Periods].[Periods].[${yearPlusOne}09], [Periods].[Periods].[${yearPlusTwo}09], [Periods].[Periods].[${yearPlusThree}09],
                          [Periods].[Periods].[${yearZero}10], [Periods].[Periods].[${yearPlusOne}10], [Periods].[Periods].[${yearPlusTwo}10], [Periods].[Periods].[${yearPlusThree}10],
                          [Periods].[Periods].[${yearZero}11], [Periods].[Periods].[${yearPlusOne}11], [Periods].[Periods].[${yearPlusTwo}11], [Periods].[Periods].[${yearPlusThree}11],
                          [Periods].[Periods].[${yearZero}12], [Periods].[Periods].[${yearPlusOne}12], [Periods].[Periods].[${yearPlusTwo}12], [Periods].[Periods].[${yearPlusThree}12]
                          } 
                         ON COLUMNS , 
                         {[Measures Company Information by Period].[Measures Company Information by Period].[Split Days]} ON ROWS
                        FROM [Company Information by Period] 
                        WHERE 
                         (
                          [Companies].[Companies].[${company}],
                          [Versions].[Versions].[Live]
                         )
                        "}`;

                },
                parsingControl: {
                    type: 'matrix',
                    length: 4,
                    query: [
                        (r, x) => {
                            return {
                                title: r.Cells[x].Members[3].Attributes['Month Name 3C'],
                            }
                        },
                        (r, x) => {
                            return {
                                title: r.Cells[x].FormattedValue,
                                editable: true,
                                ordinal: r.Cells[x].Ordinal,
                                titleFontColor: '#A05EB5'
                            }
                        },
                        (r, x) => {
                            return {
                                title: r.Cells[x + 1].FormattedValue,
                                editable: true,
                                ordinal: r.Cells[x + 1].Ordinal,
                                titleFontColor: '#A05EB5'
                            }
                        },
                        (r, x) => {
                            return {
                                title: r.Cells[x + 2].FormattedValue,
                                editable: true,
                                ordinal: r.Cells[x + 2].Ordinal,
                                titleFontColor: '#A05EB5'
                            }
                        },
                        (r, x) => {
                            return {
                                title: r.Cells[x + 3].FormattedValue,
                                editable: true,
                                ordinal: r.Cells[x + 3].Ordinal,
                                titleFontColor: '#A05EB5'
                            }
                        }
                    ]
                }
            },
        write: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `[
                        {"Ordinal": ${widgetValue.ordinal},"Value": \"${Utils.parseNumber(widgetValue.value)}\"}
                    ]`;
            }
        },
        paste: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `[
                        {"Ordinal": ${widgetValue.ordinal},"Value": \"${Utils.parseNumber(widgetValue.value)}\"}
                    ]`;
            }
        },
        pastelast: {
            url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
            type: 'PATCH',
            body: (db, cell, widgetValue, row, col) => {
                return `[
                        {"Ordinal": ${widgetValue.ordinal},"Value": \"${Utils.parseNumber(widgetValue.value)}\"}
                    ]`;
            }
        }
    },
    /* Company Settings Versions */
    rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "SELECT
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]}
                    ON COLUMNS ,
                     {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCompanySettingsVersionsGridRow1Cell3Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },
    rocheBPSPCompanySettingsVersionsGridTable: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Consolidated,RuleDerived,Updateable;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => {

                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key');

                    return `{"MDX":"
                        WITH MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[Version] AS
                            [Versions].[Versions].CurrentMember.Name
                        MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[Display Month] AS
                            IIF( [Measures Version Information by Company].[Measures Version Information by Company].[Actuals Month] = \\"\\" ,\\"\\",
                            RIGHT([Measures Version Information by Company].[Measures Version Information by Company].[Actuals Month],2) + \\"/\\"  
                                + LEFT([Measures Version Information by Company].[Measures Version Information by Company].[Actuals Month],4))
                        SELECT 
                          {
                          [Measures Version Information by Company].[Measures Version Information by Company].[Version],
                          [Measures Version Information by Company].[Measures Version Information by Company].[Visible],
                          [Measures Version Information by Company].[Measures Version Information by Company].[Name],
                          [Measures Version Information by Company].[Measures Version Information by Company].[Actuals Month],
                          [Measures Version Information by Company].[Measures Version Information by Company].[Display Month],
                          [Measures Version Information by Company].[Measures Version Information by Company].[Copy Status]
                          } 
                         ON COLUMNS , 
                         {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)} ON ROWS
                        FROM [Version Information by Company] 
                        WHERE 
                         (
                          [Companies].[Companies].[${company}]
                         )
                        "}`;

                },
                parsingControl: {
                    type: 'matrix',
                    length: 6,
                    query: [


                        (r, x) => {
                            return {
                                icon: parseInt(r.Cells[x + 1].FormattedValue) === 1 ? 'icon-eye' : 'icon-eye-slash',
                                cellSkin: parseInt(r.Cells[x + 1].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                pVersion: r.Cells[x].FormattedValue,
                                pAction: parseInt(r.Cells[x + 1].FormattedValue) === 1 ? 'Lock' : 'Unlock',
                                pTI: 'MODULE - UI - Version Control',
                                pMonth: r.Cells[x + 3].FormattedValue
                            }
                        },
                        (r, x) => {
                            return {
                                title: r.Cells[x + 2].FormattedValue !== '' ? r.Cells[x + 2].FormattedValue : r.Cells[x].FormattedValue,
                                cellSkin: parseInt(r.Cells[x + 1].FormattedValue) === 1 ? '' : 'readonly_bpsp'
                            }
                        },
                        (r, x) => {
                            return {
                                title: r.Cells[x + 4].FormattedValue,
                                cellSkin: parseInt(r.Cells[x + 1].FormattedValue) === 1 ? '' : 'readonly_bpsp'
                            }
                        },

                        (r, x) => {
                            let isEditable = (parseInt(r.Cells[x + 5].FormattedValue) === 0);
                            return {
                                icon: 'icon-copy',
                                cellSkin: parseInt(r.Cells[x + 1].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                buttonActive: isEditable ? true : false,
                                iconColor: isEditable ? '#0066cc' : '#C5C6C6',
                                pVersion: r.Cells[x].FormattedValue,
                                pAction: 'Copy'
                            }
                        },
                        (r, x) => {
                            let isEditable = (parseInt(r.Cells[x + 5].FormattedValue) === 0);
                            return {
                                icon: 'icon-edit',
                                cellSkin: parseInt(r.Cells[x + 1].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                buttonActive: isEditable ? true : false,
                                iconColor: isEditable ? '#0066cc' : '#C5C6C6',
                                pVersion: r.Cells[x].FormattedValue,
                                pAction: 'Edit',
                                pTI: 'MODULE - UI - Version Clear'

                            }
                        },
                        (r, x) => {
                            let isEditable = (parseInt(r.Cells[x + 5].FormattedValue) === 0);
                            return {
                                icon: 'icon-trash',
                                cellSkin: parseInt(r.Cells[x + 1].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                buttonActive: isEditable ? true : false,
                                iconColor: isEditable ? '#0066cc' : '#C5C6C6',
                                pVersion: r.Cells[x].FormattedValue,
                                pAction: 'Clear'
                            }
                        },
                        (r, x) => {
                            return {
                                icon: parseInt(r.Cells[x + 5].FormattedValue) === 1 ? 'icon-column-time' : '',
                                cellSkin: parseInt(r.Cells[x + 1].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                                pVersion: r.Cells[x].FormattedValue
                            }
                        },

                    ]
                }
            },
    },
    rocheBPSPCompanySettingsVersionsGridRow3Cell2DropBox: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                SELECT 
                       {[}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Member description],
                        [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Receiver - Key]} 
                     ON COLUMNS , 
                        {Tm1SubsetToset([Receivers].[Receivers],'zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key')} Plan Receivers')}
                     ON ROWS
                    FROM [}ElementAttributes_Receivers] 
                    SELECT 
                       {[}ElementAttributes_Versions].[}ElementAttributes_Versions].Members} 
                      ON COLUMNS , 
                       {EXCEPT({TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning versions]},
                       {[Versions].[Versions].[Planning versions]}, RECURSIVE )},{[Versions].[Versions].[Planning versions]})} 
                      ON ROWS 
                    FROM [}ElementAttributes_Versions] 
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [];
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    'name': r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: v('rocheBPSPCompanySettingsVersionsGridRow3Cell2DropBox.value') === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCompanySettingsVersionsCopyDataPopupSourceVersionDropbox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsVersionsGridTable', 'row');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                WITH 
                  MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                    AS [Versions].[Versions].CurrentMember.Name
                  MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = \\"\\"
                        , [Versions].[Versions].CurrentMember.Name
                        , [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
                SELECT
                    {
                    [Measures Version Information by Company].[Measures Version Information by Company].[VersionID],
                    [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    }
                    ON COLUMNS,
                    {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                    ON ROWS
                FROM
                    [Version Information by Company]
                WHERE
                    ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [],
                                selected = Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsVersionsGridTable').pVersion;
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                result.push({
                                    name: r.Cells[i + 1].FormattedValue,
                                    key: r.Cells[i].FormattedValue,
                                    on: selected === r.Cells[i].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCompanySettingsVersionsCopyDataPopupTargetVersionDropbox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsVersionsCopyDataPopupSourceVersionDropbox');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
                WITH 
                  MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[VersionID]
                    AS [Versions].[Versions].CurrentMember.Name
                  MEMBER [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    AS IIF([Measures Version Information by Company].[Measures Version Information by Company].[Name] = \\"\\"
                        , [Versions].[Versions].CurrentMember.Name
                        , [Measures Version Information by Company].[Measures Version Information by Company].[Name] )
                SELECT
                    {
                    [Measures Version Information by Company].[Measures Version Information by Company].[VersionID],
                    [Measures Version Information by Company].[Measures Version Information by Company].[DisplayName]
                    }
                    ON COLUMNS,
                    {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Versions].[Versions].[Planning Versions]}, All, Recursive)}, 0)}
                    ON ROWS
                FROM
                    [Version Information by Company]
                WHERE
                    ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key')}])
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selectedIndex = 0,
                                sourceVersion = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsCopyDataPopupSourceVersionDropbox', 'key');
                            for (let i = 0; i < r.Cells.length; i = i + 2) {
                                if (sourceVersion !== r.Cells[i].FormattedValue) {
                                    result.push({
                                        name: r.Cells[i + 1].FormattedValue,
                                        key: r.Cells[i].FormattedValue,
                                        on: selectedIndex === i
                                    });
                                }
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCompanySettingsVersionsVisibilityPopupGridRow1Cell1Text: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsVersionsGridTable', 'row');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return {
                    title: Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsVersionsGridTable').pAction + " Version"
                };
            }

        },
    },
    rocheBPSPCompanySettingsVersionsCopyDataPopupControlPanelCopyButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Version Copy')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                        "Parameters": [
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pVersionFrom", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsCopyDataPopupSourceVersionDropbox', 'key')}"},
                                {"Name": "pVersionTo", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsCopyDataPopupTargetVersionDropbox', 'key')}"},
                                {"Name": "pScope", "Value": "All"}
                        ]
                    }`
            },
    },
    rocheBPSPCompanySettingsVersionsEditVersionPopupEditNameTextBox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsVersionsGridTable', 'row');
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                execute: (db) => {
                    return {
                        value: Utils.getGridTableCell('rocheBPSPCompanySettingsVersionsGridTable', 1).title
                    };
                }
            }
    },
    rocheBPSPCompanySettingsVersionsEditVersionActualsMonthDropbox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsVersionsGridTable', 'row');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => {

                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key'),
                    version = Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsVersionsGridTable').pVersion

                return `{"MDX" : "
                    WITH 
                      MEMBER [Periods].[Periods].[CurrentPeriod]
                        AS [Company Information].([Versions].[Versions].[${version}], [Companies].[Companies].[${company}], [Measures Company Information].[Measures Company Information].[Actuals Month]) 
                      MEMBER [Periods].[Periods].[MaxPeriod]
                        AS [Control].([Measures Control].[Measures Control].[Current Actuals Month], [Value Type].[Value Type].[String]) 
                      MEMBER [Periods].[Periods].[ActualsYear]
                        AS LEFT( [Periods].[Periods].[MaxPeriod], 4)
                      MEMBER [}ElementAttributes_Periods].[}ElementAttributes_Periods].[Flag]
                        AS  IIF([Periods].[Periods].[Month Key] = [Periods].[Periods].[CurrentPeriod], \\"1\\", \\"0\\")
                    SELECT
                        {
                        [}ElementAttributes_Periods].[}ElementAttributes_Periods].[Caption],
                        [}ElementAttributes_Periods].[}ElementAttributes_Periods].[Month Key],
                        [}ElementAttributes_Periods].[}ElementAttributes_Periods].[Flag]
                        }
                        ON COLUMNS,
                          {Filter( 
                            {TM1FILTERBYLEVEL({TM1SUBSETALL([Periods])}, 0)}
                            , [Periods].[Periods].[Year Key] = [Periods].[Periods].[ActualsYear] 
                            AND [Periods].[Periods].[Month Key] <= [Periods].[Periods].[MaxPeriod] )}
                        ON ROWS
                    FROM
                        [}ElementAttributes_Periods]
                    "}`
            },
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [];
                            for (let i = 0; i < r.Cells.length; i = i + 3) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    on: "1" == r.Cells[i + 2].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },
    rocheBPSPCompanySettingsVersionsEditVersionPopupControlPanelSaveButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Version Edit')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key'),
                        version = Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsVersionsGridTable').pVersion,
                        currentActualsMonth = v('systemValueVersionEditCurrentActualsMonth'),
                        newActualsMonth = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsEditVersionActualsMonthDropbox', 'key'),
                        keepPlanflag = (currentActualsMonth == '' || currentActualsMonth == newActualsMonth) ? '0' : '1';


                    return `{
                    "Parameters": [
                        {"Name": "pCompany", "Value": "${company}"},
                        {"Name": "pVersion", "Value": "${version}"},
                        {"Name": "pName", "Value": "${v('rocheBPSPCompanySettingsVersionsEditVersionPopupEditNameTextBox.value')}"},
                        {"Name": "pActualMonth", "Value": "${newActualsMonth}"},
                        {"Name": "pYENDKeepFlag", "Value": "${keepPlanflag}"}
                    ]
                }`
                }
            },
    },
    rocheBPSPCompanySettingsVersionsClearVersionPopupControlPanelClearButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Version Clear')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                    "Parameters": [
                        {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key')}"},
                        {"Name": "pVersion", "Value": "${Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsVersionsGridTable').pVersion}"},
                        {"Name": "pScope", "Value": "All"}
                    ]
                }`
            },
    },
    rocheBPSPCompanySettingsVersionsVisibilityPopupControlPanelUpdateButton: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsVersionsGridTable', 'row');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return {
                    label: Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsVersionsGridTable').pAction
                };
            }

        },
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Version Control')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => `{
                    "Parameters": [
                        {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key')}"},
                        {"Name": "pVersion", "Value": "${Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsVersionsGridTable').pVersion}"},
                        {"Name": "pAction", "Value": "${Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsVersionsGridTable').pAction}"}
                    ]
                }`
            },
    },
    rocheBPSPCompanySettingsGrowthRateExport: {
        getFileName: (db) => {
            let s = [], fileName;
            s.push('growth_rate')
            s.push(Utils.getFormattedDate(new Date(), '_', true));
            s.push(db.activeUserName);
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key'));
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1CellVersionsDropbox', 'key'));
            return s.join('_').replaceAll(':', '_').replaceAll(' ', '_').replaceAll('/', '_');
        }
    },
    rocheBPSPCompanySettingsGrowthGridRow3Cell3Button2: {
        launch: {
            download: (db) => {
                let yearZero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                    yearPlusOne = yearZero + 1,
                    yearPlusTwo = yearZero + 2,
                    yearPlusThree = yearZero + 3;

                let searchString = '';
                if (Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsGrowthGridRow3Cell1SearchBox')) {
                    searchString = v('rocheBPSPCompanySettingsGrowthGridRow3Cell1SearchBox.value').toUpperCase();
                }

                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key');
                let version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1CellVersionsDropbox', 'key');
                let fileName = Repository.rocheBPSPCompanySettingsGrowthRateExport.getFileName(db);
                return {
                    url: 'export?export_key=rocheGrowthRateExport&file_name=' + fileName + '.xlsx',   // custom_object json
                    fileName: fileName + '.xlsx',
                    activeUserName: db.activeUserName,
                    yearZero: yearZero,
                    yearPlusOne: yearPlusOne,
                    yearPlusTwo: yearPlusTwo,
                    yearPlusThree: yearPlusThree,
                    company: company,
                    version: version,
                    key: 'rocheGrowthRateExportMDX'
                };
            }
        }
    },
    rocheBPSPCompanySettingsGrowth: {
        getFileName: (db) => {
            let s = [], fileName;
            s.push(Utils.getFormattedDate(new Date(), '_', true));
            s.push(db.activeUserName);
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key'));
            s.push(Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1CellVersionsDropbox', 'key'));
            return s.join('_').replaceAll(':', '_').replaceAll(' ', '_').replaceAll('/', '_');
        }
    },
    rocheBPSPCompanySettingsGrowthGridRow3Cell3Upload: {
        upload: (db) => {
            let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key'),
                version = v('systemValueGlobalVersionKey'),
                fileName = Repository.rocheBPSPCompanySettingsGrowth.getFileName(db);
            Utils.modifyFileName('rocheBPSPCompanySettingsGrowthGridRow3Cell3Upload', fileName);
            Utils.setWidgetValue('systemValueUploadFileName', fileName + '.csv');

            return {
                staging: app.defaultUploadStagingFolder,
                target: v('systemValueGrowthRateUploadTargetPath'),
                validation: 'validateGrowthRateExcelImport',
                validationUser: db.activeUserName,
                validationCompany: company,
                validationGlobalVersion: version,
                validationMessage: 'First row of excel does not match'
            };
        },
        request: {
            url: (db) => `/api/v1/Processes('MODULE - UI - CSV Upload Post Processing Growth Rate')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key'),
                    version = v('systemValueGlobalVersionKey'),
                    fileName = v('systemValueUploadFileName');

                return `{
                        "Parameters": [
                                {"Name": "pUserID", "Value": "${db.activeUserName}"},                               
                                {"Name": "pFileName", "Value": "${fileName}"},
                                {"Name": "pVersion", "Value": "${version}"},
                                {"Name": "pCompany", "Value": "${company}"}
                        ]
                    }`;
            }
        }
    },
    rocheBPSPCompanySettingsGrowthPrefillRatesPopupTargetYearsDropbox: {
        init: {
            execute: (db) => {
                let yearZero = Utils.parseNumber(db.systemValueGlobalStartingPlanYear),
                    yearPlusOne = yearZero + 1,
                    yearPlusTwo = yearZero + 2,
                    yearPlusThree = yearZero + 3,
                    elements = [];

                elements.push({name: yearZero});
                elements.push({name: yearPlusOne});
                elements.push({name: yearPlusTwo});
                elements.push({name: yearPlusThree});

                return elements;
            }
        }
    },
    rocheBPSPCompanySettingsGrowthPrefillRatesPopupSourceYearDropbox: {
        reference: 'rocheBPSPCompanySettingsGrowthPrefillRatesPopupTargetYearsDropbox'
    },
    rocheBPSPCompanySettingsGrowthPrefillRatesPopupSourceVersionDropbox: {
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            SELECT
                {[}ElementAttributes_Versions].[}ElementAttributes_Versions].[Caption]} 
                ON COLUMNS,
                {[Versions].[Versions].[Planning versions].CHILDREN}
                ON ROWS
            FROM
                [}ElementAttributes_Versions]
            "}`,
            parsingControl: {
                type: 'list',
                query:
                    (r, x) => {
                        return {name: r.Cells[x].FormattedValue};
                    }
            }
        }
    },
    rocheBPSPCompanySettingsGrowthPrefillRatesPopupProductDropbox: {
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            SELECT
                {[}ElementAttributes_Products Flat].[}ElementAttributes_Products Flat].[Caption]} 
                ON COLUMNS,
                {[Products Flat].[Products Flat].[All Products Flat].CHILDREN}
                ON ROWS
            FROM
                [}ElementAttributes_Products Flat]
            "}`,
            parsingControl: {
                type: 'list',
                query:
                    (r, x) => {
                        return {name: r.Cells[x].FormattedValue};
                    }
            }
        }
    },
    rocheBPSPCompanySettingsGrowthPrefillRatesPopupGrowthDropbox: {
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "
            SELECT
                {[}ElementAttributes_LineItems Sales Plan by Product].[}ElementAttributes_LineItems Sales Plan by Product].[Caption]} 
                ON COLUMNS,
                {TM1SUBSETTOSET([LineItems Sales Plan by Product].[LineItems Sales Plan by Product], 'zUI Prefill Rates')}
                ON ROWS
            FROM
                [}ElementAttributes_LineItems Sales Plan by Product]
            "}`,
            parsingControl: {
                type: 'list',
                query:
                    (r, x) => {
                        return {name: r.Cells[x].Members[0].Name};
                    }
            }
        }
    },
    rocheBPSPCompanySettingsGrowthPrefillRatesPopupControlPanelLoadButton: {
        launch:
            {
                validation: (db) => {
                    return {
                        success: v('rocheBPSPCompanySettingsGrowthPrefillRatesPopupTargetYearsDropbox.value').length > 0,
                        message: 'Select at least one target year.'
                    };
                },
                url: (db) => `/api/v1/Processes('MODULE - UI - Sales Parameters by Products Flat Prefill Rates')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    let sourceYear = v('rocheBPSPCompanySettingsGrowthPrefillRatesPopupSourceYearDropbox.value'),
                        targetYears = v('rocheBPSPCompanySettingsGrowthPrefillRatesPopupTargetYearsDropbox.value'),
                        sourceVersion = v('rocheBPSPCompanySettingsGrowthPrefillRatesPopupSourceVersionDropbox.value'),
                        targetVersion = v('systemValueGlobalVersionKey'),
                        company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow1Cell2DropBox', 'key'),
                        receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsGrowthGridRow3Cell2DropBox', 'key'),
                        product = v('rocheBPSPCompanySettingsGrowthPrefillRatesPopupProductDropbox.value'),
                        lineitem = v('rocheBPSPCompanySettingsGrowthPrefillRatesPopupGrowthDropbox.value');

                    return `{
                        "Parameters": [
                            {"Name": "pPeriodFrom", "Value": "${sourceYear}"},
                            {"Name": "pPeriodTo", "Value": "${targetYears}"},
                            {"Name": "pVersionFrom", "Value": "${sourceVersion}"},
                            {"Name": "pVersionTo", "Value": "${targetVersion}"},
                            {"Name": "pCompany", "Value": "${company}"},
                            {"Name": "pReceiver", "Value": "${receiver}"},
                            {"Name": "pProduct", "Value": "${product}"},
                            {"Name": "pLineItem", "Value": "${lineitem}"}
                        ]
                    }`;
                }
            }
    },
    rocheBPSPCompanySettingsGrowthPageInit: {
        initCondition: (db) => {
            return v('systemValueGrowthRateUploadTargetPath') === false;
        },
        initDefault: (db) => {
            return true;
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
                {
                    "MDX" : "
                        SELECT
                            {[Value Type].[Value Type].[String]}
                         ON COLUMNS ,
                            {[Measures Control].[Measures Control].[UI Excel upload path Growth Rate]}
                        ON ROWS
                        FROM [Control]
                    "
                }
            `,
            parsingControl: {
                type: 'object',
                query:
                    {
                        value: (r, x) => {
                            Utils.setWidgetValue('systemValueGrowthRateUploadTargetPath', r.Cells[0].FormattedValue)
                            return true;
                        }
                    }
            }
        }
    },

    /* Simulation page */

    rocheBPSPSimulation: {

        getSimulationDistributionEditPopupGridTableCell: (index, r) => {
            let c = r.Cells[index], editable = c.Consolidated === false && c.RuleDerived === false,
                performable = c.Consolidated === true && c.RuleDerived === false;

            let result = {
                title: c.FormattedValue,
                cellSkin: editable ? '' : 'readonly_bpsp',
                skin: 'monthly_right_bpsp',
                cellVisible: true,
                editable: editable,
                ordinal: c.Ordinal,
                members: c.Members,
                performable: performable,
                applyMeasuresToSection: true,
                width: '100%',
                height: '100%'
            };
            if (performable) {
                result['icon'] = 'icon-cloud-arrow-up';
            }
            return result;
        },
    },

    rocheBPSPSimulationCompanySelector: {
        choose: {
            execute: (db) => {
                Utils.setWidgetValue('systemValueGlobalSelectedCompany', Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key'));
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `
            {
            "MDX" : "WITH MEMBER [}ElementAttributes_Companies].[}ElementAttributes_Companies].[Planning Locked] AS
                       [Company Information].([Versions].[Versions].[Live], [Measures Company Information].[Measures Company Information].[Lock Customer Planning])
                    SELECT
                       {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name]
                       ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]
                       ,[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Planning Locked]}
                    ON COLUMNS ,
                       {TM1SubsetToSet([Companies].[Companies], 'All Active')}
                    ON ROWS
                    FROM [}ElementAttributes_Companies]
            "}`,
            parsingControl: {
                type: 'object',
                query:
                    {
                        items: (r, x) => {
                            let result = [], selected = v('systemValueGlobalSelectedCompany');
                            for (let i = 0; i < r.Cells.length; i = i + 3) {
                                result.push({
                                    name: r.Cells[i].FormattedValue,
                                    key: r.Cells[i + 1].FormattedValue,
                                    locked: r.Cells[i + 2].FormattedValue,
                                    on: selected === r.Cells[i + 1].FormattedValue
                                });
                            }
                            return result;
                        }
                    }
            }
        }
    },

    rocheBPSPSimulationGridRow1Cell5Button: {
        init: {
            execute: (db) => {
                return {label: db.activeUserName};
            }
        }
    },

    rocheBPSPSimulationGridRow1CellReceiverSelector: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPSimulationCompanySelector');
        },
        initDefault: (db) => {
            return [];
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type:
                    'POST',
                body:
                    (db) => `
            {
            "MDX" : "SELECT 
                        {[}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Member description],
                        [}ElementAttributes_Receivers].[}ElementAttributes_Receivers].[Receiver - Key]} 
                     ON COLUMNS , 
                        {Tm1SubsetToset([Receivers].[Receivers],'zUI ${Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key')} Plan Receivers')}
                     ON ROWS
                    FROM [}ElementAttributes_Receivers] 

            "}`,
                parsingControl:
                    {
                        type: 'object',
                        query:
                            {
                                items: (r, x) => {
                                    let result = [],
                                        selected = v('rocheBPSPSimulationGridRow1CellReceiverSelector.value');
                                    for (let i = 0; i < r.Cells.length; i = i + 2) {
                                        result.push({
                                            name: r.Cells[i].FormattedValue,
                                            key: r.Cells[i + 1].FormattedValue,
                                            on: selected === r.Cells[i].FormattedValue
                                        });
                                    }
                                    return result;
                                }
                            }
                    }
            }
    },

    rocheBPSPSimulationInfoPopupText1: {
        initCondition: (db) => {
            return v('rocheBPSPSimulationCompanySelector.value.length') !== false;
        },
        initDefault:
            (db) => {
                return {};
            },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type:
                    'POST',
                body:
                    (db) => `
                    {"MDX":
                    "SELECT 
                        {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Currency - Key]} 
                    ON COLUMNS , 
                        {[Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key')}]} 
                    ON ROWS 
                    FROM [}ElementAttributes_Companies]
                    "}
            `,
                parsingControl:
                    {
                        type: 'object',
                        query:
                            {
                                title: (r, x) => {
                                    return '<li>' + r.Cells[0].FormattedValue + '</li>';
                                }
                            }
                    }
            }
    },

    rocheBPSPSimulationInfoPopupText2: {
        initCondition: (db) => {
            return v('rocheBPSPSimulationCompanySelector.value.length') !== false;
        },
        initDefault:
            (db) => {
                return {};
            },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type:
                    'POST',
                body:
                    (db) => `
              {"MDX":
                "SELECT 
                    {[Versions].[Versions].[Live]} 
                    PROPERTIES [Versions].[Versions].[Caption]  ON COLUMNS , 
                    {[Measures Company Information].[Measures Company Information].[Current Planning Event]} 
                    PROPERTIES [Measures Company Information].[Measures Company Information].[Caption]  ON ROWS 
                FROM [Company Information] 
                WHERE 
                  (
                   [Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key')}]
                  )"}
            `,
                parsingControl:
                    {
                        type: 'object',
                        query:
                            {
                                title: (r, x) => {
                                    return '<li>' + r.Cells[0].FormattedValue + '</li>';
                                }
                            }
                    }
            }
    },

    rocheBPSPSimulationSelectorPopUpDropbox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPSimulationCompanySelector');
        },
        initDefault:
            (db) => {
                return [];
            },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
                type: 'POST',
                body:
                    (db) => `
            {
            "MDX" : "
                 WITH MEMBER [Measures Simulation Information by Company].[Measures Simulation Information by Company].[SimulationID]
                AS [Simulations].[Simulations].CurrentMember.Name
                MEMBER [Measures Simulation Information by Company].[Measures Simulation Information by Company].[DisplayName]
                AS IIF([Measures Simulation Information by Company].[Measures Simulation Information by Company].[Name] = \\"\\", 
                [Simulations].[Simulations].CurrentMember.Name, [Measures Simulation Information by Company].[Measures Simulation Information by Company].[Name] )
                SELECT
                {
                [Measures Simulation Information by Company].[Measures Simulation Information by Company].[SimulationID],
                [Measures Simulation Information by Company].[Measures Simulation Information by Company].[DisplayName]
                }
                ON COLUMNS,
                {FILTER(
                {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER({[Simulations].[Simulations].[All Simulations]}, All, Recursive)}, 0)}
                , [Simulation Information by Company].([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key')}],
                [Measures Simulation Information by Company].[Measures Simulation Information by Company].[Visible]) = 1 )}
                ON ROWS
                FROM
                [Simulation Information by Company]
                WHERE
                ([Companies].[Companies].[${Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key')}])         
            "}`,
                parsingControl:
                    {
                        type: 'object',
                        query:
                            {
                                items: (r, x) => {
                                    let result = [], selected = v('rocheBPSPSimulationSelectorPopUpDropbox.value');
                                    for (let i = 0; i < r.Cells.length; i = i + 2) {
                                        result.push({
                                            name: r.Cells[i + 1].FormattedValue,
                                            key: r.Cells[i].FormattedValue,
                                            on: selected === r.Cells[i].FormattedValue
                                        });
                                    }
                                    return result;
                                }
                            }
                    }
            }
    },

    rocheBPSPSimulationGridRow2CellVersionSelectorCellText: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPSimulationSelectorPopUpDropbox')
            return b;
        },

        initDefault: (db) => {
            return [];
        },
        init:
            {
                execute: (db) => {
                    //return {title: v('systemValueSelectedSimulationName')};
                    return {title: Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationSelectorPopUpDropbox', 'name')};
                }
            }
    },

    rocheBPSPSimulationSingleFlowSegmented: {
        init: {
            execute: (db) => {
                return {
                    data: [
                        {
                            value: '0',
                            selected: v('rocheBPSPSimulationSingleFlowSegmented.selected') === 'Single' || v('rocheBPSPSimulationSingleFlowSegmented.selected') === false
                        },
                        {
                            selected: v('rocheBPSPSimulationSingleFlowSegmented.selected') === 'Flow',
                            value: '1'
                        }
                    ]
                };
            }

        }
    },

    rocheBPSPSimulationRollSplitSegmented: {
        init: {
            execute: (db) => {
                return {
                    data: [
                        {
                            value: '0',
                            selected: v('rocheBPSPSimulationRollSplitSegmented.value') === '0' || v('rocheBPSPSimulationRollSplitSegmented.value') === false
                        },
                        {
                            selected: v('rocheBPSPSimulationRollSplitSegmented.value') === '1',
                            value: '1'
                        },
                        {
                            selected: v('rocheBPSPSimulationRollSplitSegmented.value') === '2',
                            value: '2'
                        }
                    ]
                };
            }

        },
        switch: {
            execute: (db) => {
                let cellData = v('rocheBPSPSimulationGridTable.cellData'), i, j, conditionOne, conditionTwo;
                for (i = 0; i < cellData.length; ++i) {
                    for (j = 0; j < cellData[i].length; ++j) {
                        if (typeof cellData[i][j].splitPopup !== 'undefined') {
                            conditionOne = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 && cellData[i][2].title !== 'PL6';
                            conditionTwo = v('rocheBPSPSimulationRollSplitSegmented.value') === 2 && cellData[i][2].title !== 'PL1';
                            cellData[i][j].splitPopup = conditionOne || conditionTwo;
                        }
                    }
                }
            }
        }
    },

    rocheBPSPSimulationGridTable:
        {
            initCondition: (db) => {
                let b = Utils.isValueExistingAndNotEmpty('rocheBPSPSimulationSelectorPopUpDropbox') &&
                    Utils.isValueExistingAndNotEmpty('rocheBPSPSimulationGridRow1CellReceiverSelector')
                return b;
            },

            initDefault: (db) => {
                return [];
            },
            init:
                {
                    url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Consolidated,RuleDerived,Updateable;$expand=Members($select=Name))`,
                    type: 'POST',
                    body: (db) => {

                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key'),
                            //company = '1391',
                            receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationGridRow1CellReceiverSelector', 'key'),
                            //receiver = 'PL',
                            relativeYear = parseInt(db.systemValueGlobalStartingPlanYear),
                            relativeYearMinusOne = parseInt(db.systemValueGlobalStartingPlanYear) - 1,
                            relativeYearMinusTwo = parseInt(db.systemValueGlobalStartingPlanYear) - 2,
                            relativeYearPlusOne = parseInt(db.systemValueGlobalStartingPlanYear) + 1,
                            relativeYearplusTwo = parseInt(db.systemValueGlobalStartingPlanYear) + 2,
                            relativeYearPlusThree = parseInt(db.systemValueGlobalStartingPlanYear) + 3,
                            simulation = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationSelectorPopUpDropbox', 'key'),
                            product = v('systemValueSimulationFocusedProduct'),
                            budget = v('systemValueGlobalCompanyProductPlanVersion'),
                            productLevel = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationPLViewLimitPopUpDropbox', 'key')
                        ;
                        return `{"MDX":"    
                                             With
                            --Create deault subset for the Rows by systemValueGlobalCompanyProductPlanVersion
                                 Set DefaultProductRows AS
                                 {TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[Products].[BPSP ${budget}].[PL1]}, ALL, RECURSIVE )}, ${productLevel})}
                            --Create deault subset for the Rows by systemValueGlobalCompanyProductPlanVersion and systemValueGlobalCompanyFocusedElement
                                 Set FocusedOnProductRows AS
                                 {TM1FILTERBYLEVEL({TM1DRILLDOWNMEMBER({[Products].[BPSP ${budget}].[${product}]}, ALL, RECURSIVE )}, ${productLevel})}
                            --Decide which rowSet to use
                                 MEMBER [Products].[BPSP ${budget}].[ProductIsFocused] AS 
                                 IIF(Count(FocusedOnProductRows)=0,'DefaultProductRows','FocusedOnProductRows')
                            -- Compress MDX result size with creating measures from Product Attributes for the query (decrease size from 3MB to 50KB)     
                                 MEMBER [LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[ProductParentID] as
                                        [Products].[BPSP ${budget}].CurrentMember.Properties('BPSP ${budget} Hierarchy Parent')
                                 MEMBER [LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[ProductName] as 
                                        [Products].[BPSP ${budget}].CurrentMember.Properties('BPSP ${budget} Description')
                                 MEMBER [LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[ProductCaption] as 
                                        [Products].[BPSP ${budget}].CurrentMember.Properties('BPSP ${budget} Element')
                                 MEMBER [LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[ProductLevel] as 
                                        [Products].[BPSP ${budget}].CurrentMember.Properties('BPSP ${budget} Product Level - Name')
                                 MEMBER [LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[ProductType] as 
                                        [Products].[BPSP ${budget}].CurrentMember.Properties('BPSP ${budget} Product Type')
                            SELECT 
                               {
                                ([Years].[Years].[${relativeYearMinusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[ProductParentID]),
                                ([Years].[Years].[${relativeYearMinusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[ProductName]),
                                ([Years].[Years].[${relativeYearMinusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[ProductCaption]),
                                ([Years].[Years].[${relativeYearMinusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[ProductLevel]),
                                ([Years].[Years].[${relativeYearMinusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[ProductType]),
                                 ([Years].[Years].[${relativeYearMinusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Growth Rate]),
                                 ([Years].[Years].[${relativeYearMinusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Sales Simulation]),
                                 ([Years].[Years].[${relativeYearMinusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Growth Rate]),
                                 ([Years].[Years].[${relativeYearMinusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Sales Simulation]),
                                 ([Years].[Years].[${relativeYear}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Growth Rate]),
                                 ([Years].[Years].[${relativeYear}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Sales Simulation]),
                                 ([Years].[Years].[${relativeYearPlusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Growth Rate]),
                                 ([Years].[Years].[${relativeYearPlusOne}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Sales Simulation]),
                                 ([Years].[Years].[${relativeYearplusTwo}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Growth Rate]),
                                 ([Years].[Years].[${relativeYearplusTwo}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Sales Simulation]),
                                 ([Years].[Years].[${relativeYearPlusThree}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Growth Rate]),
                                 ([Years].[Years].[${relativeYearPlusThree}],[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Sales Simulation])
                               }
                               PROPERTIES [Years].[Years].[Caption] ,[LineItems Sales Simulation by Product].[LineItems Sales Simulation by Product].[Caption]  ON COLUMNS , 
                               StrToSet([Products].[BPSP ${budget}].[ProductIsFocused])
                               PROPERTIES [Products].[BPSP ${budget}].[BPSP ${budget} Caption]  ON ROWS 
                            FROM [Sales Simulation by Product] 
                            WHERE 
                              (
                               [Simulations].[Simulations].[${simulation}],
                               [Companies].[Companies].[${company}],
                               [Receivers].[Receivers].[${receiver}],
                               [Measures Sales Simulation by Product].[Measures Sales Simulation by Product].[Value]
                              )  
                    "}`;
                    },
                    parsingControl: {
                        type: 'matrix',
                        length: 17,
                        query: [

                            (r, x) => {
                                let productParentID = r.Cells[x].FormattedValue;
                                let uiLevel = r.Cells[x + 3].FormattedValue.replace('a', '');
                                return {
                                    label: r.Cells[x + 1].FormattedValue,
                                    productCode: r.Cells[x + 2].FormattedValue,
                                    productLevel: r.Cells[x + 3].FormattedValue.replace('a', ''),
                                    uiLevel: uiLevel,
                                    skin: 'gridtable_hierarchy_bpsp_' + uiLevel,
                                    productParentID: productParentID,
                                    splitPopup: v('rocheBPSPSimulationRollSplitSegmented.value') === 1 || v('rocheBPSPSimulationRollSplitSegmented.value') === 2
                                }
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 2].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 3].FormattedValue}
                            },

                            (r, x) => {
                                return {title: r.Cells[x + 4].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 5].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 6].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 7].FormattedValue}
                            },


                            (r, x) => {
                                return {title: r.Cells[x + 8].FormattedValue}
                            },


                            (r, x) => {
                                let conditionOne = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL6',
                                    conditionTwo = v('rocheBPSPSimulationRollSplitSegmented.value') === 2 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL1';
                                return {
                                    title: r.Cells[x + 9].FormattedValue,
                                    splitPopup: conditionOne || conditionTwo,
                                    members: r.Cells[x + 9].Members
                                }
                            },


                            (r, x) => {
                                let conditionOne = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL6',
                                    conditionTwo = v('rocheBPSPSimulationRollSplitSegmented.value') === 2 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL1';
                                return {
                                    title: r.Cells[x + 10].FormattedValue,
                                    splitPopup: conditionOne || conditionTwo,
                                    members: r.Cells[x + 10].Members
                                }
                            },
                            (r, x) => {
                                let conditionOne = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL6',
                                    conditionTwo = v('rocheBPSPSimulationRollSplitSegmented.value') === 2 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL1';
                                return {
                                    title: r.Cells[x + 11].FormattedValue,
                                    splitPopup: conditionOne || conditionTwo,
                                    members: r.Cells[x + 11].Members
                                }
                            },
                            (r, x) => {
                                let conditionOne = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL6',
                                    conditionTwo = v('rocheBPSPSimulationRollSplitSegmented.value') === 2 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL1';
                                return {
                                    title: r.Cells[x + 12].FormattedValue,
                                    splitPopup: conditionOne || conditionTwo,
                                    members: r.Cells[x + 12].Members
                                }
                            },

                            (r, x) => {
                                let conditionOne = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL6',
                                    conditionTwo = v('rocheBPSPSimulationRollSplitSegmented.value') === 2 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL1';
                                return {
                                    title: r.Cells[x + 13].FormattedValue,
                                    splitPopup: conditionOne || conditionTwo,
                                    members: r.Cells[x + 13].Members
                                }
                            },
                            (r, x) => {
                                let conditionOne = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL6',
                                    conditionTwo = v('rocheBPSPSimulationRollSplitSegmented.value') === 2 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL1';
                                return {
                                    title: r.Cells[x + 14].FormattedValue,
                                    splitPopup: conditionOne || conditionTwo,
                                    members: r.Cells[x + 14].Members
                                }
                            },
                            (r, x) => {
                                let conditionOne = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL6',
                                    conditionTwo = v('rocheBPSPSimulationRollSplitSegmented.value') === 2 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL1';
                                return {
                                    title: r.Cells[x + 15].FormattedValue,
                                    splitPopup: conditionOne || conditionTwo,
                                    members: r.Cells[x + 15].Members
                                }
                            },
                            (r, x) => {
                                let conditionOne = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL6',
                                    conditionTwo = v('rocheBPSPSimulationRollSplitSegmented.value') === 2 && r.Cells[x + 3].FormattedValue.replace('a', '') !== 'PL1';
                                return {
                                    title: r.Cells[x + 16].FormattedValue,
                                    splitPopup: conditionOne || conditionTwo,
                                    members: r.Cells[x + 16].Members
                                }
                            }
                        ]
                    }
                },
            write: {
                url: (db, cell, widgetValue, row, col) => {
                    return `/api/v1/Processes('MODULE - UI - Simulation Yearly Input')/tm1.ExecuteWithReturn`;
                },
                type: 'POST',
                body: (db, cell, widgetValue, row, col) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key'),
                        receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationGridRow1CellReceiverSelector', 'key'),
                        product = Utils.getGridTableCell('rocheBPSPSimulationGridTable', 0).productCode,
                        pLineItem = Utils.getGridTableCurrentCell('rocheBPSPSimulationGridTable').members[6].Name,
                        year = Utils.getGridTableCurrentCell('rocheBPSPSimulationGridTable').members[5].Name,
                        simulation = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationSelectorPopUpDropbox', 'key'),
                        flowMode = v('rocheBPSPSimulationSingleFlowSegmented.value') === false ? '0' : parseInt(v('rocheBPSPSimulationSingleFlowSegmented.value')),
                        splitMode = v('rocheBPSPSimulationRollSplitSegmented.value') === false ? 0 : parseInt(v('rocheBPSPSimulationRollSplitSegmented.value')),
                        value = col % 2 == 0 ? Utils.getDecimalFromPercentString(widgetValue.value) : Utils.parseNumber(widgetValue.value),
                        parameters = [];

                    parameters.push(Utils.getProcessNameValuePair('pCompany', company));
                    parameters.push(Utils.getProcessNameValuePair('pReceiver', receiver));
                    parameters.push(Utils.getProcessNameValuePair('pProduct', product));
                    parameters.push(Utils.getProcessNameValuePair('pYear', year));
                    parameters.push(Utils.getProcessNameValuePair('pSimulation', simulation));
                    parameters.push(Utils.getProcessNameValuePair('pLineItem', pLineItem));
                    parameters.push(Utils.getProcessNameValuePair('pFlowMode', flowMode));
                    parameters.push(Utils.getProcessNameValuePair('pSplitMode', splitMode));
                    parameters.push(Utils.getProcessNameValuePair('pValue', value));
                    return Utils.buildProcessParameters(parameters);
                }
            },

            text_click: {
                execute: (db, cellData) => {
                    Utils.setWidgetValue('selectedYearSimulationPage', Utils.getGridTableCurrentCell('rocheBPSPSimulationGridTable').members[5].Name),
                        Utils.setWidgetValue('popUpProductCode', Utils.getGridTableCell('rocheBPSPSimulationGridTable', 0).productCode),
                        Utils.setWidgetValue('lineItemSimulationPage', Utils.getGridTableCurrentCell('rocheBPSPSimulationGridTable').members[6].Name),
                        Utils.setWidgetValue('popUpProductParentID', Utils.getGridTableCell('rocheBPSPSimulationGridTable', 0).productParentID);
                }
            }
        },
    // Growth
    'rocheBPSPSimulationGridTableHeaderText-04': {
        state: (db) => {
            let yearOne = String(parseInt(v('systemValueGlobalStartingPlanYear')) - 3),
                yearTwo = String(parseInt(v('systemValueGlobalStartingPlanYear')) - 2);
            return {
                body: 'Growth ' + yearOne.slice(2, 4) + '/' + yearTwo.slice(2, 4)
            };
        },
    },
    'rocheBPSPSimulationGridTableHeaderText-06': {
        state: (db) => {
            let yearOne = String(parseInt(v('systemValueGlobalStartingPlanYear')) - 2),
                yearTwo = String(parseInt(v('systemValueGlobalStartingPlanYear')) - 1);
            return {
                body: 'Growth ' + yearOne.slice(2, 4) + '/' + yearTwo.slice(2, 4)
            };
        },
    },
    'rocheBPSPSimulationGridTableHeaderText-08': {
        state: (db) => {
            let yearOne = String(parseInt(v('systemValueGlobalStartingPlanYear')) - 1),
                yearTwo = String(parseInt(v('systemValueGlobalStartingPlanYear')));
            return {
                body: 'Growth ' + yearOne.slice(2, 4) + '/' + yearTwo.slice(2, 4)
            };
        },
    },
    'rocheBPSPSimulationGridTableHeaderText-10': {
        state: (db) => {
            let yearOne = String(parseInt(v('systemValueGlobalStartingPlanYear'))),
                yearTwo = String(parseInt(v('systemValueGlobalStartingPlanYear')) + 1);
            return {
                body: 'Growth ' + yearOne.slice(2, 4) + '/' + yearTwo.slice(2, 4)
            };
        },
    },
    'rocheBPSPSimulationGridTableHeaderText-12': {
        state: (db) => {
            let yearOne = String(parseInt(v('systemValueGlobalStartingPlanYear')) + 1),
                yearTwo = String(parseInt(v('systemValueGlobalStartingPlanYear')) + 2);
            return {
                body: 'Growth ' + yearOne.slice(2, 4) + '/' + yearTwo.slice(2, 4)
            };
        },
    },
    'rocheBPSPSimulationGridTableHeaderText-14': {
        state: (db) => {
            let yearOne = String(parseInt(v('systemValueGlobalStartingPlanYear')) + 2),
                yearTwo = String(parseInt(v('systemValueGlobalStartingPlanYear')) + 3);
            return {
                body: 'Growth ' + yearOne.slice(2, 4) + '/' + yearTwo.slice(2, 4)
            };
        },
    },

    //Years
    'rocheBPSPSimulationGridTableHeaderText-05': {
        state: (db) => {
            return {body: parseInt(db.systemValueGlobalStartingPlanYear) - 2};
        },
    },
    'rocheBPSPSimulationGridTableHeaderText-07': {
        state: (db) => {
            return {body: parseInt(db.systemValueGlobalStartingPlanYear) - 1};
        },
    },
    'rocheBPSPSimulationGridTableHeaderText-09': {
        state: (db) => {
            return {body: parseInt(db.systemValueGlobalStartingPlanYear)};
        },
    },
    'rocheBPSPSimulationGridTableHeaderText-11': {
        state: (db) => {
            return {body: parseInt(db.systemValueGlobalStartingPlanYear) + 1};
        },
    },
    'rocheBPSPSimulationGridTableHeaderText-13': {
        state: (db) => {
            return {body: parseInt(db.systemValueGlobalStartingPlanYear) + 2};
        },
    },
    'rocheBPSPSimulationGridTableHeaderText-15': {
        state: (db) => {
            return {body: parseInt(db.systemValueGlobalStartingPlanYear) + 3};
        },
    },

    rocheBPSPSimulationSelectorShortcutPopupGridTable: {
        initCondition: (db) => {
            return Utils.isGridTableLoaded('rocheBPSPSimulationGridTable')
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return v('rocheBPSPSimulationGridTable.cellData').filter(e => ['PL1', 'PL1a', 'PL2', 'PL2a', 'PL3', 'PL3a'].includes(e[0].uiLevel)).map(e => {
                    return [{
                        label: e[0].label,
                        skin: 'gridtable_hierarchy_shortcut_bpsp_' + e[0].uiLevel,
                        productCode: e[0].productCode
                    }];
                });
            }
        }
    },
    rocheBPSPSimulationSelectorShortcutPopupGridTableButton01: {
        launch:
            {
                execute: (db) => {
                    Widgets['systemValueSimulationFocusedProduct'] = Utils.getGridTableCell('rocheBPSPSimulationSelectorShortcutPopupGridTable', 0).productCode;
                }
            },
    },

    rocheBPSPSimulationGridTableHeaderFocusButton: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueSimulationFocusedProduct === db.systemValueSimulationFocusedProductDefault};
            }
        },
    },

    rocheBPSPSimulationGridTableHeaderReturnFromFocus: {
        init: {
            execute: (db) => {
                return {visible: db.systemValueSimulationFocusedProduct !== db.systemValueSimulationFocusedProductDefault};
            }
        },
        launch: {
            execute: (db) => {
                Widgets['systemValueSimulationFocusedProduct'] = db.systemValueSimulationFocusedProductDefault;
            }
        }
    },

    rocheBPSPSimulationDistributionPopupGridTable:
        {
            initCondition: (db) => {
                return Utils.isValueExistingAndNotEmpty('rocheBPSPSimulationGridTable', 'cellData')
                    && v('selectedYearSimulationPage') !== false
                    ;
            },
            initDefault: (db) => {
                return [];
            },
            switch: {
                url: (db) => `/api/v1/Cellsets('${db.cellsetId}')/Cells`,
                type: 'PATCH',
                body: (db, cell, widgetValue, row, col) => {
                    return `{"Ordinal": ${widgetValue.ordinal},"Value": \"${widgetValue.value}\"}`
                }
            },
            write: {
                execute: (db, cell, widgetValue, row, col) => {
                    if (col == 4) {
                        Api.executeRequest('writeGrowthRate.rocheBPSPSimulationDistributionPopupGridTable');
                    } else if (col == 6) {
                        Api.executeRequest('writePercent.rocheBPSPSimulationDistributionPopupGridTable');
                    } else {
                        Api.executeRequest('writeValue.rocheBPSPSimulationDistributionPopupGridTable');
                    }
                }
            },
            writeValue: {
                url: (db) => `/api/v1/Cellsets('${Repository['rocheBPSPSimulationDistributionPopupGridTable'].cellsetId}')/Cells`,
                type: 'PATCH',
                body: (db) => {
                    let widgetValue = Utils.getGridTableCurrentCell('rocheBPSPSimulationDistributionPopupGridTable'),
                        value = v('rocheBPSPSimulationDistributionPopupGridTable.write.value');
                    return `{"Ordinal": ${widgetValue.ordinal},"Value": ${value}}`;

                }
            },

            writePercent: {
                url: (db) => `/api/v1/Cellsets('${Repository['rocheBPSPSimulationDistributionPopupGridTable'].cellsetId}')/Cells`,
                type: 'PATCH',
                body: (db) => {
                    let widgetValue = Utils.getGridTableCurrentCell('rocheBPSPSimulationDistributionPopupGridTable'),
                        value = Utils.getDecimalFromPercentString(v('rocheBPSPSimulationDistributionPopupGridTable.write.value'));
                    return `{"Ordinal": ${widgetValue.ordinal},"Value": ${value}}`;

                }
            },

            writeGrowthRate:
                {
                    url: (db) => `/api/v1/Processes('MODULE - UI - Simulation Yearly Input Growth')/tm1.ExecuteWithReturn`,
                    type: 'POST',
                    body: (db) => {
                        let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key'),
                            receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationGridRow1CellReceiverSelector', 'key'),
                            product = Utils.getGridTableCurrentCell('rocheBPSPSimulationDistributionPopupGridTable').members[5].Name,
                            year = v('selectedYearSimulationPage'),
                            simulation = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationSelectorPopUpDropbox', 'key'),
                            lineItem = 'Growth Rate',
                            value = Utils.getDecimalFromPercentString(v('rocheBPSPSimulationDistributionPopupGridTable.write.value')),
                            parameters = [];

                        parameters.push(Utils.getProcessNameValuePair('pCompany', company));
                        parameters.push(Utils.getProcessNameValuePair('pReceiver', receiver));
                        parameters.push(Utils.getProcessNameValuePair('pProduct', product));
                        parameters.push(Utils.getProcessNameValuePair('pYear', year));
                        parameters.push(Utils.getProcessNameValuePair('pSimulation', simulation));
                        parameters.push(Utils.getProcessNameValuePair('pLineItem', lineItem));
                        parameters.push(Utils.getProcessNameValuePair('pValue', value));
                        return Utils.buildProcessParameters(parameters);
                    }
                },

            init: {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Updateable,RuleDerived,Consolidated;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => {
                    let productCode = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 ? v('popUpProductCode') : v('popUpProductParentID'),
                        simulation = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationSelectorPopUpDropbox', 'key'),
                        company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key'),
                        receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationGridRow1CellReceiverSelector', 'key'),
                        budget = v('systemValueGlobalCompanyProductPlanVersion'),
                        year = v('selectedYearSimulationPage');

                    return `
                {"MDX" :"With
                            Member [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[ProductName] As
                                 [Products Flat].[Products Flat].[BPSP ${budget} Caption]
                            Member [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[ProductLevel] As
                                 [Products Flat].[Products Flat].[BPSP ${budget} Product Level - Name]
                            SELECT 
                               {[LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[ProductName],
                                [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[ProductLevel],
                                [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[Flag total],
                                [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[UI Lock],
                                [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[Previous Year Sales],
                                [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[Growth Rate],
                                [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[Sales Simulation],
                                [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[Split],
                                [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[Difference]} 
                               PROPERTIES [LineItems Sales Simulation by Product Flat].[LineItems Sales Simulation by Product Flat].[Caption]  ON COLUMNS , 
                               
                               UNION({[Products Flat].[Products Flat].[${productCode}]},
                               {TM1FILTERBYLEVEL({DRILLDOWNMEMBER({[Products Flat].[Products Flat].[BPSP ${budget} ${productCode}]}, {[Products Flat].[Products Flat].[BPSP ${budget} ${productCode}]})},0)},All)
                               PROPERTIES [Products Flat].[Products Flat].[Caption]  ON ROWS 
                            FROM [Sales Simulation by Product Flat] 
                            WHERE 
                              (
                               [Simulations].[Simulations].[${simulation}],
                               [Companies].[Companies].[${company}],
                               [Receivers].[Receivers].[${receiver}],
                               [Measures Sales Simulation by Product Flat].[Measures Sales Simulation by Product Flat].[Value],
                               [Years].[Years].[${year}]
                              )
                      )"}`
                },
                parsingControl: {
                    type: 'matrix',
                    length: 9,
                    query: [

                        // product name
                        (r, x) => {
                            let result, pl;
                            Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] = x;
                            pl = r.Cells[x + 1].FormattedValue.replace('a', '');
                            result =
                                {
                                    label: r.Cells[x].FormattedValue,
                                    skin: 'gridtable_hierarchy_bpsp_' + pl,
                                    cellVisible: true,
                                    icon: 'icon-badge',
                                    productLevel: pl
                                };
                            return result;
                        },

                        ///product level
                        (r, x) => {
                            Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] + 1;
                            return {
                                title: r.Cells[Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex']].FormattedValue.replace('PL', ''),
                                cellVisible: true,
                                cellSkin: ''
                            };
                        },

                        // product lock
                        (r, x) => {
                            Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] + 2;
                            let c = r.Cells[Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex']],
                                editable = c.Consolidated === false && c.RuleDerived === false;
                            return {
                                value: parseInt(c.FormattedValue) === 0 ? 0 : 1,
                                ordinal: c.Ordinal,
                                cellSkin: editable ? '' : 'readonly_bpsp',
                                editable: editable,
                                skin: 'lock_unlock_bpsp'
                            };
                        },

                        // prev year
                        (r, x) => {
                            Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] + 1;
                            let c = r.Cells[Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex']];
                            return {
                                title: c.FormattedValue,
                                ordinal: c.Ordinal,
                                cellSkin: 'readonly_bpsp',
                                editable: false,
                                skin: 'monthly_right_bpsp'
                            };
                        },

                        // growth rate
                        (r, x) => {
                            Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] + 1;
                            let
                                index = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'],
                                indexPlusTwo = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] + 2,
                                c = r.Cells[index],
                                cPlusTwo = r.Cells[indexPlusTwo],
                                editable = cPlusTwo.Consolidated === false && cPlusTwo.RuleDerived === false,
                                performable = cPlusTwo.Consolidated === true && cPlusTwo.RuleDerived === false;

                            let result = {
                                title: c.FormattedValue,
                                //cellSkin: editable ? '' : 'readonly_bpsp',
                                skin: 'monthly_right_bpsp',
                                cellVisible: true,
                                editable: true,
                                ordinal: c.Ordinal,
                                members: c.Members,
                                performable: true,
                                applyMeasuresToSection: true,
                                width: '100%',
                                height: '100%'
                            };
                            if (performable) {
                                result['icon'] = 'icon-cloud-arrow-up';
                            }
                            return result;
                        },
                        // value
                        (r, x) => {
                            Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] + 1;
                            let
                                index = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'],
                                indexPlusOne = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] + 1,
                                c = r.Cells[index],
                                cPlusOne = r.Cells[indexPlusOne],
                                editable = cPlusOne.Consolidated === false && cPlusOne.RuleDerived === false,
                                performable = cPlusOne.Consolidated === true && cPlusOne.RuleDerived === false;

                            let result = {
                                title: c.FormattedValue,
                                //cellSkin: editable ? '' : 'readonly_bpsp',
                                skin: 'monthly_right_bpsp',
                                cellVisible: true,
                                editable: true,
                                ordinal: c.Ordinal,
                                members: c.Members,
                                performable: true,
                                applyMeasuresToSection: true,
                                width: '100%',
                                height: '100%'
                            };
                            if (performable) {
                                result['icon'] = 'icon-cloud-arrow-up';
                            }
                            return result;
                        },

                        // percent
                        (r, x) => {
                            Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] + 1;
                            return Repository.rocheBPSPSimulation.getSimulationDistributionEditPopupGridTableCell(Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'], r);
                        },

                        // difference
                        (r, x) => {
                            Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] = Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'] + 1;
                            let s = Repository.rocheBPSPSimulation.getSimulationDistributionEditPopupGridTableCell(Widgets['rocheBPSPSimulationDistributionPopupGridTableRelativeIndex'], r);
                            if (parseInt(s.title) > 0) {
                                s['titleFontColor'] = '#A86B24';
                            }
                            s['visible'] = x === 0;
                            return s;
                        },

                        //split down
                        (r, x) => {
                            return {
                                visible: x === 0
                            };
                        }
                    ]
                }
            }
        },
    'rocheBPSPSimulationDistributionPopupGridTableCellButton-09': {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Simulation Yearly Recalculate Split')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key'),
                        receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationGridRow1CellReceiverSelector', 'key'),
                        product = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 ? v('popUpProductCode') : v('popUpProductParentID'),
                        year = v('selectedYearSimulationPage'),
                        simulation = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationSelectorPopUpDropbox', 'key'),
                        parameters = [];

                    parameters.push(Utils.getProcessNameValuePair('pCompany', company));
                    parameters.push(Utils.getProcessNameValuePair('pReceiver', receiver));
                    parameters.push(Utils.getProcessNameValuePair('pProduct', product));
                    parameters.push(Utils.getProcessNameValuePair('pYear', year));
                    parameters.push(Utils.getProcessNameValuePair('pSimulation', simulation));
                    return Utils.buildProcessParameters(parameters);
                }
            },
    },

    rocheBPSPSimulationDistributionPopupControlPanelSaveButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Simulation Yearly Save Split')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationCompanySelector', 'key'),
                        receiver = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationGridRow1CellReceiverSelector', 'key'),
                        product = v('rocheBPSPSimulationRollSplitSegmented.value') === 1 ? v('popUpProductCode') : v('popUpProductParentID'),
                        pLineItem = 'Sales Simulation',
                        year = v('selectedYearSimulationPage'),
                        simulation = Utils.getDropBoxSelectedItemAttribute('rocheBPSPSimulationSelectorPopUpDropbox', 'key'),
                        flowMode = v('rocheBPSPSimulationSingleFlowSegmented.value') === false ? 0 : parseInt(v('rocheBPSPSimulationSingleFlowSegmented.value')),
                        parameters = [];

                    parameters.push(Utils.getProcessNameValuePair('pProduct', product));
                    parameters.push(Utils.getProcessNameValuePair('pCompany', company));
                    parameters.push(Utils.getProcessNameValuePair('pReceiver', receiver));
                    parameters.push(Utils.getProcessNameValuePair('pYear', year));
                    parameters.push(Utils.getProcessNameValuePair('pSimulation', simulation));
                    parameters.push(Utils.getProcessNameValuePair('pLineItem', pLineItem));
                    parameters.push(Utils.getProcessNameValuePair('pFlowMode', flowMode));
                    return Utils.buildProcessParameters(parameters);
                }
            },
    },

    rocheBPSPSimulationFocusPopupFocusButton: {
        launch:
            {
                execute: (db) => {
                    Utils.setWidgetValue('systemValueSimulationFocusedProduct', Utils.getGridTableCell('rocheBPSPSimulationGridTable', 0).productCode);
                }
            }
    },

    rocheBPSPSimulationPLViewLimitPopUpDropbox: {
        init:
            {
                execute: (db) => {
                    let pls = {
                            'PL1': '0,1,2,3,4,5',
                            'PL2': '0,1,2,3,4',
                            'PL3': '0,1,2,3',
                            'PL4': '0,1,2',
                            'PL5': '0,1',
                            'PL6': '0'
                        },
                        result = [],
                        selected = v('rocheBPSPSimulationPLViewLimitPopUp.value');
                    for (let i = 1; i < 7; i = i + 1) {
                        result.push({
                            name: 'PL' + i,
                            key: pls['PL' + i],
                            on: selected === pls['PL' + i]
                        })
                    }
                    return result;
                }

            }
    },
    rocheBPSPCompanySettingsMonthlySplitDaysGridRow4Cell1Toggle: {
        initCondition: (db) => {
            let a = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsMonthlySplitDaysGridRow1Cell2DropBox');
            return a;
        },
        initDefault: (db) => {
            return [];
        },
        switch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Company Settings Control')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                return `{
                        "Parameters": [
                                {"Name": "pModule", "Value": "Product"},
                                {"Name": "pCompany", "Value": "${Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsMonthlySplitDaysGridRow1Cell2DropBox', 'key')}"},
                                {"Name": "pFunction", "Value": "Toggle Monthly Phasing"}
                        ]
                    }`;
            }
        },
        init:
            {
                url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsMonthlySplitDaysGridRow1Cell2DropBox', 'key'); //${company}
                    return `{"MDX":"
                                SELECT 
                                    {[Measures Company Information].[Measures Company Information].[Use Monthly Phasing]} ON COLUMNS , 
                                    {[Companies].[Companies].[All Companies^${company}]} ON ROWS 
                                FROM [Company Information] 
                                WHERE 
                                    (
                                    [Versions].[Versions].[Live]
                                    )
                            "}`
                },
                parsingControl: {
                    type: 'object',
                    query: {
                        value: (r, x) => {
                            return parseInt(r.Cells[x].FormattedValue) > 0 ? 1 : 0
                        }
                    }
                }
            }
    },
    rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox: {
        choose: {
            execute: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsVersionsGridRow1Cell2DropBox', 'key');

                Utils.setWidgetValue('systemValueGlobalSelectedCompany', company);
            }
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue)`,
            type: 'POST',
            body: (db) => `{
                "MDX" : "SELECT
                            {[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Name],[}ElementAttributes_Companies].[}ElementAttributes_Companies].[Company - Key]} ON COLUMNS ,
                            {TM1SubsetToSet([Companies].[Companies], \\"All Active\\")} ON ROWS
                        FROM 
                            [}ElementAttributes_Companies]
                "}`,
            parsingControl: {
                type: 'object',
                query: {
                    items: (r, x) => {
                        let result = [], selected = v('systemValueGlobalSelectedCompany');
                        for (let i = 0; i < r.Cells.length; i = i + 2) {
                            result.push({
                                'name': r.Cells[i].FormattedValue,
                                key: r.Cells[i + 1].FormattedValue,
                                on: selected === r.Cells[i + 1].FormattedValue
                            });
                        }
                        return result;
                    }
                }
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsGridTable: {
        initCondition: (db) => {
            let b = Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox')
            return b;
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue,Consolidated,RuleDerived,Updateable;$expand=Members($select=Name))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox', 'key');

                return `{"MDX":"
                WITH MEMBER [Measures Simulation Information by Company].[Measures Simulation Information by Company].[Simulation] AS
                    [Simulations].[Simulations].CurrentMember.Name
                SELECT 
                    {
                        [Measures Simulation Information by Company].[Measures Simulation Information by Company].[Visible],
                        [Measures Simulation Information by Company].[Measures Simulation Information by Company].[Simulation],
                        [Measures Simulation Information by Company].[Measures Simulation Information by Company].[Name],
                        [Measures Simulation Information by Company].[Measures Simulation Information by Company].[Base],
                        [Measures Simulation Information by Company].[Measures Simulation Information by Company].[Created DateTime],
                        [Measures Simulation Information by Company].[Measures Simulation Information by Company].[Created By]
                    } ON COLUMNS , 
                    {TM1FILTERBYLEVEL( {TM1DRILLDOWNMEMBER( {[Simulations].[Simulations].[All Simulations]}, All, Recursive)}, 0)} ON ROWS
                    FROM 
                        [Simulation Information by Company] 
                    WHERE 
                        ([Companies].[Companies].[${company}])
                    "}`;
            },
            parsingControl: {
                type: 'matrix',
                length: 6,
                query: [
                    (r, x) => {
                        return {
                            icon: parseInt(r.Cells[x].FormattedValue) === 1 ? 'icon-eye' : 'icon-eye-slash',
                            cellSkin: parseInt(r.Cells[x].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                            pSimulation: r.Cells[x + 1].FormattedValue,
                            pAction: parseInt(r.Cells[x].FormattedValue) === 1 ? 'Lock' : 'Unlock'
                        }
                    },
                    (r, x) => {
                        return {
                            title: r.Cells[x + 2].FormattedValue !== '' ? r.Cells[x + 2].FormattedValue : r.Cells[x + 1].FormattedValue,
                            cellSkin: parseInt(r.Cells[x].FormattedValue) === 1 ? '' : 'readonly_bpsp'
                        }
                    },
                    (r, x) => {
                        return {
                            title: r.Cells[x + 3].FormattedValue,
                            cellSkin: parseInt(r.Cells[x].FormattedValue) === 1 ? '' : 'readonly_bpsp'
                        }
                    },
                    (r, x) => {
                        return {
                            title: r.Cells[x + 4].FormattedValue,
                            cellSkin: parseInt(r.Cells[x].FormattedValue) === 1 ? '' : 'readonly_bpsp'
                        }
                    },
                    (r, x) => {
                        return {
                            title: r.Cells[x + 5].FormattedValue,
                            cellSkin: parseInt(r.Cells[x].FormattedValue) === 1 ? '' : 'readonly_bpsp'
                        }
                    },
                    (r, x) => {
                        return {
                            icon: 'icon-copy',
                            cellSkin: parseInt(r.Cells[x].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                            pSimulation: r.Cells[x + 1].FormattedValue,
                        }
                    },
                    (r, x) => {
                        return {
                            icon: 'icon-edit',
                            cellSkin: parseInt(r.Cells[x].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                            pSimulation: r.Cells[x + 1].FormattedValue
                        }
                    },
                    (r, x) => {
                        return {
                            icon: 'icon-trash',
                            cellSkin: parseInt(r.Cells[x].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                            pSimulation: r.Cells[x + 1].FormattedValue
                        }
                    },
                    (r, x) => {
                        return {
                            icon: 'icon-chevron-right',
                            cellSkin: parseInt(r.Cells[x].FormattedValue) === 1 ? '' : 'readonly_bpsp',
                            pSimulation: r.Cells[x + 1].FormattedValue
                        }
                    },
                ]
            }
        },
    },
    rocheBPSPCompanySettingsSimulationsVisibilityPopupControlPanelUpdateButton: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsSimulationsGridTable', 'row');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return {
                    label: Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsSimulationsGridTable').pAction
                };
            }
        },
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Simulation Settings Control')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox', 'key'),
                    simulation = Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsSimulationsGridTable').pSimulation,
                    action = Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsSimulationsGridTable').pAction;

                return `{
                    "Parameters": [
                        {"Name": "pCompany", "Value": "${company}"},
                        {"Name": "pSimulation", "Value": "${simulation}"},
                        {"Name": "pAction", "Value": "${action}"}
                    ]
                }`
            }
        },
    },
    rocheBPSPCompanySettingsSimulationsEditPopupEditNameTextBox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsSimulationsGridTable', 'row');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            execute: (db) => {
                return {
                    value: Utils.getGridTableCell('rocheBPSPCompanySettingsSimulationsGridTable', 1).title
                };
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsEditPopupControlPanelSaveButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Simulation Settings Edit')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox', 'key'),
                    simulation = Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsSimulationsGridTable').pSimulation,
                    newName = v('rocheBPSPCompanySettingsSimulationsEditPopupEditNameTextBox.value');

                return `{
                    "Parameters": [
                        {"Name": "pCompany", "Value": "${company}"},
                        {"Name": "pSimulation", "Value": "${simulation}"},
                        {"Name": "pName", "Value": "${newName}"}
                    ]
                }`
            }
        },
    },
    rocheBPSPCompanySettingsSimulationsClearPopupControlPanelClearButton: {
        launch: {
            url: (db) => `/api/v1/Processes('MODULE - UI - Simulation Settings Clear')/tm1.ExecuteWithReturn`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox', 'key'),
                    simulation = Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsSimulationsGridTable').pSimulation;

                return `{
                    "Parameters": [
                        {"Name": "pCompany", "Value": "${company}"},
                        {"Name": "pSimulation", "Value": "${simulation}"},
                        {"Name": "pScope", "Value": "All"}
                    ]
                }`
            }
        },
    },
    rocheBPSPCompanySettingsSimulationsResetPopupGridRow3Cell3DropBox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox', 'key');

                return `{
                "MDX" : "SELECT
                    {[Measures Version Information by Company].[Measures Version Information by Company].[Name]} 
                    ON COLUMNS,
                    {[Versions].[Versions].[Planning versions].CHILDREN}
                    ON ROWS
                FROM 
                    [Version Information by Company] 
                WHERE
                    ([Companies].[Companies].[${company}])
                "}`
            },
            parsingControl: {
                type: 'object',
                query: {
                    items: (r, x) => {
                        let results = [];
                        for (let i = 0; i < r.Cells.length; i = i + 1) {
                            results.push({
                                key: r.Cells[i].Members[1].Name,
                                name: r.Cells[i].FormattedValue === '' ? r.Cells[i].Members[1].Name : r.Cells[i].FormattedValue
                            });
                        }
                        ;
                        return results;
                    },
                    editable: (r, x) => {
                        return Widgets['ResetToggle1Selected']
                    }
                }
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsResetPopupGridRow4Cell3DropBox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox', 'key');

                return `{
                "MDX" : "SELECT
                    {[Measures Version Information by Company].[Measures Version Information by Company].[Name]} 
                    ON COLUMNS,
                    {[Versions].[Versions].[Planning versions].CHILDREN}
                    ON ROWS
                FROM 
                    [Version Information by Company] 
                WHERE
                    ([Companies].[Companies].[${company}])
                "}`
            },
            parsingControl: {
                type: 'object',
                query: {
                    items: (r, x) => {
                        let results = [];
                        for (let i = 0; i < r.Cells.length; i = i + 1) {
                            results.push({
                                key: r.Cells[i].Members[1].Name,
                                name: r.Cells[i].FormattedValue === '' ? r.Cells[i].Members[1].Name : r.Cells[i].FormattedValue
                            });
                        }
                        ;
                        return results;
                    },
                    editable: (r, x) => {
                        return Widgets['ResetToggle2Selected']
                    }
                }
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsResetPopupGridRow5Cell3DropBox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox', 'key');

                return `{
                "MDX" : "SELECT
                    {[Measures Simulation Information by Company].[Measures Simulation Information by Company].[Name]} 
                    ON COLUMNS,
                    {[Simulations].[Simulations].[All Simulations].CHILDREN}
                    ON ROWS
                FROM 
                    [Simulation Information by Company] 
                WHERE
                    ([Companies].[Companies].[${company}])
                "}`
            },
            parsingControl: {
                type: 'object',
                query: {
                    items: (r, x) => {
                        let results = [];
                        for (let i = 0; i < r.Cells.length; i = i + 1) {
                            results.push({
                                key: r.Cells[i].Members[1].Name,
                                name: r.Cells[i].FormattedValue === '' ? r.Cells[i].Members[1].Name : r.Cells[i].FormattedValue
                            });
                        }
                        ;
                        return results;
                    },
                    editable: (r, x) => {
                        return Widgets['ResetToggle3Selected']
                    }
                }
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsResetPopupGridRow3Cell1Toggle: {
        init: {
            execute: (db) => {
                Utils.setWidgetValue('ResetToggle1Selected', true);
                Utils.setWidgetValue('ResetToggle2Selected', false);
                Utils.setWidgetValue('ResetToggle3Selected', false);
                Utils.setWidgetValue('ResetToggle4Selected', false);

                return true;
            }
        },
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('ResetToggle1Selected', true);
                Utils.setWidgetValue('ResetToggle2Selected', false);
                Utils.setWidgetValue('ResetToggle3Selected', false);
                Utils.setWidgetValue('ResetToggle4Selected', false);

                return true;
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsResetPopupGridRow4Cell1Toggle: {
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('ResetToggle1Selected', false);
                Utils.setWidgetValue('ResetToggle2Selected', true);
                Utils.setWidgetValue('ResetToggle3Selected', false);
                Utils.setWidgetValue('ResetToggle4Selected', false);

                return true;
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsResetPopupGridRow5Cell1Toggle: {
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('ResetToggle1Selected', false);
                Utils.setWidgetValue('ResetToggle2Selected', false);
                Utils.setWidgetValue('ResetToggle3Selected', true);
                Utils.setWidgetValue('ResetToggle4Selected', false);

                return true;
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsResetPopupGridRow6Cell1Toggle: {
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('ResetToggle1Selected', false);
                Utils.setWidgetValue('ResetToggle2Selected', false);
                Utils.setWidgetValue('ResetToggle3Selected', false);
                Utils.setWidgetValue('ResetToggle4Selected', true);

                return true;
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsResetPopupControlPanelResetButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Simulation Settings Reset')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox', 'key'),
                        simulation = Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsSimulationsGridTable').pSimulation,
                        mode = '',
                        reference = '';

                    if (v('ResetToggle1Selected')) {
                        mode = 'Version'
                        reference = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsResetPopupGridRow3Cell3DropBox', 'key')
                    } else if (v('ResetToggle2Selected')) {
                        mode = 'Growth'
                        reference = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsResetPopupGridRow4Cell3DropBox', 'key')
                    } else if (v('ResetToggle3Selected')) {
                        mode = 'Simulation'
                        reference = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsResetPopupGridRow5Cell3DropBox', 'key')
                    } else {
                        mode = 'Empty'
                    }

                    return `{
                        "Parameters": [
                            {"Name": "pCompany", "Value": "${company}"},
                            {"Name": "pSimulation", "Value": "${simulation}"},
                            {"Name": "pMode", "Value": "${mode}"},
                            {"Name": "pReference", "Value": "${reference}"}
                        ]
                    }`
                }
            },
    },
    rocheBPSPCompanySettingsSimulationsSpreadPopupGridRow3Cell3DropBox: {
        initCondition: (db) => {
            return Utils.isValueExistingAndNotEmpty('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox');
        },
        initDefault: (db) => {
            return [];
        },
        init: {
            url: (db) => `/api/v1/ExecuteMDX?$expand=Cells($select=Ordinal,FormattedValue;$expand=Members($select=Name))`,
            type: 'POST',
            body: (db) => {
                let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox', 'key');

                return `{
                "MDX" : "SELECT
                    {[Measures Version Information by Company].[Measures Version Information by Company].[Name]} 
                    ON COLUMNS,
                    {[Versions].[Versions].[Planning versions].CHILDREN}
                    ON ROWS
                FROM 
                    [Version Information by Company] 
                WHERE
                    ([Companies].[Companies].[${company}])
                "}`
            },
            parsingControl: {
                type: 'object',
                query: {
                    items: (r, x) => {
                        let results = [];
                        for (let i = 0; i < r.Cells.length; i = i + 1) {
                            results.push({
                                key: r.Cells[i].Members[1].Name,
                                name: r.Cells[i].FormattedValue === '' ? r.Cells[i].Members[1].Name : r.Cells[i].FormattedValue
                            });
                        }
                        ;
                        return results;
                    }
                }
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsSpreadPopupGridRow3Cell1Toggle: {
        init: {
            execute: (db) => {
                Utils.setWidgetValue('SpreadToggle1Selected', true);
                Utils.setWidgetValue('SpreadToggle2Selected', false);

                return true;
            }
        },
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('SpreadToggle1Selected', !v('SpreadToggle1Selected'));

                return true;
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsSpreadPopupGridRow4Cell1Toggle: {
        switch: {
            execute: (db) => {
                Utils.setWidgetValue('SpreadToggle2Selected', !v('SpreadToggle2Selected'));

                return true;
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsSpreadPopupControlPanelSpreadButton: {
        launch:
            {
                url: (db) => `/api/v1/Processes('MODULE - UI - Simulation Settings Spread')/tm1.ExecuteWithReturn`,
                type: 'POST',
                body: (db) => {
                    let company = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsGridRow1Cell2DropBox', 'key'),
                        simulation = Utils.getGridTableCurrentCell('rocheBPSPCompanySettingsSimulationsGridTable').pSimulation,
                        version = Utils.getDropBoxSelectedItemAttribute('rocheBPSPCompanySettingsSimulationsSpreadPopupGridRow3Cell3DropBox', 'key'),
                        spreadToProductView = 0,
                        spreadToCustomerView = 0;

                    if (v('SpreadToggle1Selected')) {
                        spreadToProductView = 1;
                    }
                    if (v('SpreadToggle2Selected')) {
                        spreadToCustomerView = 1;
                    }

                    return `{
                    "Parameters": [
                        {"Name": "pCompany", "Value": "${company}"},
                        {"Name": "pSimulationFrom", "Value": "${simulation}"},
                        {"Name": "pVersionTo", "Value": "${version}"},
                        {"Name": "pProduct", "Value": "${spreadToProductView}"},
                        {"Name": "pCustomer", "Value": "${spreadToCustomerView}"}
                    ]
                    }`
                }
            },
    },
    rocheBPSPSimulationSelectorPopUpButton: {
        text_click: {
            execute: (db) => {
                Utils.setWidgetValue('simulationToSimulationSettings', true);
            }
        }
    },
    rocheBPSPCompanySettingsSimulationsGridRow1Cell0Button: {
        launch: {
            execute: (db) => {
                if (v('simulationToSimulationSettings')) {
                    Api.openPage('rocheBPSPSimulation');
                } else {
                    Api.openPage('rocheBPSPSettings');
                }
                Utils.setWidgetValue('simulationToSimulationSettings', false);
            }
        }
    },
}
;